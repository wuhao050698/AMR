(w / want-01
   :ARG0 (b / boy)
   :ARG1 (b2 / believe-01
        :ARG0 (g / girl)
        :ARG1 b))

instance(w,want-01)
instance(b,boy)
instance(b2,believe-01)
instance(g,girl)
ARG0(w,b)
ARG1(w,b2)
ARG0(b2,g)
ARG1(b2,b)

(c / chapter
  :mod 1)

instance(c,chapter)
mod(c,1)

(s / see-01
      :ARG0 (i / i)
      :ARG1 (p / picture
            :mod (m / magnificent)
            :location (b2 / book :wiki -
                  :name (n / name :op1 "True" :op2 "Stories" :op3 "from" :op4 "Nature")
                  :topic (f / forest
                        :mod (p2 / primeval))))
      :mod (o / once)
      :time (a / age-01
            :ARG1 i
            :ARG2 (t / temporal-quantity :quant 6
                  :unit (y / year))))

instance(s,see-01)
instance(i,i)
instance(p,picture)
instance(m,magnificent)
instance(b2,book)
instance(n,name)
instance(f,forest)
instance(p2,primeval)
instance(o,once)
instance(a,age-01)
instance(t,temporal-quantity)
instance(y,year)
ARG0(s,i)
ARG1(s,p)
mod(p,m)
location(p,b2)
wiki(b2,-)
name(b2,n)
op1(n,"True")
op2(n,"Stories")
op3(n,"from")
op4(n,"Nature")
topic(b2,f)
mod(f,p2)
mod(s,o)
time(s,a)
ARG1(a,i)
ARG2(a,t)
quant(t,6)
unit(t,y)

(p / picture
  :domain (i / it)
  :topic (b2 / boa
           :mod (c2 / constrictor)
           :ARG0-of (s / swallow-01
                      :ARG1 (a / animal))))

instance(p,picture)
instance(i,it)
instance(b2,boa)
instance(c2,constrictor)
instance(s,swallow-01)
instance(a,animal)
domain(p,i)
topic(p,b2)
mod(b2,c2)
ARG0-of(b2,s)
ARG1(s,a)

(b / be-located-at-91
      :ARG1 (t2 / thing
            :ARG2-of (c / copy-01
                  :ARG1 (p / picture
                        :ARG1-of (d / draw-01))))
      :ARG2 (h / here))

instance(b,be-located-at-91)
instance(t2,thing)
instance(c,copy-01)
instance(p,picture)
instance(d,draw-01)
instance(h,here)
ARG1(b,t2)
ARG2-of(t2,c)
ARG1(c,p)
ARG1-of(p,d)
ARG2(b,h)

(s2 / say-01
      :ARG0 (b2 / book)
      :ARG1 (s / swallow-01
            :ARG0 (b / boa
                  :mod (c / constrictor))
            :ARG1 (p / prey
                  :mod (w / whole)
                  :poss b)
            :manner (c2 / chew-01 :polarity -
                  :ARG0 b
                  :ARG1 p)))

instance(s2,say-01)
instance(b2,book)
instance(s,swallow-01)
instance(b,boa)
instance(c,constrictor)
instance(p,prey)
instance(w,whole)
instance(c2,chew-01)
ARG0(s2,b2)
ARG1(s2,s)
ARG0(s,b)
mod(b,c)
ARG1(s,p)
mod(p,w)
poss(p,b)
manner(s,c2)
polarity(c2,-)
ARG0(c2,b)
ARG1(c2,p)

(a / and
      :op1 (p / possible-01 :polarity -
            :ARG1 (m / move-01
                  :ARG0 (t / they)
                  :time (a2 / after
                        :op1 (t3 / that))))
      :op2 (s / sleep-01
            :ARG0 t
            :duration (t2 / temporal-quantity :quant 6
                  :unit (m2 / month)
                  :ARG1-of (n / need-01
                        :ARG0 t
                        :purpose (d / digest-01
                              :ARG0 t)))))

instance(a,and)
instance(p,possible-01)
instance(m,move-01)
instance(t,they)
instance(a2,after)
instance(t3,that)
instance(s,sleep-01)
instance(t2,temporal-quantity)
instance(m2,month)
instance(n,need-01)
instance(d,digest-01)
op1(a,p)
polarity(p,-)
ARG1(p,m)
ARG0(m,t)
time(m,a2)
op1(a2,t3)
op2(a,s)
ARG0(s,t)
duration(s,t2)
quant(t2,6)
unit(t2,m2)
ARG1-of(t2,n)
ARG0(n,t)
purpose(n,d)
ARG0(d,t)

(p / ponder-01
      :ARG0 (i / i)
      :ARG1 (a / adventure
            :location (j / jungle))
      :ARG1-of (d / deep-02)
      :time (t / then))

instance(p,ponder-01)
instance(i,i)
instance(a,adventure)
instance(j,jungle)
instance(d,deep-02)
instance(t,then)
ARG0(p,i)
ARG1(p,a)
location(a,j)
ARG1-of(p,d)
time(p,t)

(a2 / and
      :op2 (s / succeed-01
            :ARG0 (i / i)
            :ARG1 (m / make-01
                  :ARG0 i
                  :ARG1 (p2 / picture
                        :ARG1-of (d / draw-01
                              :ARG0 i
                              :ord (o / ordinal-entity :value 1))))
            :time (a / after
                  :op1 (w / work-01
                        :ARG0 i
                        :instrument (p / pencil
                              :mod (c / color))
                        :mod (s2 / some)))))

instance(a2,and)
instance(s,succeed-01)
instance(i,i)
instance(m,make-01)
instance(p2,picture)
instance(d,draw-01)
instance(o,ordinal-entity)
instance(a,after)
instance(w,work-01)
instance(p,pencil)
instance(c,color)
instance(s2,some)
op2(a2,s)
ARG0(s,i)
ARG1(s,m)
ARG0(m,i)
ARG1(m,p2)
ARG1-of(p2,d)
ARG0(d,i)
ord(d,o)
value(o,1)
time(s,a)
op1(a,w)
ARG0(w,i)
instrument(w,p)
mod(p,c)
mod(w,s2)

(p / picture :wiki -
      :name (n2 / name :op1 "Drawing" :op2 "Number" :op3 "One")
      :poss (i / i))

instance(p,picture)
instance(n2,name)
instance(i,i)
wiki(p,-)
name(p,n2)
op1(n2,"Drawing")
op2(n2,"Number")
op3(n2,"One")
poss(p,i)

(a / and
      :op1 (l / look-02
            :ARG0 (i / it)
            :ARG1 (t / this))
      :op2 (s / show-01
            :ARG0 (i2 / i)
            :ARG1 (m / masterpiece
                  :poss i2)
            :ARG2 (g / grown-up))
      :op3 (a2 / ask-01
            :ARG0 i2
            :ARG1 (t2 / truth-value
                  :polarity-of (f / frighten-01
                        :ARG0 (p / picture
                              :ARG1-of (d / draw-01))
                        :ARG1 g))
            :ARG2 g))

instance(a,and)
instance(l,look-02)
instance(i,it)
instance(t,this)
instance(s,show-01)
instance(i2,i)
instance(m,masterpiece)
instance(g,grown-up)
instance(a2,ask-01)
instance(t2,truth-value)
instance(f,frighten-01)
instance(p,picture)
instance(d,draw-01)
op1(a,l)
ARG0(l,i)
ARG1(l,t)
op2(a,s)
ARG0(s,i2)
ARG1(s,m)
poss(m,i2)
ARG2(s,g)
op3(a,a2)
ARG0(a2,i2)
ARG1(a2,t2)
polarity-of(t2,f)
ARG0(f,p)
ARG1-of(p,d)
ARG1(f,g)
ARG2(a2,g)

(c / contrast-01
      :ARG2 (a / answer-01
            :ARG0 (t / they)
            :ARG2 (f / frighten-01
                  :ARG1-of (c2 / cause-01
                        :ARG0 (a2 / amr-unknown)))))

instance(c,contrast-01)
instance(a,answer-01)
instance(t,they)
instance(f,frighten-01)
instance(c2,cause-01)
instance(a2,amr-unknown)
ARG2(c,a)
ARG0(a,t)
ARG2(a,f)
ARG1-of(f,c2)
ARG0(c2,a2)

(f / frighten-01
  :ARG0 (h / hat)
  :ARG1 (o / one
          :mod (a / any))
  :ARG1-of (c / cause-01
             :ARG0 (a2 / amr-unknown)))

instance(f,frighten-01)
instance(h,hat)
instance(o,one)
instance(a,any)
instance(c,cause-01)
instance(a2,amr-unknown)
ARG0(f,h)
ARG1(f,o)
mod(o,a)
ARG1-of(f,c)
ARG0(c,a2)

(p / picture-01 :polarity -
      :ARG0 (p2 / picture
            :ARG1-of (d / draw-01
                  :ARG0 (i / i)))
      :ARG1 (h / hat))

instance(p,picture-01)
instance(p2,picture)
instance(d,draw-01)
instance(i,i)
instance(h,hat)
polarity(p,-)
ARG0(p,p2)
ARG1-of(p2,d)
ARG0(d,i)
ARG1(p,h)

(p / picture-01
  :ARG0 (i / it)
  :ARG1 (b2 / boa
          :mod (c / constrictor)
          :ARG0-of (d / digest-01
                     :ARG1 (e / elephant))))

instance(p,picture-01)
instance(i,it)
instance(b2,boa)
instance(c,constrictor)
instance(d,digest-01)
instance(e,elephant)
ARG0(p,i)
ARG1(p,b2)
mod(b2,c)
ARG0-of(b2,d)
ARG1(d,e)

(c / contrast-01
      :ARG2 (a2 / and
            :op1 (d3 / draw-01
                  :ARG0 (i / i)
                  :ARG1 (p2 / picture
                        :mod (a / another))
                  :ARG1-of (c3 / cause-01
                        :ARG0 (p3 / possible-01 :polarity -
                              :ARG1 (u / understand-01
                                    :ARG0 (g / grown-up)
                                    :ARG1 (i2 / it)))))
            :op2 (d / draw-01
                  :ARG0 i
                  :ARG1 (i3 / inside
                        :part-of (b2 / boa
                              :mod (c4 / constrictor)))
                  :purpose (p / possible-01
                        :ARG1 (s / see-01
                              :ARG0 g
                              :ARG1 i2
                              :ARG1-of (c2 / clear-06))))))

instance(c,contrast-01)
instance(a2,and)
instance(d3,draw-01)
instance(i,i)
instance(p2,picture)
instance(a,another)
instance(c3,cause-01)
instance(p3,possible-01)
instance(u,understand-01)
instance(g,grown-up)
instance(i2,it)
instance(d,draw-01)
instance(i3,inside)
instance(b2,boa)
instance(c4,constrictor)
instance(p,possible-01)
instance(s,see-01)
instance(c2,clear-06)
ARG2(c,a2)
op1(a2,d3)
ARG0(d3,i)
ARG1(d3,p2)
mod(p2,a)
ARG1-of(d3,c3)
ARG0(c3,p3)
polarity(p3,-)
ARG1(p3,u)
ARG0(u,g)
ARG1(u,i2)
op2(a2,d)
ARG0(d,i)
ARG1(d,i3)
part-of(i3,b2)
mod(b2,c4)
purpose(d,p)
ARG1(p,s)
ARG0(s,g)
ARG1(s,i2)
ARG1-of(s,c2)

(n / need-01
      :ARG0 (t / they)
      :ARG1 (e / explain-01)
      :time (a / always))

instance(n,need-01)
instance(t,they)
instance(e,explain-01)
instance(a,always)
ARG0(n,t)
ARG1(n,e)
time(n,a)

(a6 / and
      :op1 (l / look-02
            :ARG0 (p / picture :wiki - :name (n / name :op1 "Drawing" :op2 "Number" :op3 "Two")
                  :poss i)
            :ARG1 (t2 / this))
      :op2 (r / respond-01
            :ARG0 (g / grown-up)
            :ARG1 (i / i)
            :ARG2 (a / advise-01
                  :ARG0 g
                  :ARG1 i
                  :ARG2 (a3 / and
                        :op1 (l2 / lay-01
                              :ARG0 i
                              :ARG1 (p2 / picture
                                    :ARG1-of (d2 / draw-01
                                          :ARG0 i)
                                    :topic (b2 / boa
                                          :mod (c2 / constrictor)
                                          :mod (o / or
                                                :op1 (i2 / inside)
                                                :op2 (o2 / outside))))
                              :ARG2 (a2 / aside))
                        :op2 (d3 / devote-01
                              :ARG0 i
                              :ARG1 i
                              :ARG2 (a4 / and
                                    :op1 (g2 / geography)
                                    :op2 (h / history)
                                    :op3 (a5 / arithmetic)
                                    :op4 (g3 / grammar))
                              :ARG1-of (i4 / instead-of-91
                                    :ARG2 d2))))
            :time (t4 / time
                  :mod (t5 / this))))

instance(a6,and)
instance(l,look-02)
instance(p,picture)
instance(n,name)
instance(t2,this)
instance(r,respond-01)
instance(g,grown-up)
instance(i,i)
instance(a,advise-01)
instance(a3,and)
instance(l2,lay-01)
instance(p2,picture)
instance(d2,draw-01)
instance(b2,boa)
instance(c2,constrictor)
instance(o,or)
instance(i2,inside)
instance(o2,outside)
instance(a2,aside)
instance(d3,devote-01)
instance(a4,and)
instance(g2,geography)
instance(h,history)
instance(a5,arithmetic)
instance(g3,grammar)
instance(i4,instead-of-91)
instance(t4,time)
instance(t5,this)
op1(a6,l)
ARG0(l,p)
wiki(p,-)
name(p,n)
op1(n,"Drawing")
op2(n,"Number")
op3(n,"Two")
poss(p,i)
ARG1(l,t2)
op2(a6,r)
ARG0(r,g)
ARG1(r,i)
ARG2(r,a)
ARG0(a,g)
ARG1(a,i)
ARG2(a,a3)
op1(a3,l2)
ARG0(l2,i)
ARG1(l2,p2)
ARG1-of(p2,d2)
ARG0(d2,i)
topic(p2,b2)
mod(b2,c2)
mod(b2,o)
op1(o,i2)
op2(o,o2)
ARG2(l2,a2)
op2(a3,d3)
ARG0(d3,i)
ARG1(d3,i)
ARG2(d3,a4)
op1(a4,g2)
op2(a4,h)
op3(a4,a5)
op4(a4,g3)
ARG1-of(d3,i4)
ARG2(i4,d2)
time(r,t4)
mod(t4,t5)

(c2 / cause-01
      :ARG0 (t2 / that)
      :ARG1 (g / give-up-07
            :ARG0 (i / i)
            :ARG1 (c / career
                  :mod (m / magnificent)
                  :topic (p / person
                        :ARG0-of (p2 / paint-02)))
            :time (a / age-01
                  :ARG1 i
                  :ARG2 (t / temporal-quantity :quant 6
                        :unit (y / year)))))

instance(c2,cause-01)
instance(t2,that)
instance(g,give-up-07)
instance(i,i)
instance(c,career)
instance(m,magnificent)
instance(p,person)
instance(p2,paint-02)
instance(a,age-01)
instance(t,temporal-quantity)
instance(y,year)
ARG0(c2,t2)
ARG1(c2,g)
ARG0(g,i)
ARG1(g,c)
mod(c,m)
topic(c,p)
ARG0-of(p,p2)
time(g,a)
ARG1(a,i)
ARG2(a,t)
quant(t,6)
unit(t,y)

(d / dishearten-01
      :ARG0 (f / fail-01
            :ARG1 (a / and
                  :op1 (p / picture :wiki -
                        :name (n / name :op1 "Drawing" :op2 "Number" :op3 "One"))
                  :op2 (p2 / picture :wiki -
                        :name (n2 / name :op1 "Drawing" :op2 "Number" :op3 "Two"))
                  :poss i))
      :ARG1 (i / i))

instance(d,dishearten-01)
instance(f,fail-01)
instance(a,and)
instance(p,picture)
instance(n,name)
instance(p2,picture)
instance(n2,name)
instance(i,i)
ARG0(d,f)
ARG1(f,a)
op1(a,p)
wiki(p,-)
name(p,n)
op1(n,"Drawing")
op2(n,"Number")
op3(n,"One")
op2(a,p2)
wiki(p2,-)
name(p2,n2)
op1(n2,"Drawing")
op2(n2,"Number")
op3(n2,"Two")
poss(a,i)
ARG1(d,i)

(a / and
      :op1 (u / understand-01 :polarity -
            :ARG0 (g / grown-up)
            :ARG1 (a3 / anything)
            :time (e2 / ever)
            :mod (b / by-oneself))
      :op2 (t / tire-03
            :ARG0 (e / explain-01
                  :ARG0 (c / child)
                  :ARG1 (t2 / thing)
                  :ARG2 g
                  :time (a4 / always)
                  :mod (f / forever))
            :ARG1 c))

instance(a,and)
instance(u,understand-01)
instance(g,grown-up)
instance(a3,anything)
instance(e2,ever)
instance(b,by-oneself)
instance(t,tire-03)
instance(e,explain-01)
instance(c,child)
instance(t2,thing)
instance(a4,always)
instance(f,forever)
op1(a,u)
polarity(u,-)
ARG0(u,g)
ARG1(u,a3)
time(u,e2)
mod(u,b)
op2(a,t)
ARG0(t,e)
ARG0(e,c)
ARG1(e,t2)
ARG2(e,g)
time(e,a4)
mod(e,f)
ARG1(t,c)

(c2 / cause-01
  :ARG1 (a / and
          :op1 (c / choose-01
                 :ARG0 (i / i)
                 :ARG1 (p / profession
                         :mod (a2 / another)))
          :op2 (l / learn-01
                 :ARG0 i
                 :ARG1 (p2 / pilot-01
                         :ARG0 i
                         :ARG1 (a3 / airplane)))))

instance(c2,cause-01)
instance(a,and)
instance(c,choose-01)
instance(i,i)
instance(p,profession)
instance(a2,another)
instance(l,learn-01)
instance(p2,pilot-01)
instance(a3,airplane)
ARG1(c2,a)
op1(a,c)
ARG0(c,i)
ARG1(c,p)
mod(p,a2)
op2(a,l)
ARG0(l,i)
ARG1(l,p2)
ARG0(p2,i)
ARG1(p2,a3)

(a / and
      :op1 (f / fly-01
            :ARG0 i
            :location (o / over
                  :op1 (p2 / part
                        :part-of (w / world))))
      :op2 (u / useful-05
            :ARG0 (i / i)
            :ARG1 (g / geography)
            :degree (v / very)))

instance(a,and)
instance(f,fly-01)
instance(o,over)
instance(p2,part)
instance(w,world)
instance(u,useful-05)
instance(i,i)
instance(g,geography)
instance(v,very)
op1(a,f)
ARG0(f,i)
location(f,o)
op1(o,p2)
part-of(p2,w)
op2(a,u)
ARG0(u,i)
ARG1(u,g)
degree(u,v)

(p / possible-01
      :ARG1 (d / distinguish-01
            :ARG0 (i / i)
            :ARG1 (c / country :wiki "China"
                  :name (n / name :op1 "China"))
            :ARG2 (s / state :wiki "Arizona"
                  :name (n2 / name :op1 "Arizona"))
            :manner (g / glance-01
                  :ARG0 i)))

instance(p,possible-01)
instance(d,distinguish-01)
instance(i,i)
instance(c,country)
instance(n,name)
instance(s,state)
instance(n2,name)
instance(g,glance-01)
ARG1(p,d)
ARG0(d,i)
ARG1(d,c)
wiki(c,"China")
name(c,n)
op1(n,"China")
ARG2(d,s)
wiki(s,"Arizona")
name(s,n2)
op1(n2,"Arizona")
manner(d,g)
ARG0(g,i)

(v / value-02
      :ARG1 (k / knowledge
            :mod (s / such))
      :condition (g / get-03
            :ARG1 (o / one)
            :ARG2 (l / lost
                  :time (d / date-entity :dayperiod (n / night)))))

instance(v,value-02)
instance(k,knowledge)
instance(s,such)
instance(g,get-03)
instance(o,one)
instance(l,lost)
instance(d,date-entity)
instance(n,night)
ARG1(v,k)
mod(k,s)
condition(v,g)
ARG1(g,o)
ARG2(g,l)
time(l,d)
dayperiod(d,n)

(e / encounter-01
      :ARG0 (i / i)
      :ARG1 (p / person
            :quant (m2 / many
                  :mod (g2 / great))
            :ARG1-of (c / concern-01
                  :ARG0 (m3 / matter
                        :ARG1-of (c2 / consequential-01))))
      :quant (m / many
            :mod (g / great))
      :time (c3 / course
            :poss (l / life
                  :mod (t / this))))

instance(e,encounter-01)
instance(i,i)
instance(p,person)
instance(m2,many)
instance(g2,great)
instance(c,concern-01)
instance(m3,matter)
instance(c2,consequential-01)
instance(m,many)
instance(g,great)
instance(c3,course)
instance(l,life)
instance(t,this)
ARG0(e,i)
ARG1(e,p)
quant(p,m2)
mod(m2,g2)
ARG1-of(p,c)
ARG0(c,m3)
ARG1-of(m3,c2)
quant(e,m)
mod(m,g)
time(e,c3)
poss(c3,l)
mod(l,t)

(l / live-01
      :ARG0 (i / i)
      :mod (d / deal
            :mod (g2 / great))
      :location (a / among
            :op1 (g / grown-up)))

instance(l,live-01)
instance(i,i)
instance(d,deal)
instance(g2,great)
instance(a,among)
instance(g,grown-up)
ARG0(l,i)
mod(l,d)
mod(d,g2)
location(l,a)
op1(a,g)

(s / see-01
      :ARG0 (i / i)
      :ARG1 (t / they)
      :ARG1-of (c / close-10
            :ARG2 (a / at-hand-14
                  :ARG1 t))
      :ARG2-of (i2 / intimate-02
            :ARG1 i))

instance(s,see-01)
instance(i,i)
instance(t,they)
instance(c,close-10)
instance(a,at-hand-14)
instance(i2,intimate-02)
ARG0(s,i)
ARG1(s,t)
ARG1-of(s,c)
ARG2(c,a)
ARG1(a,t)
ARG2-of(s,i2)
ARG1(i2,i)

(a / and
      :op2 (i / improve-01 :polarity -
            :ARG0 (t / that)
            :ARG1 (t3 / thing
                  :ARG1-of (o2 / opine-01
                        :ARG0 (i2 / i)
                        :topic (t2 / they)))
            :degree (m2 / much)))

instance(a,and)
instance(i,improve-01)
instance(t,that)
instance(t3,thing)
instance(o2,opine-01)
instance(i2,i)
instance(t2,they)
instance(m2,much)
op2(a,i)
polarity(i,-)
ARG0(i,t)
ARG1(i,t3)
ARG1-of(t3,o2)
ARG0(o2,i2)
topic(o2,t2)
degree(i,m2)

(t / try-01
      :ARG0 (i / i)
      :ARG1 (e / experiment-01
            :ARG1 (s / show-01
                  :ARG1 (p2 / picture :wiki - :name (n / name :op1 "Drawing" :op2 "Number" :op3 "One"))
                  :ARG2 p
                  :ARG1-of (k / keep-01
                        :ARG0 i
                        :time (a / always))))
      :time (m / meet-02
            :ARG0 i
            :ARG1 (p / person
                  :ARG1-of (i2 / include-91
                        :ARG2 (t3 / they))
                  :ARG0-of (s3 / see-01
                        :ARG1-of (c / clear-08)
                        :ARG1-of (s4 / seem-01
                              :ARG2 i)
                        :degree (a3 / at-all)))
            :mod (a2 / any)))

instance(t,try-01)
instance(i,i)
instance(e,experiment-01)
instance(s,show-01)
instance(p2,picture)
instance(n,name)
instance(k,keep-01)
instance(a,always)
instance(m,meet-02)
instance(p,person)
instance(i2,include-91)
instance(t3,they)
instance(s3,see-01)
instance(c,clear-08)
instance(s4,seem-01)
instance(a3,at-all)
instance(a2,any)
ARG0(t,i)
ARG1(t,e)
ARG1(e,s)
ARG1(s,p2)
wiki(p2,-)
name(p2,n)
op1(n,"Drawing")
op2(n,"Number")
op3(n,"One")
ARG2(s,p)
ARG1-of(s,k)
ARG0(k,i)
time(k,a)
time(t,m)
ARG0(m,i)
ARG1(m,p)
ARG1-of(p,i2)
ARG2(i2,t3)
ARG0-of(p,s3)
ARG1-of(s3,c)
ARG1-of(s3,s4)
ARG2(s4,i)
degree(s3,a3)
mod(m,a2)

(t / try-01
      :ARG0 (i / i)
      :ARG1 (f / find-out-03
            :ARG0 i
            :ARG1 (t4 / truth-value
                  :polarity-of (u2 / understand-01
                        :ARG0 (p / person
                              :mod (t2 / this))
                        :ARG1-of (t3 / true-01)))))

instance(t,try-01)
instance(i,i)
instance(f,find-out-03)
instance(t4,truth-value)
instance(u2,understand-01)
instance(p,person)
instance(t2,this)
instance(t3,true-01)
ARG0(t,i)
ARG1(t,f)
ARG0(f,i)
ARG1(f,t4)
polarity-of(t4,u2)
ARG0(u2,p)
mod(p,t2)
ARG1-of(u2,t3)

(c / contrast-01
  :ARG2 (s / say-01
          :ARG0 (o / or
                  :op1 (h / he)
                  :op2 (s2 / she))
          :ARG1 (h2 / hat
                  :domain (t / that))
          :time (a / always)))

instance(c,contrast-01)
instance(s,say-01)
instance(o,or)
instance(h,he)
instance(s2,she)
instance(h2,hat)
instance(t,that)
instance(a,always)
ARG2(c,s)
ARG0(s,o)
op1(o,h)
op2(o,s2)
ARG1(s,h2)
domain(h2,t)
time(s,a)

(t / talk-01
  :ARG0 (i / i)
  :ARG1 (o / or
          :op1 (b / boa
                 :mod (c2 / constrictor))
          :op2 (f / forest
                 :mod (p2 / primeval))
          :op3 (s / star))
  :ARG2 (p / person
          :mod (t2 / that))
  :time (e / ever)
  :polarity -)

instance(t,talk-01)
instance(i,i)
instance(o,or)
instance(b,boa)
instance(c2,constrictor)
instance(f,forest)
instance(p2,primeval)
instance(s,star)
instance(p,person)
instance(t2,that)
instance(e,ever)
ARG0(t,i)
ARG1(t,o)
op1(o,b)
mod(b,c2)
op2(o,f)
mod(f,p2)
op3(o,s)
ARG2(t,p)
mod(p,t2)
time(t,e)
polarity(t,-)

(b / bring-01
      :ARG0 (i / i)
      :ARG1 i
      :ARG2 (l / level
            :poss (h / he))
      :ARG3 (d / down))

instance(b,bring-01)
instance(i,i)
instance(l,level)
instance(h,he)
instance(d,down)
ARG0(b,i)
ARG1(b,i)
ARG2(b,l)
poss(l,h)
ARG3(b,d)

(t / talk-01
  :ARG0 (i / i)
  :ARG1 (a / and
          :op1 (b / bridge)
          :op2 (g / golf)
          :op3 (p / politics)
          :op4 (n2 / necktie))
  :ARG2 (h / he))

instance(t,talk-01)
instance(i,i)
instance(a,and)
instance(b,bridge)
instance(g,golf)
instance(p,politics)
instance(n2,necktie)
instance(h,he)
ARG0(t,i)
ARG1(t,a)
op1(a,b)
op2(a,g)
op3(a,p)
op4(a,n2)
ARG2(t,h)

(a / and
      :op2 (p / please-01
            :ARG0 (m / meet-02
                  :ARG0 g
                  :ARG1 (m2 / man
                        :ARG2-of (s / sense-02
                              :degree (s2 / such))))
            :ARG1 (g / grown-up)
            :degree (g2 / great)))

instance(a,and)
instance(p,please-01)
instance(m,meet-02)
instance(m2,man)
instance(s,sense-02)
instance(s2,such)
instance(g,grown-up)
instance(g2,great)
op2(a,p)
ARG0(p,m)
ARG0(m,g)
ARG1(m,m2)
ARG2-of(m2,s)
degree(s,s2)
ARG1(p,g)
degree(p,g2)

(c / chapter
  :mod 2)

instance(c,chapter)
mod(c,2)

(c / cause-01
      :ARG1 (l / live-01
            :ARG0 (i / i
                  :ARG0-of (t3 / talk-01 :polarity -
                        :ARG2 (a5 / anyone)
                        :ARG1-of (r / real-04)))
            :ARG1 (l2 / life
                  :poss i)
            :manner (a / alone)
            :duration (u / until
                  :op1 (h / have-06
                        :ARG0 i
                        :ARG1 (a3 / accident
                              :mod (p / plane))
                        :location (d / desert :wiki "Sahara" :name (n / name :op1 "Desert" :op2 "of" :op3 "Sahara"))
                        :time (b / before
                              :op1 (n2 / now)
                              :quant (t2 / temporal-quantity :quant 6
                                    :unit (y / year)))))))

instance(c,cause-01)
instance(l,live-01)
instance(i,i)
instance(t3,talk-01)
instance(a5,anyone)
instance(r,real-04)
instance(l2,life)
instance(a,alone)
instance(u,until)
instance(h,have-06)
instance(a3,accident)
instance(p,plane)
instance(d,desert)
instance(n,name)
instance(b,before)
instance(n2,now)
instance(t2,temporal-quantity)
instance(y,year)
ARG1(c,l)
ARG0(l,i)
ARG0-of(i,t3)
polarity(t3,-)
ARG2(t3,a5)
ARG1-of(t3,r)
ARG1(l,l2)
poss(l2,i)
manner(l,a)
duration(l,u)
op1(u,h)
ARG0(h,i)
ARG1(h,a3)
mod(a3,p)
location(h,d)
wiki(d,"Sahara")
name(d,n)
op1(n,"Desert")
op2(n,"of")
op3(n,"Sahara")
time(h,b)
op1(b,n2)
quant(b,t2)
quant(t2,6)
unit(t2,y)

(b / break-01
      :ARG1 (s / something
            :location (e / engine
                  :poss (i / i))))

instance(b,break-01)
instance(s,something)
instance(e,engine)
instance(i,i)
ARG1(b,s)
location(s,e)
poss(e,i)

(a / and
  :op2 (c / cause-01
         :ARG0 (h / have-03
                 :ARG0 i
                 :ARG1 (o / or
                         :op1 (m / mechanic)
                         :op2 (p / passenger))
                 :accompanier (i / i)
                 :polarity -)
         :ARG1 (a2 / attempt-01
                 :ARG0 i
                 :ARG1 (r / repair-01
                         :mod (d / difficult))
                 :mod (a3 / alone
                        :degree (a4 / all)))))

instance(a,and)
instance(c,cause-01)
instance(h,have-03)
instance(o,or)
instance(m,mechanic)
instance(p,passenger)
instance(i,i)
instance(a2,attempt-01)
instance(r,repair-01)
instance(d,difficult)
instance(a3,alone)
instance(a4,all)
op2(a,c)
ARG0(c,h)
ARG0(h,i)
ARG1(h,o)
op1(o,m)
op2(o,p)
accompanier(h,i)
polarity(h,-)
ARG1(c,a2)
ARG0(a2,i)
ARG1(a2,r)
mod(r,d)
mod(a2,a3)
degree(a3,a4)

(q / question-01
      :ARG0 i
      :ARG1 (o / or
            :op1 (l / live-01)
            :op2 (d / die-01))
      :ARG1-of (c / cause-01
            :ARG0 (h / have-03
                  :ARG0 (i / i)
                  :ARG1 (w / water
                        :purpose (d2 / drink-01)
                        :ARG1-of (h2 / have-quant-91
                              :ARG3 (e / enough
                                    :mod (s / scarce))
                              :ARG6 (l2 / last-03
                                    :ARG2 (t / temporal-quantity :quant 1
                                          :unit (w2 / week))
                                    :ARG3 i))))))

instance(q,question-01)
instance(o,or)
instance(l,live-01)
instance(d,die-01)
instance(c,cause-01)
instance(h,have-03)
instance(i,i)
instance(w,water)
instance(d2,drink-01)
instance(h2,have-quant-91)
instance(e,enough)
instance(s,scarce)
instance(l2,last-03)
instance(t,temporal-quantity)
instance(w2,week)
ARG0(q,i)
ARG1(q,o)
op1(o,l)
op2(o,d)
ARG1-of(q,c)
ARG0(c,h)
ARG0(h,i)
ARG1(h,w)
purpose(w,d2)
ARG1-of(w,h2)
ARG3(h2,e)
mod(e,s)
ARG6(h2,l2)
ARG2(l2,t)
quant(t,1)
unit(t,w2)
ARG3(l2,i)

(s / sleep-01
      :ARG0 (i / i)
      :location (s2 / sand)
      :time (d2 / date-entity
            :dayperiod (n / night)
            :ord (o / ordinal-entity :value 1))
      :location (r / relative-position
            :op1 (p / place
                  :ARG1-of (i2 / inhabit-01
                        :ARG0 (h / human))
                  :mod (a2 / any))
            :quant (d / distance-quantity :quant 1000
                  :unit (m / mile))
            :direction (a3 / away)))

instance(s,sleep-01)
instance(i,i)
instance(s2,sand)
instance(d2,date-entity)
instance(n,night)
instance(o,ordinal-entity)
instance(r,relative-position)
instance(p,place)
instance(i2,inhabit-01)
instance(h,human)
instance(a2,any)
instance(d,distance-quantity)
instance(m,mile)
instance(a3,away)
ARG0(s,i)
location(s,s2)
time(s,d2)
dayperiod(d2,n)
ord(d2,o)
value(o,1)
location(s,r)
op1(r,p)
ARG1-of(p,i2)
ARG0(i2,h)
mod(p,a2)
quant(r,d)
quant(d,1000)
unit(d,m)
direction(r,a3)

(h / have-degree-91
      :ARG1 (i / i)
      :ARG2 (i2 / isolate-01
            :ARG1 i)
      :ARG3 (m / more)
      :ARG4 (p / person
            :ARG0-of (s / sail-01)
            :ARG1-of (s2 / shipwreck-01)
            :location (r / raft
                  :location (o / ocean
                        :part (m2 / middle)))))

instance(h,have-degree-91)
instance(i,i)
instance(i2,isolate-01)
instance(m,more)
instance(p,person)
instance(s,sail-01)
instance(s2,shipwreck-01)
instance(r,raft)
instance(o,ocean)
instance(m2,middle)
ARG1(h,i)
ARG2(h,i2)
ARG1(i2,i)
ARG3(h,m)
ARG4(h,p)
ARG0-of(p,s)
ARG1-of(p,s2)
location(p,r)
location(r,o)
part(o,m2)

(c / cause-01
      :ARG1 (p / possible-01
            :ARG1 (i2 / imagine-01
                  :ARG0 (y / you)
                  :ARG1 (a / amaze-01
                        :ARG1 (i / i)
                        :time (s / sunrise
                              :time-of (w / wake-01
                                    :ARG0 (v / voice
                                          :mod (o / odd)
                                          :mod (l / little))
                                    :ARG1 i))))))

instance(c,cause-01)
instance(p,possible-01)
instance(i2,imagine-01)
instance(y,you)
instance(a,amaze-01)
instance(i,i)
instance(s,sunrise)
instance(w,wake-01)
instance(v,voice)
instance(o,odd)
instance(l,little)
ARG1(c,p)
ARG1(p,i2)
ARG0(i2,y)
ARG1(i2,a)
ARG1(a,i)
time(a,s)
time-of(s,w)
ARG0(w,v)
mod(v,o)
mod(v,l)
ARG1(w,i)

(s / say-01
      :ARG0 (i / it)
      :ARG1 (d / draw-01 :mode imperative :polite +
            :ARG0 (y2 / you)
            :ARG1 (s2 / sheep)
            :ARG2 (i2 / i)))

instance(s,say-01)
instance(i,it)
instance(d,draw-01)
instance(y2,you)
instance(s2,sheep)
instance(i2,i)
ARG0(s,i)
ARG1(s,d)
mode(d,imperative)
polite(d,+)
ARG0(d,y2)
ARG1(d,s2)
ARG2(d,i2)

(s / string-entity :value "what")

instance(s,string-entity)
value(s,"what")

(d / draw-01
  :ARG0 (y / you)
  :ARG1 (s / sheep)
  :ARG2 (i / i)
  :mode imperative)

instance(d,draw-01)
instance(y,you)
instance(s,sheep)
instance(i,i)
ARG0(d,y)
ARG1(d,s)
ARG2(d,i)
mode(d,imperative)

(j / jump-03
      :ARG0 (i / i
            :mod (t / thunderstruck
                  :ARG1-of (c / complete-02)))
      :destination (f / foot
            :part-of i))

instance(j,jump-03)
instance(i,i)
instance(t,thunderstruck)
instance(c,complete-02)
instance(f,foot)
ARG0(j,i)
mod(i,t)
ARG1-of(t,c)
destination(j,f)
part-of(f,i)

(b / blink-01
      :ARG0 (i / i)
      :ARG1 (e / eye
            :part-of i)
      :ARG1-of (h / hard-04))

instance(b,blink-01)
instance(i,i)
instance(e,eye)
instance(h,hard-04)
ARG0(b,i)
ARG1(b,e)
part-of(e,i)
ARG1-of(b,h)

(l / look-01
      :ARG0 (i / i)
      :direction (a / around
            :op1 i
            :mod (a2 / all))
      :manner (c / careful))

instance(l,look-01)
instance(i,i)
instance(a,around)
instance(a2,all)
instance(c,careful)
ARG0(l,i)
direction(l,a)
op1(a,i)
mod(a,a2)
manner(l,c)

(a / and
      :op2 (s / see-01
            :ARG0 (i / i)
            :ARG1 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (e / extraordinary)
                        :ARG3 (m / most))
                  :mod (s2 / small)
                  :ARG1-of (s3 / stand-01
                        :ARG2 (t / there))
                  :ARG0-of (e2 / examine-01
                        :ARG1 i
                        :ARG2-of (s4 / serious-01
                              :degree (g / great))))))

instance(a,and)
instance(s,see-01)
instance(i,i)
instance(p,person)
instance(h,have-degree-91)
instance(e,extraordinary)
instance(m,most)
instance(s2,small)
instance(s3,stand-01)
instance(t,there)
instance(e2,examine-01)
instance(s4,serious-01)
instance(g,great)
op2(a,s)
ARG0(s,i)
ARG1(s,p)
ARG1-of(p,h)
ARG2(h,e)
ARG3(h,m)
mod(p,s2)
ARG1-of(p,s3)
ARG2(s3,t)
ARG0-of(p,e2)
ARG1(e2,i)
ARG2-of(e2,s4)
degree(s4,g)

(p / possible-01
      :ARG1 (s / see-01
            :ARG0 (y / you)
            :ARG1 (p2 / portrait
                  :topic (h / he)
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 p2)
                        :ARG3 (m / most)
                        :ARG5 (p4 / portrait
                              :ARG1-of (m2 / make-01
                                    :ARG0 (i / i)
                                    :ARG1-of (p3 / possible-01)
                                    :time (a / after)))))
            :location (h2 / here)))

instance(p,possible-01)
instance(s,see-01)
instance(y,you)
instance(p2,portrait)
instance(h,he)
instance(h3,have-degree-91)
instance(g,good-02)
instance(m,most)
instance(p4,portrait)
instance(m2,make-01)
instance(i,i)
instance(p3,possible-01)
instance(a,after)
instance(h2,here)
ARG1(p,s)
ARG0(s,y)
ARG1(s,p2)
topic(p2,h)
ARG1-of(p2,h3)
ARG2(h3,g)
ARG1(g,p2)
ARG3(h3,m)
ARG5(h3,p4)
ARG1-of(p4,m2)
ARG0(m2,i)
ARG1-of(m2,p3)
time(m2,a)
location(s,h2)

(c3 / contrast-01
      :ARG2 (h / have-degree-91
            :ARG1 (p / picture
                  :ARG1-of (d / draw-01
                        :ARG0 (i / i)))
            :ARG2 (c / charm-01
                  :ARG0 p)
            :ARG3 (l / less
                  :quant (m / much
                        :degree (v / very)))
            :ARG4 (m2 / model
                  :poss p)
            :mod (c2 / certain)))

instance(c3,contrast-01)
instance(h,have-degree-91)
instance(p,picture)
instance(d,draw-01)
instance(i,i)
instance(c,charm-01)
instance(l,less)
instance(m,much)
instance(v,very)
instance(m2,model)
instance(c2,certain)
ARG2(c3,h)
ARG1(h,p)
ARG1-of(p,d)
ARG0(d,i)
ARG2(h,c)
ARG0(c,p)
ARG3(h,l)
quant(l,m)
degree(m,v)
ARG4(h,m2)
poss(m2,p)
mod(h,c2)

(c / contrast-01
  :ARG2 (f / fault-01
          :ARG1 (i / i)
          :ARG2 (t / that)
          :polarity -))

instance(c,contrast-01)
instance(f,fault-01)
instance(i,i)
instance(t,that)
ARG2(c,f)
ARG1(f,i)
ARG2(f,t)
polarity(f,-)

(d / discourage-01
      :ARG0 (g / grown-up)
      :ARG1 (i / i)
      :ARG2 (c / career
            :topic (p / person
                  :ARG0-of (p2 / paint-02))
            :poss i)
      :ARG0-of (c2 / cause-01
            :ARG1 (l / learn-01 :polarity -
                  :ARG0 i
                  :ARG1 (d2 / draw-01
                        :ARG0 i
                        :ARG1 (a2 / anything))
                  :time (e / ever)
                  :ARG2-of (e2 / except-01
                        :ARG1 (a3 / and
                              :op1 (b / boa
                                    :direction (f / from
                                          :op1 (o / outside)))
                              :op2 (b2 / boa
                                    :direction (f2 / from
                                          :op1 (i2 / inside)))))))
      :time (a / age-01
            :ARG1 i
            :ARG2 (t2 / temporal-quantity :quant 6
                  :unit (y / year))))

instance(d,discourage-01)
instance(g,grown-up)
instance(i,i)
instance(c,career)
instance(p,person)
instance(p2,paint-02)
instance(c2,cause-01)
instance(l,learn-01)
instance(d2,draw-01)
instance(a2,anything)
instance(e,ever)
instance(e2,except-01)
instance(a3,and)
instance(b,boa)
instance(f,from)
instance(o,outside)
instance(b2,boa)
instance(f2,from)
instance(i2,inside)
instance(a,age-01)
instance(t2,temporal-quantity)
instance(y,year)
ARG0(d,g)
ARG1(d,i)
ARG2(d,c)
topic(c,p)
ARG0-of(p,p2)
poss(c,i)
ARG0-of(d,c2)
ARG1(c2,l)
polarity(l,-)
ARG0(l,i)
ARG1(l,d2)
ARG0(d2,i)
ARG1(d2,a2)
time(l,e)
ARG2-of(l,e2)
ARG1(e2,a3)
op1(a3,b)
direction(b,f)
op1(f,o)
op2(a3,b2)
direction(b2,f2)
op1(f2,i2)
time(d,a)
ARG1(a,i)
ARG2(a,t2)
quant(t2,6)
unit(t2,y)

(s / stare-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG1-of (a / appear-01
                  :manner (s2 / sudden))
            :mod (t2 / this))
      :time (n / now)
      :manner (s3 / start-03
            :ARG0 (e / eye
                  :part-of i)
            :ARG1-of (c / cause-01
                  :ARG0 (a2 / astonish-01
                        :ARG1 i))
            :ARG1-of (f / fair-04)
            :manner (o / out-06
                  :ARG1 e
                  :ARG2 (h / head
                        :part-of i))))

instance(s,stare-01)
instance(i,i)
instance(t,thing)
instance(a,appear-01)
instance(s2,sudden)
instance(t2,this)
instance(n,now)
instance(s3,start-03)
instance(e,eye)
instance(c,cause-01)
instance(a2,astonish-01)
instance(f,fair-04)
instance(o,out-06)
instance(h,head)
ARG0(s,i)
ARG1(s,t)
ARG1-of(t,a)
manner(a,s2)
mod(t,t2)
time(s,n)
manner(s,s3)
ARG0(s3,e)
part-of(e,i)
ARG1-of(s3,c)
ARG0(c,a2)
ARG1(a2,i)
ARG1-of(s3,f)
manner(s3,o)
ARG1(o,e)
ARG2(o,h)
part-of(h,i)

(r / remember-01
  :ARG0 (y / you)
  :ARG1 (c / crash-01
          :ARG1 (i / i)
          :location (d / desert)
          :location (r3 / relative-position
                      :op1 (r2 / region
                             :ARG1-of (i2 / inhabit-01)
                             :mod (a2 / any))
                      :quant (d2 / distance-quantity
                               :unit (m / mile)
                               :quant 1000)
                      :direction (a / away)))
  :mode imperative)

instance(r,remember-01)
instance(y,you)
instance(c,crash-01)
instance(i,i)
instance(d,desert)
instance(r3,relative-position)
instance(r2,region)
instance(i2,inhabit-01)
instance(a2,any)
instance(d2,distance-quantity)
instance(m,mile)
instance(a,away)
ARG0(r,y)
ARG1(r,c)
ARG1(c,i)
location(c,d)
location(c,r3)
op1(r3,r2)
ARG1-of(r2,i2)
mod(r2,a2)
quant(r3,d2)
unit(d2,m)
quant(d2,1000)
direction(r3,a)
mode(r,imperative)

(c3 / contrast-01
  :ARG2 (s / seem-01
          :ARG1 (a / and
                  :op1 (s2 / stray-01
                         :ARG0 (m / man
                                 :mod (l / little)
                                 :poss (i / i))
                         :ARG1 (a3 / among
                                 :op1 (s3 / sand))
                         :manner (c / certain
                                   :polarity -)
                         :polarity -)
                  :op2 (f / faint-01
                         :ARG0 m
                         :ARG1-of (c2 / cause-01
                                    :ARG0 (o / or
                                            :op1 (f2 / fatigue-01)
                                            :op2 (h / hunger-01)
                                            :op3 (t / thirst-01)
                                            :op4 (f3 / fear-01)))
                         :polarity -))))

instance(c3,contrast-01)
instance(s,seem-01)
instance(a,and)
instance(s2,stray-01)
instance(m,man)
instance(l,little)
instance(i,i)
instance(a3,among)
instance(s3,sand)
instance(c,certain)
instance(f,faint-01)
instance(c2,cause-01)
instance(o,or)
instance(f2,fatigue-01)
instance(h,hunger-01)
instance(t,thirst-01)
instance(f3,fear-01)
ARG2(c3,s)
ARG1(s,a)
op1(a,s2)
ARG0(s2,m)
mod(m,l)
poss(m,i)
ARG1(s2,a3)
op1(a3,s3)
manner(s2,c)
polarity(c,-)
polarity(s2,-)
op2(a,f)
ARG0(f,m)
ARG1-of(f,c2)
ARG0(c2,o)
op1(o,f2)
op2(o,h)
op3(o,t)
op4(o,f3)
polarity(f,-)

(s / suggest-01
  :ARG0 (n / nothing
          :topic (h / he))
  :ARG1 (c / child
          :ARG1-of (l / lose-02
                     :location (d / desert
                                 :part (m / middle))
                     :location (r / relative-position
                                 :op1 (t / thing
                                        :ARG1-of (i / inhabit-01
                                                   :ARG0 (h2 / human))
                                        :mod (a3 / any))
                                 :quant (d2 / distance-quantity
                                          :unit (m2 / mile)
                                          :quant 1000)
                                 :direction (a2 / away)))))

instance(s,suggest-01)
instance(n,nothing)
instance(h,he)
instance(c,child)
instance(l,lose-02)
instance(d,desert)
instance(m,middle)
instance(r,relative-position)
instance(t,thing)
instance(i,inhabit-01)
instance(h2,human)
instance(a3,any)
instance(d2,distance-quantity)
instance(m2,mile)
instance(a2,away)
ARG0(s,n)
topic(n,h)
ARG1(s,c)
ARG1-of(c,l)
location(l,d)
part(d,m)
location(l,r)
op1(r,t)
ARG1-of(t,i)
ARG0(i,h2)
mod(t,a3)
quant(r,d2)
unit(d2,m2)
quant(d2,1000)
direction(r,a2)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (c / contrast-01
            :ARG2 (b2 / be-located-at-91
                  :ARG1 (y2 / you)
                  :ARG2 (h2 / here)
                  :ARG1-of (c2 / cause-01
                        :ARG0 (a / amr-unknown))))
      :ARG2 (h / he)
      :time (p / possible-01
            :ARG1 (s2 / speak-01
                  :ARG0 i
                  :time (a2 / at-last))))

instance(s,say-01)
instance(i,i)
instance(c,contrast-01)
instance(b2,be-located-at-91)
instance(y2,you)
instance(h2,here)
instance(c2,cause-01)
instance(a,amr-unknown)
instance(h,he)
instance(p,possible-01)
instance(s2,speak-01)
instance(a2,at-last)
ARG0(s,i)
ARG1(s,c)
ARG2(c,b2)
ARG1(b2,y2)
ARG2(b2,h2)
ARG1-of(b2,c2)
ARG0(c2,a)
ARG2(s,h)
time(s,p)
ARG1(p,s2)
ARG0(s2,i)
time(s2,a2)

(a / and
      :op2 (r / repeat-01
            :ARG0 (h / he)
            :ARG1 (d / draw-01 :mode imperative :polite +
                  :ARG0 (y2 / you)
                  :ARG1 (s3 / sheep)
                  :ARG2 (i / i))
            :purpose (a2 / answer-01
                  :ARG0 h)
            :ARG1-of (s / slow-05
                  :degree (v / very))
            :conj-as-if (s2 / speak-01
                  :ARG0 h
                  :ARG1 (m / matter
                        :ARG1-of (c / consequential-01
                              :degree (g / great))))))

instance(a,and)
instance(r,repeat-01)
instance(h,he)
instance(d,draw-01)
instance(y2,you)
instance(s3,sheep)
instance(i,i)
instance(a2,answer-01)
instance(s,slow-05)
instance(v,very)
instance(s2,speak-01)
instance(m,matter)
instance(c,consequential-01)
instance(g,great)
op2(a,r)
ARG0(r,h)
ARG1(r,d)
mode(d,imperative)
polite(d,+)
ARG0(d,y2)
ARG1(d,s3)
ARG2(d,i)
purpose(r,a2)
ARG0(a2,h)
ARG1-of(r,s)
degree(s,v)
conj-as-if(r,s2)
ARG0(s2,h)
ARG1(s2,m)
ARG1-of(m,c)
degree(c,g)

(d / dare-01 :polarity -
      :ARG0 (o / one)
      :ARG2 (d2 / disobey-01
            :ARG0 o)
      :condition (h / have-quant-91
            :ARG1 (o2 / overpower-01
                  :ARG0 (m / mystery))
            :ARG3 (t / too)))

instance(d,dare-01)
instance(o,one)
instance(d2,disobey-01)
instance(h,have-quant-91)
instance(o2,overpower-01)
instance(m,mystery)
instance(t,too)
polarity(d,-)
ARG0(d,o)
ARG2(d,d2)
ARG0(d2,o)
condition(d,h)
ARG1(h,o2)
ARG0(o2,m)
ARG3(h,t)

(t / take-01
      :ARG0 (i / i
            :location (r / relative-position
                  :op1 (p5 / place
                        :mod (a3 / any)
                        :ARG1-of (i2 / inhabit-01
                              :ARG0 (h / human)))
                  :quant (d / distance-quantity :quant 1000
                        :unit (m / mile))
                  :direction (a2 / away))
            :ARG1-of (e / endanger-01
                  :ARG0 (d2 / die-01
                        :ARG1 i)))
      :ARG1 (a / and
            :op1 (p / paper
                  :quant (s / sheet :quant 1))
            :op2 (p2 / pen
                  :mod (f / fountain)
                  :poss i))
      :ARG2 (p3 / pocket
            :poss i)
      :concession (p4 / possible-01
            :ARG1 (s2 / seem-01
                  :ARG1 (a4 / absurd)
                  :ARG2 i)))

instance(t,take-01)
instance(i,i)
instance(r,relative-position)
instance(p5,place)
instance(a3,any)
instance(i2,inhabit-01)
instance(h,human)
instance(d,distance-quantity)
instance(m,mile)
instance(a2,away)
instance(e,endanger-01)
instance(d2,die-01)
instance(a,and)
instance(p,paper)
instance(s,sheet)
instance(p2,pen)
instance(f,fountain)
instance(p3,pocket)
instance(p4,possible-01)
instance(s2,seem-01)
instance(a4,absurd)
ARG0(t,i)
location(i,r)
op1(r,p5)
mod(p5,a3)
ARG1-of(p5,i2)
ARG0(i2,h)
quant(r,d)
quant(d,1000)
unit(d,m)
direction(r,a2)
ARG1-of(i,e)
ARG0(e,d2)
ARG1(d2,i)
ARG1(t,a)
op1(a,p)
quant(p,s)
quant(s,1)
op2(a,p2)
mod(p2,f)
poss(p2,i)
ARG2(t,p3)
poss(p3,i)
concession(t,p4)
ARG1(p4,s2)
ARG1(s2,a4)
ARG2(s2,i)

(c4 / contrast-01
      :ARG2 (a / and
            :op1 (r / remember-01
                  :ARG0 (i / i)
                  :ARG1 (c / concentrate-01
                        :ARG1 (a2 / and
                              :op1 (g / geography)
                              :op2 (h / history)
                              :op3 (a3 / arithmetic)
                              :op4 (g2 / grammar))
                        :ARG2 (s / study-01
                              :ARG0 i))
                  :time (t / then))
            :op2 (t2 / tell-01
                  :ARG0 i
                  :ARG1 (k / know-03 :polarity -
                        :ARG0 i
                        :ARG1 (d / draw-01
                              :ARG0 i))
                  :ARG2 (c2 / chap
                        :mod (l / little))
                  :manner (c3 / cross
                        :mod (l2 / little)
                        :mod (a4 / also)))))

instance(c4,contrast-01)
instance(a,and)
instance(r,remember-01)
instance(i,i)
instance(c,concentrate-01)
instance(a2,and)
instance(g,geography)
instance(h,history)
instance(a3,arithmetic)
instance(g2,grammar)
instance(s,study-01)
instance(t,then)
instance(t2,tell-01)
instance(k,know-03)
instance(d,draw-01)
instance(c2,chap)
instance(l,little)
instance(c3,cross)
instance(l2,little)
instance(a4,also)
ARG2(c4,a)
op1(a,r)
ARG0(r,i)
ARG1(r,c)
ARG1(c,a2)
op1(a2,g)
op2(a2,h)
op3(a2,a3)
op4(a2,g2)
ARG2(c,s)
ARG0(s,i)
time(r,t)
op2(a,t2)
ARG0(t2,i)
ARG1(t2,k)
polarity(k,-)
ARG0(k,i)
ARG1(k,d)
ARG0(d,i)
ARG2(t2,c2)
mod(c2,l)
manner(t2,c3)
mod(c3,l2)
mod(c3,a4)

(a / answer-01
  :ARG0 (h / he)
  :ARG1 (i / i)
  :ARG2 (m2 / matter-01
          :ARG1 (t / that)
          :polarity -))

instance(a,answer-01)
instance(h,he)
instance(i,i)
instance(m2,matter-01)
instance(t,that)
ARG0(a,h)
ARG1(a,i)
ARG2(a,m2)
ARG1(m2,t)
polarity(m2,-)

(d / draw-01
  :ARG0 (y / you)
  :ARG1 (s / sheep)
  :ARG2 (i / i)
  :mode imperative)

instance(d,draw-01)
instance(y,you)
instance(s,sheep)
instance(i,i)
ARG0(d,y)
ARG1(d,s)
ARG2(d,i)
mode(d,imperative)

(c / contrast-01
  :ARG2 (d / draw-01
          :ARG0 (i / i)
          :ARG1 (s / sheep)
          :time (e / ever)
          :polarity -))

instance(c,contrast-01)
instance(d,draw-01)
instance(i,i)
instance(s,sheep)
instance(e,ever)
ARG2(c,d)
ARG0(d,i)
ARG1(d,s)
time(d,e)
polarity(d,-)

(c / cause-01
  :ARG1 (d / draw-01
          :ARG0 (i / i)
          :ARG1 (p / picture
                  :quant 1
                  :ARG1-of (i2 / include-91
                             :ARG2 (p2 / picture
                                     :quant 2
                                     :ARG1-of (d2 / draw-01
                                                :ARG0 i
                                                :time (o / often
                                                        :degree (s / so))))))
          :ARG2 (h / he)))

instance(c,cause-01)
instance(d,draw-01)
instance(i,i)
instance(p,picture)
instance(i2,include-91)
instance(p2,picture)
instance(d2,draw-01)
instance(o,often)
instance(s,so)
instance(h,he)
ARG1(c,d)
ARG0(d,i)
ARG1(d,p)
quant(p,1)
ARG1-of(p,i2)
ARG2(i2,p2)
quant(p2,2)
ARG1-of(p2,d2)
ARG0(d2,i)
time(d2,o)
degree(o,s)
ARG2(d,h)

(b / boa
      :mod (c2 / constrictor)
      :direction (f / from
            :op1 (o / outside)))

instance(b,boa)
instance(c2,constrictor)
instance(f,from)
instance(o,outside)
mod(b,c2)
direction(b,f)
op1(f,o)

(a / and
  :op2 (a2 / astound-01
         :ARG0 (h / hear-01
                 :ARG0 i
                 :ARG1 (g / greet-01
                         :ARG0 f
                         :ARG1 (i2 / it)
                         :ARG3 (a3 / and
                                 :op1 (n / no)
                                 :op2 (n2 / no)
                                 :op3 (n3 / no)))
                 :ARG2 (f / fellow
                         :mod (l / little)))
         :ARG1 (i / i)))

instance(a,and)
instance(a2,astound-01)
instance(h,hear-01)
instance(g,greet-01)
instance(i2,it)
instance(a3,and)
instance(n,no)
instance(n2,no)
instance(n3,no)
instance(f,fellow)
instance(l,little)
instance(i,i)
op2(a,a2)
ARG0(a2,h)
ARG0(h,i)
ARG1(h,g)
ARG0(g,f)
ARG1(g,i2)
ARG3(g,a3)
op1(a3,n)
op2(a3,n2)
op3(a3,n3)
ARG2(h,f)
mod(f,l)
ARG1(a2,i)

(w / want-01
  :ARG0 (i / i)
  :ARG1 (e / elephant
          :location (i2 / inside
                      :op1 (b2 / boa
                             :mod (c2 / constrictor))))
  :polarity -)

instance(w,want-01)
instance(i,i)
instance(e,elephant)
instance(i2,inside)
instance(b2,boa)
instance(c2,constrictor)
ARG0(w,i)
ARG1(w,e)
location(e,i2)
op1(i2,b2)
mod(b2,c2)
polarity(w,-)

(a / and
  :op1 (c2 / creature
         :mod (d2 / dangerous)
         :domain (b / boa
                   :mod (c / constrictor)))
  :op2 (c3 / cumbersome
         :degree (v2 / very)
         :domain (e / elephant)))

instance(a,and)
instance(c2,creature)
instance(d2,dangerous)
instance(b,boa)
instance(c,constrictor)
instance(c3,cumbersome)
instance(v2,very)
instance(e,elephant)
op1(a,c2)
mod(c2,d2)
domain(c2,b)
mod(b,c)
op2(a,c3)
degree(c3,v2)
domain(c3,e)

(s / small
  :degree (v / very)
  :domain (e / everything)
  :location (l2 / live-01
              :ARG0 (i / i)))

instance(s,small)
instance(v,very)
instance(e,everything)
instance(l2,live-01)
instance(i,i)
degree(s,v)
domain(s,e)
location(s,l2)
ARG0(l2,i)

(n / need-01
  :ARG0 (i / i)
  :ARG1 (s / sheep))

instance(n,need-01)
instance(i,i)
instance(s,sheep)
ARG0(n,i)
ARG1(n,s)

(d / draw-01
  :ARG0 (y / you)
  :ARG1 (s / sheep)
  :ARG2 (i / i)
  :mode imperative)

instance(d,draw-01)
instance(y,you)
instance(s,sheep)
instance(i,i)
ARG0(d,y)
ARG1(d,s)
ARG2(d,i)
mode(d,imperative)

(c / cause-01
  :ARG1 (d / draw-01
          :ARG0 (i / i)
          :time (t2 / then)))

instance(c,cause-01)
instance(d,draw-01)
instance(i,i)
instance(t2,then)
ARG1(c,d)
ARG0(d,i)
time(d,t2)

(a / and
  :op1 (l / look-01
         :ARG0 (h / he)
         :ARG1 (i / it)
         :manner (c / careful))
  :op2 (s / say-01
         :ARG0 h
         :ARG1 (n / no)
         :time (t / then)))

instance(a,and)
instance(l,look-01)
instance(h,he)
instance(i,it)
instance(c,careful)
instance(s,say-01)
instance(n,no)
instance(t,then)
op1(a,l)
ARG0(l,h)
ARG1(l,i)
manner(l,c)
op2(a,s)
ARG0(s,h)
ARG1(s,n)
time(s,t)

(s2 / sick-05
      :ARG1 (s / sheep
            :mod (t / this))
      :degree (v / very)
      :time (a / already))

instance(s2,sick-05)
instance(s,sheep)
instance(t,this)
instance(v,very)
instance(a,already)
ARG1(s2,s)
mod(s,t)
degree(s2,v)
time(s2,a)

(m / make-01
  :ARG0 (y / you)
  :ARG1 (a / another)
  :ARG3 (i / i)
  :mode imperative)

instance(m,make-01)
instance(y,you)
instance(a,another)
instance(i,i)
ARG0(m,y)
ARG1(m,a)
ARG3(m,i)
mode(m,imperative)

(c / cause-01
      :ARG1 (m / make-01
            :ARG0 (i / i)
            :ARG1 (p / picture
                  :ARG1-of (d / draw-01
                        :ARG0 i)
                  :mod (a / another))))

instance(c,cause-01)
instance(m,make-01)
instance(i,i)
instance(p,picture)
instance(d,draw-01)
instance(a,another)
ARG1(c,m)
ARG0(m,i)
ARG1(m,p)
ARG1-of(p,d)
ARG0(d,i)
mod(p,a)

(s / smile-01
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (f / friend)))
      :manner (g / gentle)
      :manner (i2 / indulgent))

instance(s,smile-01)
instance(p,person)
instance(h,have-rel-role-91)
instance(i,i)
instance(f,friend)
instance(g,gentle)
instance(i2,indulgent)
ARG0(s,p)
ARG0-of(p,h)
ARG1(h,i)
ARG2(h,f)
manner(s,g)
manner(s,i2)

(s / say-01
  :ARG0 (h / he)
  :ARG1 (s2 / see-01
          :ARG0 (y / you)
          :ARG1 (s4 / sheep
                  :domain (t2 / this)
                  :polarity -)))

instance(s,say-01)
instance(h,he)
instance(s2,see-01)
instance(y,you)
instance(s4,sheep)
instance(t2,this)
ARG0(s,h)
ARG1(s,s2)
ARG0(s2,y)
ARG1(s2,s4)
domain(s4,t2)
polarity(s4,-)

(r2 / ram
  :domain (t2 / this))

instance(r2,ram)
instance(t2,this)
domain(r2,t2)

(h / have-03
      :ARG0 (i / it)
      :ARG1 (h2 / horn))

instance(h,have-03)
instance(i,it)
instance(h2,horn)
ARG0(h,i)
ARG1(h,h2)

(c / cause-01
      :ARG1 (d / do-02
            :ARG0 (i / i)
            :ARG1 (p / picture
                  :ARG1-of (d2 / draw-01
                        :ARG0 i))
            :mod (o / over)
            :mod (a / again
                  :mod (o2 / once))
            :time (t2 / then)))

instance(c,cause-01)
instance(d,do-02)
instance(i,i)
instance(p,picture)
instance(d2,draw-01)
instance(o,over)
instance(a,again)
instance(o2,once)
instance(t2,then)
ARG1(c,d)
ARG0(d,i)
ARG1(d,p)
ARG1-of(p,d2)
ARG0(d2,i)
mod(d,o)
mod(d,a)
mod(a,o2)
time(d,t2)

(c / contrast-01
      :ARG1 (r / reject-01
            :ARG1 (i / it)
            :ARG1-of (r2 / resemble-01
                  :ARG2 (o / other))
            :mod (t / too)))

instance(c,contrast-01)
instance(r,reject-01)
instance(i,it)
instance(r2,resemble-01)
instance(o,other)
instance(t,too)
ARG1(c,r)
ARG1(r,i)
ARG1-of(r,r2)
ARG2(r2,o)
mod(r,t)

(h / have-degree-91
      :ARG1 (o / one
            :mod (t / this))
      :ARG2 (o2 / old)
      :ARG3 (t2 / too))

instance(h,have-degree-91)
instance(o,one)
instance(t,this)
instance(o2,old)
instance(t2,too)
ARG1(h,o)
mod(o,t)
ARG2(h,o2)
ARG3(h,t2)

(w / want-01
      :ARG0 (i / i)
      :ARG1 (s / sheep
            :ARG0-of (l / live-01
                  :ARG1-of (l2 / long-03))))

instance(w,want-01)
instance(i,i)
instance(s,sheep)
instance(l,live-01)
instance(l2,long-03)
ARG0(w,i)
ARG1(w,s)
ARG0-of(s,l)
ARG1-of(l,l2)

(e / exhaust-01
      :ARG1 (p / patient-01
            :ARG1 (i / i))
      :ARG1-of (c / cause-01
            :ARG0 (h / hurry-01
                  :ARG1 i
                  :ARG2 (s / start-01
                        :ARG0 i
                        :ARG1 (d / disassemble-01
                              :ARG0 i
                              :ARG1 (e2 / engine
                                    :poss i)))))
      :time (b / by
            :op1 (t / time
                  :mod (t2 / this))))

instance(e,exhaust-01)
instance(p,patient-01)
instance(i,i)
instance(c,cause-01)
instance(h,hurry-01)
instance(s,start-01)
instance(d,disassemble-01)
instance(e2,engine)
instance(b,by)
instance(t,time)
instance(t2,this)
ARG1(e,p)
ARG1(p,i)
ARG1-of(e,c)
ARG0(c,h)
ARG1(h,i)
ARG2(h,s)
ARG0(s,i)
ARG1(s,d)
ARG0(d,i)
ARG1(d,e2)
poss(e2,i)
time(e,b)
op1(b,t)
mod(t,t2)

(c / cause-01
      :ARG1 (t / toss-out-02
            :ARG0 (i / i)
            :ARG1 (p / picture
                  :ARG1-of (d / draw-01
                        :ARG0 i)
                  :mod (t3 / this))
            :direction (o / off)))

instance(c,cause-01)
instance(t,toss-out-02)
instance(i,i)
instance(p,picture)
instance(d,draw-01)
instance(t3,this)
instance(o,off)
ARG1(c,t)
ARG0(t,i)
ARG1(t,p)
ARG1-of(p,d)
ARG0(d,i)
mod(p,t3)
direction(t,o)

(a / and
  :op2 (e / explain-01
         :ARG0 (i / i)
         :ARG1 (i3 / it)))

instance(a,and)
instance(e,explain-01)
instance(i,i)
instance(i3,it)
op2(a,e)
ARG0(e,i)
ARG1(e,i3)

(b / box
  :poss (h / he)
  :domain (t / this)
  :mod (o / only))

instance(b,box)
instance(h,he)
instance(t,this)
instance(o,only)
poss(b,h)
domain(b,t)
mod(b,o)

(b / be-located-at-91
      :ARG1 (s2 / sheep
            :ARG1-of (a / ask-01
                  :ARG0 (y / you)))
      :ARG2 (i2 / inside))

instance(b,be-located-at-91)
instance(s2,sheep)
instance(a,ask-01)
instance(y,you)
instance(i2,inside)
ARG1(b,s2)
ARG1-of(s2,a)
ARG0(a,y)
ARG2(b,i2)

(a / and
      :op1 (s / surprise-01
            :ARG0 (s2 / see-01
                  :ARG0 i
                  :ARG1 (b / break-13
                        :ARG1 (l / light)
                        :location (o / over
                              :op1 (f / face
                                    :part-of (p / person
                                          :ARG0-of (j / judge-01)
                                          :poss i
                                          :mod (y / young))))))
            :ARG1 (i / i)
            :degree (v / very))
      :op2 (s3 / say-01
            :ARG1 (w / way
                  :mod (e / exact)
                  :domain (w2 / want-01
                        :ARG0 p
                        :ARG1 (i2 / it)))))

instance(a,and)
instance(s,surprise-01)
instance(s2,see-01)
instance(b,break-13)
instance(l,light)
instance(o,over)
instance(f,face)
instance(p,person)
instance(j,judge-01)
instance(y,young)
instance(i,i)
instance(v,very)
instance(s3,say-01)
instance(w,way)
instance(e,exact)
instance(w2,want-01)
instance(i2,it)
op1(a,s)
ARG0(s,s2)
ARG0(s2,i)
ARG1(s2,b)
ARG1(b,l)
location(b,o)
op1(o,f)
part-of(f,p)
ARG0-of(p,j)
poss(p,i)
mod(p,y)
ARG1(s,i)
degree(s,v)
op2(a,s3)
ARG1(s3,w)
mod(w,e)
domain(w,w2)
ARG0(w2,p)
ARG1(w2,i2)

(t / think-01
      :ARG0 (y / you)
      :ARG1 (o / obligate-01
            :ARG2 (h / have-03
                  :ARG0 (s / sheep
                        :mod (t2 / this))
                  :ARG1 (g / grass
                        :quant (d / deal
                              :mod (g2 / great)))))
      :polarity (a / amr-unknown))

instance(t,think-01)
instance(y,you)
instance(o,obligate-01)
instance(h,have-03)
instance(s,sheep)
instance(t2,this)
instance(g,grass)
instance(d,deal)
instance(g2,great)
instance(a,amr-unknown)
ARG0(t,y)
ARG1(t,o)
ARG2(o,h)
ARG0(h,s)
mod(s,t2)
ARG1(h,g)
quant(g,d)
mod(d,g2)
polarity(t,a)

(c / cause-01
      :ARG0 (a / amr-unknown))

instance(c,cause-01)
instance(a,amr-unknown)
ARG0(c,a)

(c / cause-01
  :ARG0 (s / small
          :degree (v / very)
          :domain (e / everything
                    :location (l / live-01
                                :ARG0 (i / i)))))

instance(c,cause-01)
instance(s,small)
instance(v,very)
instance(e,everything)
instance(l,live-01)
instance(i,i)
ARG0(c,s)
degree(s,v)
domain(s,e)
location(e,l)
ARG0(l,i)

(h / have-quant-91
      :ARG1 (g / grass)
      :ARG3 (e / enough
            :ARG1-of (s / sure-02))
      :ARG6 (h2 / he))

instance(h,have-quant-91)
instance(g,grass)
instance(e,enough)
instance(s,sure-02)
instance(h2,he)
ARG1(h,g)
ARG3(h,e)
ARG1-of(e,s)
ARG6(h,h2)

(s / say-01
      :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(g / give-01
      :ARG0 (i / i)
      :ARG1 (s / sheep
            :mod (s2 / small
                  :degree (v / very)))
      :ARG2 (y / you))

instance(g,give-01)
instance(i,i)
instance(s,sheep)
instance(s2,small)
instance(v,very)
instance(y,you)
ARG0(g,i)
ARG1(g,s)
mod(s,s2)
degree(s2,v)
ARG2(g,y)

(a / and
      :op1 (b / bend-01
            :ARG1 (h2 / head
                  :location (o / over
                        :op1 (p / picture
                              :ARG1-of (d / draw-01)))
                  :part-of h3))
      :op2 (s / say-01
            :ARG0 (h3 / he)
            :ARG1 (l / look-01 :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (s2 / small :polarity -
                        :degree (s3 / so)
                        :domain (t2 / that)))))

instance(a,and)
instance(b,bend-01)
instance(h2,head)
instance(o,over)
instance(p,picture)
instance(d,draw-01)
instance(s,say-01)
instance(h3,he)
instance(l,look-01)
instance(y,you)
instance(s2,small)
instance(s3,so)
instance(t2,that)
op1(a,b)
ARG1(b,h2)
location(h2,o)
op1(o,p)
ARG1-of(p,d)
part-of(h2,h3)
op2(a,s)
ARG0(s,h3)
ARG1(s,l)
mode(l,imperative)
ARG0(l,y)
ARG1(l,s2)
polarity(s2,-)
degree(s2,s3)
domain(s2,t2)

(s / sleep-01
      :ARG0 (h / he))

instance(s,sleep-01)
instance(h,he)
ARG0(s,h)

(a / and
  :op2 (a2 / acquaint-01
         :ARG1 (i / i)
         :ARG2 (p / prince
                 :mod (l / little))
         :manner (t / that)))

instance(a,and)
instance(a2,acquaint-01)
instance(i,i)
instance(p,prince)
instance(l,little)
instance(t,that)
op2(a,a2)
ARG1(a2,i)
ARG2(a2,p)
mod(p,l)
manner(a2,t)

(c2 / chapter
  :mod 3)

instance(c2,chapter)
mod(c2,3)

(t2 / take-10
      :ARG1 (t / temporal-quantity
            :ARG2-of (l / long-03
                  :ARG1 (l2 / learn-01
                        :ARG0 (i / i)
                        :ARG1 (p / place
                              :ARG3-of (c / come-01
                                    :ARG1 (h / he)))))))

instance(t2,take-10)
instance(t,temporal-quantity)
instance(l,long-03)
instance(l2,learn-01)
instance(i,i)
instance(p,place)
instance(c,come-01)
instance(h,he)
ARG1(t2,t)
ARG2-of(t,l)
ARG1(l,l2)
ARG0(l2,i)
ARG1(l2,p)
ARG3-of(p,c)
ARG1(c,h)

(s / seem-01
      :ARG1 (h / hear-01 :polarity -
            :ARG0 (p / prince
                  :mod (l / little)
                  :ARG0-of (q / question-01
                        :ARG2 (i / i)
                        :quant (m / many
                              :degree (s2 / so))))
            :ARG1 (o / one
                  :ARG1-of (a2 / ask-01
                        :ARG0 i
                        :ARG2 p))
            :time (e2 / ever)))

instance(s,seem-01)
instance(h,hear-01)
instance(p,prince)
instance(l,little)
instance(q,question-01)
instance(i,i)
instance(m,many)
instance(s2,so)
instance(o,one)
instance(a2,ask-01)
instance(e2,ever)
ARG1(s,h)
polarity(h,-)
ARG0(h,p)
mod(p,l)
ARG0-of(p,q)
ARG2(q,i)
quant(q,m)
degree(m,s2)
ARG1(h,o)
ARG1-of(o,a2)
ARG0(a2,i)
ARG2(a2,p)
time(h,e2)

(r / reveal-01
      :ARG0 (w / word
            :ARG1-of (d / drop-06
                  :ARG1-of (c / chance-02)))
      :ARG1 (e / everything)
      :ARG2 (i / i)
      :manner (l / little-by-little))

instance(r,reveal-01)
instance(w,word)
instance(d,drop-06)
instance(c,chance-02)
instance(e,everything)
instance(i,i)
instance(l,little-by-little)
ARG0(r,w)
ARG1-of(w,d)
ARG1-of(d,c)
ARG1(r,e)
ARG2(r,i)
manner(r,l)

(a4 / and
      :op1 (a / ask-01
            :ARG0 (h / he)
            :ARG1 (o / object
                  :mod (t / that)
                  :domain (a2 / amr-unknown))
            :ARG2 (i / i)
            :time (s / see-01
                  :ARG0 h
                  :ARG1 (a3 / airplane
                        :poss i)
                  :ord (o2 / ordinal-entity :value 1)))
      :op2 (h2 / have-polarity-91
            :ARG1 (d / draw-01 :polarity -
                  :ARG0 i
                  :ARG1 a3
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (c2 / complicate-01
                              :ARG1 d
                              :ARG2 i)
                        :ARG3 (t3 / too
                              :quant (m / much))))
            :ARG2 -))

instance(a4,and)
instance(a,ask-01)
instance(h,he)
instance(o,object)
instance(t,that)
instance(a2,amr-unknown)
instance(i,i)
instance(s,see-01)
instance(a3,airplane)
instance(o2,ordinal-entity)
instance(h2,have-polarity-91)
instance(d,draw-01)
instance(h3,have-degree-91)
instance(c2,complicate-01)
instance(t3,too)
instance(m,much)
op1(a4,a)
ARG0(a,h)
ARG1(a,o)
mod(o,t)
domain(o,a2)
ARG2(a,i)
time(a,s)
ARG0(s,h)
ARG1(s,a3)
poss(a3,i)
ord(s,o2)
value(o2,1)
op2(a4,h2)
ARG1(h2,d)
polarity(d,-)
ARG0(d,i)
ARG1(d,a3)
ARG1-of(d,h3)
ARG2(h3,c2)
ARG1(c2,d)
ARG2(c2,i)
ARG3(h3,t3)
quant(t3,m)
ARG2(h2,-)

(o / object
  :domain (t / that)
  :polarity -)

instance(o,object)
instance(t,that)
domain(o,t)
polarity(o,-)

(f / fly-01
      :ARG1 (i / it))

instance(f,fly-01)
instance(i,it)
ARG1(f,i)

(a / airplane
  :domain (i / it))

instance(a,airplane)
instance(i,it)
domain(a,i)

(a2 / airplane
  :poss (i2 / i)
  :domain (i / it))

instance(a2,airplane)
instance(i2,i)
instance(i,it)
poss(a2,i2)
domain(a2,i)

(a / and
  :op2 (p / pride-01
         :ARG0 (i / i)
         :ARG2 (l / learn-01
                 :ARG0 (h2 / he)
                 :ARG1 (p2 / possible-01
                         :ARG1 (f / fly-01
                                   :ARG1 i)))))

instance(a,and)
instance(p,pride-01)
instance(i,i)
instance(l,learn-01)
instance(h2,he)
instance(p2,possible-01)
instance(f,fly-01)
op2(a,p)
ARG0(p,i)
ARG2(p,l)
ARG0(l,h2)
ARG1(l,p2)
ARG1(p2,f)
ARG1(f,i)

(c / cry-out-03
      :ARG0 (h / he)
      :ARG1 (s / string-entity :value "what")
      :time (t / then))

instance(c,cry-out-03)
instance(h,he)
instance(s,string-entity)
instance(t,then)
ARG0(c,h)
ARG1(c,s)
value(s,"what")
time(c,t)

(d / drop-01
      :ARG1 (y / you)
      :ARG3 (s / sky)
      :direction (d2 / down)
      :polarity (a / amr-unknown))

instance(d,drop-01)
instance(y,you)
instance(s,sky)
instance(d2,down)
instance(a,amr-unknown)
ARG1(d,y)
ARG3(d,s)
direction(d,d2)
polarity(d,a)

(y2 / yes)

instance(y2,yes)

(a / answer-01
      :ARG0 (i / i)
      :manner (m / modest))

instance(a,answer-01)
instance(i,i)
instance(m,modest)
ARG0(a,i)
manner(a,m)

(o / oh :mode expressive)

instance(o,oh)
mode(o,expressive)

(f2 / funny
  :domain (t2 / that))

instance(f2,funny)
instance(t2,that)
domain(f2,t2)

(a / and
      :op2 (b / break-in-17
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (l2 / laugh-01
                  :quant (p2 / peal
                        :mod (l3 / lovely)))
            :ARG0-of (i / irritate-01
                  :ARG1 (i2 / i)
                  :degree (m / much
                        :degree (v / very)))))

instance(a,and)
instance(b,break-in-17)
instance(p,prince)
instance(l,little)
instance(l2,laugh-01)
instance(p2,peal)
instance(l3,lovely)
instance(i,irritate-01)
instance(i2,i)
instance(m,much)
instance(v,very)
op2(a,b)
ARG0(b,p)
mod(p,l)
ARG1(b,l2)
quant(l2,p2)
mod(p2,l3)
ARG0-of(b,i)
ARG1(i,i2)
degree(i,m)
degree(m,v)

(l / like-02
      :ARG0 (i / i)
      :ARG1 (t / take-04
            :ARG1 (m / misfortune
                  :poss i)
            :manner (s / serious-01)))

instance(l,like-02)
instance(i,i)
instance(t,take-04)
instance(m,misfortune)
instance(s,serious-01)
ARG0(l,i)
ARG1(l,t)
ARG1(t,m)
poss(m,i)
manner(t,s)

(a / add-01
  :ARG0 (h / he)
  :ARG1 (c2 / cause-01
          :ARG1 (c / come-01
                  :ARG1 (y / you)
                  :ARG3 (s2 / sky)
                  :mod (t2 / too)))
  :time (t / then))

instance(a,add-01)
instance(h,he)
instance(c2,cause-01)
instance(c,come-01)
instance(y,you)
instance(s2,sky)
instance(t2,too)
instance(t,then)
ARG0(a,h)
ARG1(a,c2)
ARG1(c2,c)
ARG1(c,y)
ARG3(c,s2)
mod(c,t2)
time(a,t)

(p / planet
      :poss (y / you)
      :domain (a / amr-unknown))

instance(p,planet)
instance(y,you)
instance(a,amr-unknown)
poss(p,y)
domain(p,a)

(a / and
      :op1 (c / catch-03
            :ARG0 (i / i)
            :ARG1 (g / gleam-01
                  :ARG0 (l / light)
                  :location (m / mystery
                        :domain (p / present-02
                              :ARG1 (h / he))
                        :ARG1-of (p3 / penetrate-01
                              :ARG1-of (p2 / possible-01 :polarity -))))
            :time (m2 / moment
                  :mod (t / that)))
      :op2 (d / demand-01
            :ARG0 i
            :ARG1 (t2 / truth-value
                  :polarity-of (c2 / come-01
                        :ARG1 (y / you)
                        :ARG3 (p4 / planet
                              :mod (a3 / another))))
            :manner (a2 / abrupt)))

instance(a,and)
instance(c,catch-03)
instance(i,i)
instance(g,gleam-01)
instance(l,light)
instance(m,mystery)
instance(p,present-02)
instance(h,he)
instance(p3,penetrate-01)
instance(p2,possible-01)
instance(m2,moment)
instance(t,that)
instance(d,demand-01)
instance(t2,truth-value)
instance(c2,come-01)
instance(y,you)
instance(p4,planet)
instance(a3,another)
instance(a2,abrupt)
op1(a,c)
ARG0(c,i)
ARG1(c,g)
ARG0(g,l)
location(g,m)
domain(m,p)
ARG1(p,h)
ARG1-of(m,p3)
ARG1-of(p3,p2)
polarity(p2,-)
time(c,m2)
mod(m2,t)
op2(a,d)
ARG0(d,i)
ARG1(d,t2)
polarity-of(t2,c2)
ARG1(c2,y)
ARG3(c2,p4)
mod(p4,a3)
manner(d,a2)

(c / contrast-01
  :ARG2 (r / reply-01
          :ARG0 (h / he)
          :polarity -))

instance(c,contrast-01)
instance(r,reply-01)
instance(h,he)
ARG2(c,r)
ARG0(r,h)
polarity(r,-)

(a / and
      :op1 (t / toss-01
            :ARG0 (h / he)
            :ARG1 (h2 / head
                  :part-of h)
            :manner (g / gentle)
            :manner (t2 / take-away-05 :polarity -
                  :ARG0 h
                  :ARG1 (e / eye
                        :part-of h)
                  :source (p2 / plane
                        :poss (i / i))))
      :op2 (s / say-01
            :ARG0 h
            :ARG1 (p / possible-01 :polarity -
                  :ARG1 (c / come-01
                        :ARG1 (y / you)
                        :ARG3 (a2 / away
                              :extent (f / far
                                    :degree (v / very)))
                        :manner p2))))

instance(a,and)
instance(t,toss-01)
instance(h,he)
instance(h2,head)
instance(g,gentle)
instance(t2,take-away-05)
instance(e,eye)
instance(p2,plane)
instance(i,i)
instance(s,say-01)
instance(p,possible-01)
instance(c,come-01)
instance(y,you)
instance(a2,away)
instance(f,far)
instance(v,very)
op1(a,t)
ARG0(t,h)
ARG1(t,h2)
part-of(h2,h)
manner(t,g)
manner(t,t2)
polarity(t2,-)
ARG0(t2,h)
ARG1(t2,e)
part-of(e,h)
source(t2,p2)
poss(p2,i)
op2(a,s)
ARG0(s,h)
ARG1(s,p)
polarity(p,-)
ARG1(p,c)
ARG1(c,y)
ARG3(c,a2)
extent(a2,f)
degree(f,v)
manner(c,p2)

(a / and
      :op2 (s / sink-01
            :ARG0 (h / he)
            :ARG4 (r / reverie
                  :ARG1-of (l / long-03))))

instance(a,and)
instance(s,sink-01)
instance(h,he)
instance(r,reverie)
instance(l,long-03)
op2(a,s)
ARG0(s,h)
ARG4(s,r)
ARG1-of(r,l)

(b / bury-01
      :ARG0 (h / he)
      :ARG1 h
      :ARG2 (c / contemplate-01
            :ARG0 h
            :ARG1 (t / treasure
                  :poss h))
      :time (t2 / take-01
            :ARG0 h
            :ARG1 (s / sheep
                  :poss (i / i))
            :ARG2 (p / pocket
                  :poss h))
      :time (t3 / then))

instance(b,bury-01)
instance(h,he)
instance(c,contemplate-01)
instance(t,treasure)
instance(t2,take-01)
instance(s,sheep)
instance(i,i)
instance(p,pocket)
instance(t3,then)
ARG0(b,h)
ARG1(b,h)
ARG2(b,c)
ARG0(c,h)
ARG1(c,t)
poss(t,h)
time(b,t2)
ARG0(t2,h)
ARG1(t2,s)
poss(s,i)
ARG2(t2,p)
poss(p,h)
time(b,t3)

(p / possible-01
      :ARG1 (i2 / imagine-01
            :ARG0 (y / you)
            :ARG1 (a / arouse-01
                  :ARG0 (c4 / confidence
                        :degree (h2 / half)
                        :topic (p3 / planet
                              :mod (o2 / other))
                        :poss (h / he))
                  :ARG1 (c / curious-01
                        :ARG1 (i / i)))))

instance(p,possible-01)
instance(i2,imagine-01)
instance(y,you)
instance(a,arouse-01)
instance(c4,confidence)
instance(h2,half)
instance(p3,planet)
instance(o2,other)
instance(h,he)
instance(c,curious-01)
instance(i,i)
ARG1(p,i2)
ARG0(i2,y)
ARG1(i2,a)
ARG0(a,c4)
degree(c4,h2)
topic(c4,p3)
mod(p3,o2)
poss(c4,h)
ARG1(a,c)
ARG1(c,i)

(c / cause-01
      :ARG1 (e / effort-01
            :ARG0 (i / i)
            :ARG1 (f / find-out-03
                  :ARG0 i
                  :ARG1 (i2 / information
                        :quant (m2 / more)
                        :topic (s / subject
                              :mod (t2 / this))))
            :mod (g / great)))

instance(c,cause-01)
instance(e,effort-01)
instance(i,i)
instance(f,find-out-03)
instance(i2,information)
instance(m2,more)
instance(s,subject)
instance(t2,this)
instance(g,great)
ARG1(c,e)
ARG0(e,i)
ARG1(e,f)
ARG0(f,i)
ARG1(f,i2)
quant(i2,m2)
topic(i2,s)
mod(s,t2)
mod(e,g)

(s / say-01
      :ARG1 (c / come-01
            :ARG1 (y / you)
            :ARG3 (a / amr-unknown))
      :ARG2 (m / man
            :mod (l / little)
            :poss (i / i)))

instance(s,say-01)
instance(c,come-01)
instance(y,you)
instance(a,amr-unknown)
instance(m,man)
instance(l,little)
instance(i,i)
ARG1(s,c)
ARG1(c,y)
ARG3(c,a)
ARG2(s,m)
mod(m,l)
poss(m,i)

(l / live-01
      :ARG0 (y / you)
      :location (p / place
            :ARG1-of (s / speak-01
                  :ARG0 y)
            :domain (a / amr-unknown)))

instance(l,live-01)
instance(y,you)
instance(p,place)
instance(s,speak-01)
instance(a,amr-unknown)
ARG0(l,y)
location(l,p)
ARG1-of(p,s)
ARG0(s,y)
domain(p,a)

(w / want-01
      :ARG0 (y / you)
      :ARG1 (t / take-01
            :ARG0 y
            :ARG1 (s / sheep
                  :poss y)
            :ARG3 (a / amr-unknown)))

instance(w,want-01)
instance(y,you)
instance(t,take-01)
instance(s,sheep)
instance(a,amr-unknown)
ARG0(w,y)
ARG1(w,t)
ARG0(t,y)
ARG1(t,s)
poss(s,y)
ARG3(t,a)

(a / answer-01
      :ARG0 (h / he)
      :ARG1 (h4 / have-degree-91
            :ARG1 (b / box
                  :ARG1-of (g2 / give-01
                        :ARG0 (y / you)
                        :ARG2 h))
            :ARG2 (g / good-02
                  :ARG1 b)
            :ARG3 (s2 / so)
            :ARG6 (p / possible-01
                  :ARG1 (u / use-01
                        :ARG0 (h2 / he)
                        :ARG1 b
                        :ARG2 (h3 / house
                              :poss h2)
                        :time (d / date-entity
                              :dayperiod (n / night)))))
      :time (a2 / after
            :op1 (s / silent
                  :mod (r / reflect-02))))

instance(a,answer-01)
instance(h,he)
instance(h4,have-degree-91)
instance(b,box)
instance(g2,give-01)
instance(y,you)
instance(g,good-02)
instance(s2,so)
instance(p,possible-01)
instance(u,use-01)
instance(h2,he)
instance(h3,house)
instance(d,date-entity)
instance(n,night)
instance(a2,after)
instance(s,silent)
instance(r,reflect-02)
ARG0(a,h)
ARG1(a,h4)
ARG1(h4,b)
ARG1-of(b,g2)
ARG0(g2,y)
ARG2(g2,h)
ARG2(h4,g)
ARG1(g,b)
ARG3(h4,s2)
ARG6(h4,p)
ARG1(p,u)
ARG0(u,h2)
ARG1(u,b)
ARG2(u,h3)
poss(h3,h2)
time(u,d)
dayperiod(d,n)
time(a,a2)
op1(a2,s)
mod(s,r)

(s / so
  :domain (t / that))

instance(s,so)
instance(t,that)
domain(s,t)

(a / and
      :op2 (g / give-01
            :ARG0 (i / i)
            :ARG1 (a2 / and
                  :op1 (s / string
                        :ARG3-of (t / tie-01
                              :ARG0 y
                              :ARG1 (h / he)
                              :time (d / date-entity
                                    :dayperiod (d2 / day))))
                  :op2 (p2 / post
                        :purpose (t3 / tie-01
                              :ARG0 y
                              :ARG1 h)))
            :ARG2 (y / you)
            :condition (g2 / good-02
                  :ARG1 y)))

instance(a,and)
instance(g,give-01)
instance(i,i)
instance(a2,and)
instance(s,string)
instance(t,tie-01)
instance(h,he)
instance(d,date-entity)
instance(d2,day)
instance(p2,post)
instance(t3,tie-01)
instance(y,you)
instance(g2,good-02)
op2(a,g)
ARG0(g,i)
ARG1(g,a2)
op1(a2,s)
ARG3-of(s,t)
ARG0(t,y)
ARG1(t,h)
time(t,d)
dayperiod(d,d2)
op2(a2,p2)
purpose(p2,t3)
ARG0(t3,y)
ARG1(t3,h)
ARG2(g,y)
condition(g,g2)
ARG1(g2,y)

(c / contrast-01
      :ARG2 (s / seem-01
            :ARG1 (s2 / shock-01
                  :ARG0 (o / offer
                        :mod (t / this))
                  :ARG1 (p / prince
                        :mod (l / little)
                        :ARG0-of (s3 / say-01
                              :ARG1 (t2 / tie-01 :mode imperative
                                    :ARG0 p
                                    :ARG1 (h / he)))))))

instance(c,contrast-01)
instance(s,seem-01)
instance(s2,shock-01)
instance(o,offer)
instance(t,this)
instance(p,prince)
instance(l,little)
instance(s3,say-01)
instance(t2,tie-01)
instance(h,he)
ARG2(c,s)
ARG1(s,s2)
ARG0(s2,o)
mod(o,t)
ARG1(s2,p)
mod(p,l)
ARG0-of(p,s3)
ARG1(s3,t2)
mode(t2,imperative)
ARG0(t2,p)
ARG1(t2,h)

(q / queer
      :domain (i / idea))

instance(q,queer)
instance(i,idea)
domain(q,i)

(c / contrast-01
      :ARG2 (t / tie-01 :polarity -
            :ARG0 (y / you)
            :ARG1 (h / he)
            :condition-of (t2 / thing)))

instance(c,contrast-01)
instance(t,tie-01)
instance(y,you)
instance(h,he)
instance(t2,thing)
ARG2(c,t)
polarity(t,-)
ARG0(t,y)
ARG1(t,h)
condition-of(t,t2)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (a / and
          :op1 (w / wander-01
                 :ARG0 (h / he)
                 :ARG1 (s2 / somewhere))
          :op2 (g / get-03
                 :ARG1 h
                 :ARG2 (l / lost))))

instance(s,say-01)
instance(i,i)
instance(a,and)
instance(w,wander-01)
instance(h,he)
instance(s2,somewhere)
instance(g,get-03)
instance(l,lost)
ARG0(s,i)
ARG1(s,a)
op1(a,w)
ARG0(w,h)
ARG1(w,s2)
op2(a,g)
ARG1(g,h)
ARG2(g,l)

(b / break-in-17
      :ARG0 (p2 / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (f / friend))
            :ARG0-of (s / say-01
                  :ARG1 (c / contrast-01
                        :ARG2 (t / think-01
                              :ARG0 (y / you)
                              :ARG1 (g / go-02
                                    :ARG0 (h / he)
                                    :ARG4 (a2 / amr-unknown))))))
      :ARG1 (l / laugh-01
            :quant (p / peal
                  :mod (a / another))))

instance(b,break-in-17)
instance(p2,person)
instance(h2,have-rel-role-91)
instance(i,i)
instance(f,friend)
instance(s,say-01)
instance(c,contrast-01)
instance(t,think-01)
instance(y,you)
instance(g,go-02)
instance(h,he)
instance(a2,amr-unknown)
instance(l,laugh-01)
instance(p,peal)
instance(a,another)
ARG0(b,p2)
ARG0-of(p2,h2)
ARG1(h2,i)
ARG2(h2,f)
ARG0-of(p2,s)
ARG1(s,c)
ARG2(c,t)
ARG0(t,y)
ARG1(t,g)
ARG0(g,h)
ARG4(g,a2)
ARG1(b,l)
quant(l,p)
mod(p,a)

(a / anywhere)

instance(a,anywhere)

(a / ahead
      :op1 (h / he)
      :ARG1-of (s / straight-04))

instance(a,ahead)
instance(h,he)
instance(s,straight-04)
op1(a,h)
ARG1-of(a,s)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / matter-01 :polarity -
            :ARG1 (t2 / that))
      :manner (e / earnest-01)
      :time (t / then))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m,matter-01)
instance(t2,that)
instance(e,earnest-01)
instance(t,then)
ARG0(s,p)
mod(p,l)
ARG1(s,m)
polarity(m,-)
ARG1(m,t2)
manner(s,e)
time(s,t)

(s / small
      :degree (s2 / so)
      :domain (e / everything
            :location (l / live-01
                  :ARG0 (i / i))))

instance(s,small)
instance(s2,so)
instance(e,everything)
instance(l,live-01)
instance(i,i)
degree(s,s2)
domain(s,e)
location(e,l)
ARG0(l,i)

(a / and
      :op2 (a2 / add-01
            :ARG0 (h / he)
            :ARG1 (g / go-02
                  :ARG0 (s2 / somebody :polarity -)
                  :ARG4 (f / far
                        :degree (v / very))
                  :direction (a3 / ahead
                        :op1 s2
                        :ARG1-of (s3 / straight-04)))
            :manner (s / sad-02
                  :quant (h2 / hint)
                  :ARG1-of (p / possible-01))))

instance(a,and)
instance(a2,add-01)
instance(h,he)
instance(g,go-02)
instance(s2,somebody)
instance(f,far)
instance(v,very)
instance(a3,ahead)
instance(s3,straight-04)
instance(s,sad-02)
instance(h2,hint)
instance(p,possible-01)
op2(a,a2)
ARG0(a2,h)
ARG1(a2,g)
ARG0(g,s2)
polarity(s2,-)
ARG4(g,f)
degree(f,v)
direction(g,a3)
op1(a3,s2)
ARG1-of(a3,s3)
manner(a2,s)
quant(s,h2)
ARG1-of(s,p)

(c / chapter
  :mod 4)

instance(c,chapter)
mod(c,4)

(c2 / cause-01
      :ARG1 (l / learn-01
            :ARG0 (i / i)
            :ARG1 (f / fact
                  :ord (o / ordinal-entity :value 2)
                  :ARG1-of (i2 / important-01
                        :degree (g / great))
                  :domain (h2 / have-degree-91
                        :ARG1 (p / planet
                              :ARG3-of (c / come-01
                                    :ARG1 (p2 / prince
                                          :mod (l3 / little))))
                        :ARG2 (l2 / large)
                        :ARG3 (m / more
                              :quant (s2 / scarce))
                        :ARG4 (h / house)))))

instance(c2,cause-01)
instance(l,learn-01)
instance(i,i)
instance(f,fact)
instance(o,ordinal-entity)
instance(i2,important-01)
instance(g,great)
instance(h2,have-degree-91)
instance(p,planet)
instance(c,come-01)
instance(p2,prince)
instance(l3,little)
instance(l2,large)
instance(m,more)
instance(s2,scarce)
instance(h,house)
ARG1(c2,l)
ARG0(l,i)
ARG1(l,f)
ord(f,o)
value(o,2)
ARG1-of(f,i2)
degree(i2,g)
domain(f,h2)
ARG1(h2,p)
ARG3-of(p,c)
ARG1(c,p2)
mod(p2,l3)
ARG2(h2,l2)
ARG3(h2,m)
quant(m,s2)
ARG4(h2,h)

(c / contrast-01
      :ARG2 (s / surprise-01 :polarity -
            :ARG0 (t / that)
            :ARG1 (i / i)
            :degree (m / much)
            :ARG1-of (r / real-04)))

instance(c,contrast-01)
instance(s,surprise-01)
instance(t,that)
instance(i,i)
instance(m,much)
instance(r,real-04)
ARG2(c,s)
polarity(s,-)
ARG0(s,t)
ARG1(s,i)
degree(s,m)
ARG1-of(s,r)

(k / know-01
      :ARG0 (i / i)
      :ARG1 (e / exist-01
            :ARG1 (a2 / and
                  :op1 (p / planet
                        :mod (g / great)
                        :example (p2 / planet :wiki "Earth" :name (n / name :op1 "Earth"))
                        :example (p3 / planet :wiki "Jupiter" :name (n2 / name :op1 "Jupiter"))
                        :example (p4 / planet :wiki "Mars" :name (n3 / name :op1 "Mars"))
                        :example (p5 / planet :wiki "Venus" :name (n4 / name :op1 "Venus"))
                        :ARG1-of (n5 / name-01
                              :ARG0 (w3 / we)))
                  :op2 (p7 / planet
                        :ARG2-of (i2 / include-91
                              :ARG1 (p6 / planet
                                    :ARG1-of (h / have-degree-91
                                          :ARG2 (s2 / small)
                                          :ARG3 (s3 / so)
                                          :ARG6 (d / difficult
                                                :domain (s4 / see-01
                                                      :ARG1 p6
                                                      :instrument (t / telescope))))))
                        :mod (o / other)
                        :quant (m / multiple :op1 100)
                        :mod (a / also))))
      :mod (w / well
            :degree (v / very)))

instance(k,know-01)
instance(i,i)
instance(e,exist-01)
instance(a2,and)
instance(p,planet)
instance(g,great)
instance(p2,planet)
instance(n,name)
instance(p3,planet)
instance(n2,name)
instance(p4,planet)
instance(n3,name)
instance(p5,planet)
instance(n4,name)
instance(n5,name-01)
instance(w3,we)
instance(p7,planet)
instance(i2,include-91)
instance(p6,planet)
instance(h,have-degree-91)
instance(s2,small)
instance(s3,so)
instance(d,difficult)
instance(s4,see-01)
instance(t,telescope)
instance(o,other)
instance(m,multiple)
instance(a,also)
instance(w,well)
instance(v,very)
ARG0(k,i)
ARG1(k,e)
ARG1(e,a2)
op1(a2,p)
mod(p,g)
example(p,p2)
wiki(p2,"Earth")
name(p2,n)
op1(n,"Earth")
example(p,p3)
wiki(p3,"Jupiter")
name(p3,n2)
op1(n2,"Jupiter")
example(p,p4)
wiki(p4,"Mars")
name(p4,n3)
op1(n3,"Mars")
example(p,p5)
wiki(p5,"Venus")
name(p5,n4)
op1(n4,"Venus")
ARG1-of(p,n5)
ARG0(n5,w3)
op2(a2,p7)
ARG2-of(p7,i2)
ARG1(i2,p6)
ARG1-of(p6,h)
ARG2(h,s2)
ARG3(h,s3)
ARG6(h,d)
domain(d,s4)
ARG1(s4,p6)
instrument(s4,t)
mod(p7,o)
quant(p7,m)
op1(m,100)
mod(p7,a)
mod(k,w)
degree(w,v)

(g / give-01
      :ARG0 (a / astronomer)
      :ARG1 (n2 / number)
      :ARG2 (t / thing :quant 1
            :ARG1-of (i / include-91
                  :ARG2 (t2 / this)))
      :mod (o2 / only)
      :time (d / discover-01
            :ARG0 a
            :ARG1 t)
      :ARG1-of (i2 / instead-of-91
            :ARG2 (n3 / name-01
                  :ARG0 a
                  :ARG1 t)))

instance(g,give-01)
instance(a,astronomer)
instance(n2,number)
instance(t,thing)
instance(i,include-91)
instance(t2,this)
instance(o2,only)
instance(d,discover-01)
instance(i2,instead-of-91)
instance(n3,name-01)
ARG0(g,a)
ARG1(g,n2)
ARG2(g,t)
quant(t,1)
ARG1-of(t,i)
ARG2(i,t2)
mod(g,o2)
time(g,d)
ARG0(d,a)
ARG1(d,t)
ARG1-of(g,i2)
ARG2(i2,n3)
ARG0(n3,a)
ARG1(n3,t)

(p / possible-01
      :ARG1 (c / call-01
            :ARG0 (h / he)
            :ARG1 (i / it)
            :ARG2 (n2 / name :op1 "Asteroid" :op2 325)
            :ARG0-of (e / exemplify-01)))

instance(p,possible-01)
instance(c,call-01)
instance(h,he)
instance(i,it)
instance(n2,name)
instance(e,exemplify-01)
ARG1(p,c)
ARG0(c,h)
ARG1(c,i)
ARG2(c,n2)
op1(n2,"Asteroid")
op2(n2,325)
ARG0-of(c,e)

(c / cause-01
      :ARG0 (r / reason
            :ARG1-of (s / serious-02))
      :ARG1 (b / believe-01
            :ARG0 (i / i)
            :ARG1 (c2 / come-01
                  :ARG1 (p2 / prince
                        :mod (l / little))
                  :ARG3 (a / asteroid :wiki - :name (n4 / name :op1 "B-612")
                        :domain (p / planet)))))

instance(c,cause-01)
instance(r,reason)
instance(s,serious-02)
instance(b,believe-01)
instance(i,i)
instance(c2,come-01)
instance(p2,prince)
instance(l,little)
instance(a,asteroid)
instance(n4,name)
instance(p,planet)
ARG0(c,r)
ARG1-of(r,s)
ARG1(c,b)
ARG0(b,i)
ARG1(b,c2)
ARG1(c2,p2)
mod(p2,l)
ARG3(c2,a)
wiki(a,-)
name(a,n4)
op1(n4,"B-612")
domain(a,p)

(s / see-01
      :ARG1 (a / asteroid
            :mod (t / this))
      :instrument (t2 / telescope)
      :ARG1-of (h / have-frequency-91
            :ARG2 1
            :mod (o / only)))

instance(s,see-01)
instance(a,asteroid)
instance(t,this)
instance(t2,telescope)
instance(h,have-frequency-91)
instance(o,only)
ARG1(s,a)
mod(a,t)
instrument(s,t2)
ARG1-of(s,h)
ARG2(h,1)
mod(h,o)

(s / see-01
      :ARG0 (a / astronomer
            :mod (c / country :wiki "Turkey"
                  :name (n / name :op1 "Turkey")))
      :time (d / date-entity :year 1909))

instance(s,see-01)
instance(a,astronomer)
instance(c,country)
instance(n,name)
instance(d,date-entity)
ARG0(s,a)
mod(a,c)
wiki(c,"Turkey")
name(c,n)
op1(n,"Turkey")
time(s,d)
year(d,1909)

(p / present-01
      :ARG0 a
      :ARG1 (i / it)
      :ARG2 (o / organization :wiki "International_Astronautical_Congress" :name (n / name :op1 "International" :op2 "Astronomical" :op3 "Congress"))
      :manner (d2 / demonstrate-01
            :ARG0 a
            :mod (g / great))
      :time (d3 / discover-01
            :ARG0 (a / astronomer)))

instance(p,present-01)
instance(i,it)
instance(o,organization)
instance(n,name)
instance(d2,demonstrate-01)
instance(g,great)
instance(d3,discover-01)
instance(a,astronomer)
ARG0(p,a)
ARG1(p,i)
ARG2(p,o)
wiki(o,"International_Astronautical_Congress")
name(o,n)
op1(n,"International")
op2(n,"Astronomical")
op3(n,"Congress")
manner(p,d2)
ARG0(d2,a)
mod(d2,g)
time(p,d3)
ARG0(d3,a)

(c4 / contrast-01
      :ARG2 (c / costume-01
            :ARG1 (h / he)
            :manner (c2 / country :wiki "Turkey"
                  :name (n / name :op1 "Turkey"))
            :ARG0-of (c3 / cause-01
                  :ARG1 (b2 / believe-01
                        :ARG0 (s / somebody :polarity -)
                        :ARG1 (t / thing
                              :ARG1-of (s2 / say-01
                                    :ARG0 h))))))

instance(c4,contrast-01)
instance(c,costume-01)
instance(h,he)
instance(c2,country)
instance(n,name)
instance(c3,cause-01)
instance(b2,believe-01)
instance(s,somebody)
instance(t,thing)
instance(s2,say-01)
ARG2(c4,c)
ARG1(c,h)
manner(c,c2)
wiki(c2,"Turkey")
name(c2,n)
op1(n,"Turkey")
ARG0-of(c,c3)
ARG1(c3,b2)
ARG0(b2,s)
polarity(s,-)
ARG1(b2,t)
ARG1-of(t,s2)
ARG0(s2,h)

(r / resemble-01
      :ARG1 (g / grown-up)
      :ARG2 (t / that))

instance(r,resemble-01)
instance(g,grown-up)
instance(t,that)
ARG1(r,g)
ARG2(r,t)

(c5 / contrast-01
      :ARG2 (m / make-01
            :ARG0 (p3 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country :wiki "Turkey" :name (n / name :op1 "Turkey"))
                        :ARG2 (d / dictator)))
            :ARG1 (l / law
                  :topic (c2 / change-01
                        :ARG0 (s / subject
                              :poss p3)
                        :ARG3 (c3 / costume
                              :mod (c4 / continent :wiki "Europe" :name (n2 / name :op1 "Europe")))
                        :manner (t / threaten-01
                              :ARG0 d
                              :ARG1 (p / penalize-01
                                    :ARG1 s
                                    :topic (d2 / die-01
                                          :ARG1 s))
                              :ARG2 s)))
            :ARG2-of (f / fortunate-01
                  :ARG1 (r / reputation
                        :poss (p2 / planet :wiki - :name (n3 / name :op1 "Asteroid" :op2 "B-612"))))))

instance(c5,contrast-01)
instance(m,make-01)
instance(p3,person)
instance(h,have-org-role-91)
instance(c,country)
instance(n,name)
instance(d,dictator)
instance(l,law)
instance(c2,change-01)
instance(s,subject)
instance(c3,costume)
instance(c4,continent)
instance(n2,name)
instance(t,threaten-01)
instance(p,penalize-01)
instance(d2,die-01)
instance(f,fortunate-01)
instance(r,reputation)
instance(p2,planet)
instance(n3,name)
ARG2(c5,m)
ARG0(m,p3)
ARG0-of(p3,h)
ARG1(h,c)
wiki(c,"Turkey")
name(c,n)
op1(n,"Turkey")
ARG2(h,d)
ARG1(m,l)
topic(l,c2)
ARG0(c2,s)
poss(s,p3)
ARG3(c2,c3)
mod(c3,c4)
wiki(c4,"Europe")
name(c4,n2)
op1(n2,"Europe")
manner(c2,t)
ARG0(t,d)
ARG1(t,p)
ARG1(p,s)
topic(p,d2)
ARG1(d2,s)
ARG2(t,s)
ARG2-of(m,f)
ARG1(f,r)
poss(r,p2)
wiki(p2,-)
name(p2,n3)
op1(n3,"Asteroid")
op2(n3,"B-612")

(c / cause-01
      :ARG1 (d4 / demonstrate-01
            :ARG0 (a / astronomer
                  :ARG1-of (d2 / dress-01
                        :ARG2 (a4 / and
                              :op1 (s / style)
                              :op2 (e / elegance)
                              :ARG0-of (i / impress-01))))
            :time (d3 / date-entity :year 1920)
            :mod (a3 / again
                  :mod (a2 / all-over))))

instance(c,cause-01)
instance(d4,demonstrate-01)
instance(a,astronomer)
instance(d2,dress-01)
instance(a4,and)
instance(s,style)
instance(e,elegance)
instance(i,impress-01)
instance(d3,date-entity)
instance(a3,again)
instance(a2,all-over)
ARG1(c,d4)
ARG0(d4,a)
ARG1-of(a,d2)
ARG2(d2,a4)
op1(a4,s)
op2(a4,e)
ARG0-of(a4,i)
time(d4,d3)
year(d3,1920)
mod(d4,a3)
mod(a3,a2)

(a / and
  :op2 (a2 / accept-01
         :ARG0 (e / everybody)
         :ARG1 (t3 / thing
                 :ARG1-of (r / report-01
                            :ARG0 (h2 / he)))
         :time (t / time
                 :mod (t2 / this))))

instance(a,and)
instance(a2,accept-01)
instance(e,everybody)
instance(t3,thing)
instance(r,report-01)
instance(h2,he)
instance(t,time)
instance(t2,this)
op2(a,a2)
ARG0(a2,e)
ARG1(a2,t3)
ARG1-of(t3,r)
ARG0(r,h2)
time(a2,t)
mod(t,t2)

(a / account-01
  :ARG1 a3
  :ARG2 (a2 / and
          :op1 (g / grown-up)
          :op2 (w / way
                 :poss g))
  :condition (a3 / and
               :op1 (t / tell-01
                      :ARG0 (i / i)
                      :ARG1 (d / detail
                              :mod (t2 / this)
                              :topic (a4 / asteroid))
                      :ARG2 (y / you))
               :op2 (n3 / note-01
                      :ARG0 i
                      :ARG1 (n4 / number
                              :poss a4)
                      :ARG2 y)))

instance(a,account-01)
instance(a2,and)
instance(g,grown-up)
instance(w,way)
instance(a3,and)
instance(t,tell-01)
instance(i,i)
instance(d,detail)
instance(t2,this)
instance(a4,asteroid)
instance(y,you)
instance(n3,note-01)
instance(n4,number)
ARG1(a,a3)
ARG2(a,a2)
op1(a2,g)
op2(a2,w)
poss(w,g)
condition(a,a3)
op1(a3,t)
ARG0(t,i)
ARG1(t,d)
mod(d,t2)
topic(d,a4)
ARG2(t,y)
op2(a3,n3)
ARG0(n3,i)
ARG1(n3,n4)
poss(n4,a4)
ARG2(n3,y)

(q2 / question-01 :polarity -
      :ARG0 t
      :ARG1 (m / matter
            :mod (e / essential))
      :ARG2 (y / you)
      :time (t3 / tell-01
            :ARG0 y
            :ARG1 (m2 / make-01
                  :ARG0 y
                  :ARG1 (h / have-rel-role-91
                        :ARG0 (p / person)
                        :ARG1 y
                        :ARG2 (f / friend)
                        :ARG1-of (n / new-01)))
            :ARG2 (t / they))
      :time (e2 / ever)
      :mod (a2 / any))

instance(q2,question-01)
instance(m,matter)
instance(e,essential)
instance(y,you)
instance(t3,tell-01)
instance(m2,make-01)
instance(h,have-rel-role-91)
instance(p,person)
instance(f,friend)
instance(n,new-01)
instance(t,they)
instance(e2,ever)
instance(a2,any)
polarity(q2,-)
ARG0(q2,t)
ARG1(q2,m)
mod(m,e)
ARG2(q2,y)
time(q2,t3)
ARG0(t3,y)
ARG1(t3,m2)
ARG0(m2,y)
ARG1(m2,h)
ARG0(h,p)
ARG1(h,y)
ARG2(h,f)
ARG1-of(h,n)
ARG2(t3,t)
time(q2,e2)
mod(q2,a2)

(s / say-01
  :ARG0 (t / they)
  :ARG1 (s2 / sound-01
          :ARG1 (v / voice
                  :poss (h / he))
          :ARG2 (a2 / amr-unknown))
  :ARG2 (y / you)
  :time (e / ever)
  :polarity -)

instance(s,say-01)
instance(t,they)
instance(s2,sound-01)
instance(v,voice)
instance(h,he)
instance(a2,amr-unknown)
instance(y,you)
instance(e,ever)
ARG0(s,t)
ARG1(s,s2)
ARG1(s2,v)
poss(v,h)
ARG2(s2,a2)
ARG2(s,y)
time(s,e)
polarity(s,-)

(l / love-01
      :ARG0 (h / he)
      :ARG1 (a2 / amr-unknown
            :mod (g2 / game)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (g / good-02)
                  :ARG3 (m / most))))

instance(l,love-01)
instance(h,he)
instance(a2,amr-unknown)
instance(g2,game)
instance(h2,have-degree-91)
instance(g,good-02)
instance(m,most)
ARG0(l,h)
ARG1(l,a2)
mod(a2,g2)
ARG1-of(a2,h2)
ARG2(h2,g)
ARG3(h2,m)

(c / collect-01
      :ARG0 (h / he)
      :ARG1 (b / butterfly)
      :polarity (a / amr-unknown))

instance(c,collect-01)
instance(h,he)
instance(b,butterfly)
instance(a,amr-unknown)
ARG0(c,h)
ARG1(c,b)
polarity(c,a)

(d / demand-01
      :ARG0 (t / they)
      :ARG1 (a2 / age-01
            :ARG1 (h2 / he)
            :ARG2 (a3 / amr-unknown))
      :ARG1-of (i2 / instead-of-91))

instance(d,demand-01)
instance(t,they)
instance(a2,age-01)
instance(h2,he)
instance(a3,amr-unknown)
instance(i2,instead-of-91)
ARG0(d,t)
ARG1(d,a2)
ARG1(a2,h2)
ARG2(a2,a3)
ARG1-of(d,i2)

(h / have-rel-role-91
      :ARG0 (p / person
            :quant (a / amr-unknown))
      :ARG1 (h2 / he)
      :ARG2 (b / brother))

instance(h,have-rel-role-91)
instance(p,person)
instance(a,amr-unknown)
instance(h2,he)
instance(b,brother)
ARG0(h,p)
quant(p,a)
ARG1(h,h2)
ARG2(h,b)

(w / weigh-01
      :ARG1 (h / he)
      :ARG3 (a / amr-unknown))

instance(w,weigh-01)
instance(h,he)
instance(a,amr-unknown)
ARG1(w,h)
ARG3(w,a)

(m / make-05
      :ARG0 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (h / he)
                  :ARG2 (f / father)))
      :ARG1 (m2 / monetary-quantity
            :quant (a / amr-unknown)))

instance(m,make-05)
instance(p,person)
instance(h2,have-rel-role-91)
instance(h,he)
instance(f,father)
instance(m2,monetary-quantity)
instance(a,amr-unknown)
ARG0(m,p)
ARG0-of(p,h2)
ARG1(h2,h)
ARG2(h2,f)
ARG1(m,m2)
quant(m2,a)

(t / think-01
      :ARG0 (t2 / they)
      :ARG1 (l / learn-01
            :ARG0 t2
            :ARG1 (a / anything
                  :topic (h / he))
            :source (f / figure
                  :mod (t3 / this
                        :mod (o / only)))))

instance(t,think-01)
instance(t2,they)
instance(l,learn-01)
instance(a,anything)
instance(h,he)
instance(f,figure)
instance(t3,this)
instance(o,only)
ARG0(t,t2)
ARG1(t,l)
ARG0(l,t2)
ARG1(l,a)
topic(a,h)
source(l,f)
mod(f,t3)
mod(t3,o)

(p / possible-01 :polarity -
      :ARG1 (g / get-01
            :ARG0 g2
            :ARG1 (i / idea
                  :mod (a / any)
                  :mod (a2 / at-all)
                  :topic h2))
      :condition (s / say-01
            :ARG0 (y / you)
            :ARG1 (s2 / see-01
                  :ARG0 y
                  :ARG1 (h2 / house
                        :ARG1-of (m / make-01
                              :ARG2 (b / brick
                                    :mod (r / rosy)))
                        :accompanier (a4 / and
                              :op1 (g3 / geranium
                                    :location (w / window))
                              :op2 (d / dove
                                    :location (r2 / roof)))
                        :ARG1-of (b2 / beautiful-02)))
            :ARG2 (g2 / grown-up)))

instance(p,possible-01)
instance(g,get-01)
instance(i,idea)
instance(a,any)
instance(a2,at-all)
instance(s,say-01)
instance(y,you)
instance(s2,see-01)
instance(h2,house)
instance(m,make-01)
instance(b,brick)
instance(r,rosy)
instance(a4,and)
instance(g3,geranium)
instance(w,window)
instance(d,dove)
instance(r2,roof)
instance(b2,beautiful-02)
instance(g2,grown-up)
polarity(p,-)
ARG1(p,g)
ARG0(g,g2)
ARG1(g,i)
mod(i,a)
mod(i,a2)
topic(i,h2)
condition(p,s)
ARG0(s,y)
ARG1(s,s2)
ARG0(s2,y)
ARG1(s2,h2)
ARG1-of(h2,m)
ARG2(m,b)
mod(b,r)
accompanier(h2,a4)
op1(a4,g3)
location(g3,w)
op2(a4,d)
location(d,r2)
ARG1-of(h2,b2)
ARG2(s,g2)

(o / obligate-01
  :ARG1 y
  :ARG2 (s / say-01
          :ARG0 (y / you)
          :ARG1 (s2 / see-01
                  :ARG0 y
                  :ARG1 (h / house
                          :ARG1-of (c / cost-01
                                     :ARG2 (m / monetary-quantity
                                             :unit (d / dollar)
                                             :quant 20000))))
          :ARG2 (t / they)))

instance(o,obligate-01)
instance(s,say-01)
instance(y,you)
instance(s2,see-01)
instance(h,house)
instance(c,cost-01)
instance(m,monetary-quantity)
instance(d,dollar)
instance(t,they)
ARG1(o,y)
ARG2(o,s)
ARG0(s,y)
ARG1(s,s2)
ARG0(s2,y)
ARG1(s2,h)
ARG1-of(h,c)
ARG2(c,m)
unit(m,d)
quant(m,20000)
ARG2(s,t)

(e / exclaim-01
  :ARG0 (t / they)
  :ARG1 (p2 / pretty
          :domain (h2 / house
                    :mod (t4 / that)))
  :time (t3 / then))

instance(e,exclaim-01)
instance(t,they)
instance(p2,pretty)
instance(h2,house)
instance(t4,that)
instance(t3,then)
ARG0(e,t)
ARG1(e,p2)
domain(p2,h2)
mod(h2,t4)
time(e,t3)

(p / possible-01
      :ARG1 (s2 / say-01
            :ARG0 (y / you)
            :ARG1 (p2 / prove-01
                  :ARG0 (a / and
                        :op1 (c / charm-01
                              :ARG0 (h / he))
                        :op2 (l / laugh-01
                              :ARG0 h)
                        :op3 (l2 / look-01
                              :ARG0 h
                              :ARG1 (s3 / sheep)))
                  :ARG1 (e / exist-01
                        :ARG1 (p3 / prince
                              :mod (l3 / little))))
            :ARG2 (t / they)
            :manner (j / just-so)))

instance(p,possible-01)
instance(s2,say-01)
instance(y,you)
instance(p2,prove-01)
instance(a,and)
instance(c,charm-01)
instance(h,he)
instance(l,laugh-01)
instance(l2,look-01)
instance(s3,sheep)
instance(e,exist-01)
instance(p3,prince)
instance(l3,little)
instance(t,they)
instance(j,just-so)
ARG1(p,s2)
ARG0(s2,y)
ARG1(s2,p2)
ARG0(p2,a)
op1(a,c)
ARG0(c,h)
op2(a,l)
ARG0(l,h)
op3(a,l2)
ARG0(l2,h)
ARG1(l2,s3)
ARG1(p2,e)
ARG1(e,p3)
mod(p3,l3)
ARG2(s2,t)
manner(s2,j)

(p / prove-01
  :ARG0 (w / want-01
          :ARG0 (a / anybody)
          :ARG1 (s / sheep))
  :ARG1 (e / exist-01
          :ARG1 a))

instance(p,prove-01)
instance(w,want-01)
instance(a,anybody)
instance(s,sheep)
instance(e,exist-01)
ARG0(p,w)
ARG0(w,a)
ARG1(w,s)
ARG1(p,e)
ARG1(e,a)

(a / and
      :op2 (d / do-02
            :ARG0 (t / tell-01
                  :ARG1 (t3 / that)
                  :ARG2 (t2 / they))
            :ARG1 (g / good-04
                  :ARG1 (a2 / amr-unknown))))

instance(a,and)
instance(d,do-02)
instance(t,tell-01)
instance(t3,that)
instance(t2,they)
instance(g,good-04)
instance(a2,amr-unknown)
op2(a,d)
ARG0(d,t)
ARG1(t,t3)
ARG2(t,t2)
ARG1(d,g)
ARG1(g,a2)

(a / and
      :op1 (s / shrug-01
            :ARG0 (t / they)
            :ARG1 (s2 / shoulder
                  :poss t))
      :op2 (t2 / treat-01
            :ARG0 t
            :ARG1 (y / you)
            :ARG2 (c / child)))

instance(a,and)
instance(s,shrug-01)
instance(t,they)
instance(s2,shoulder)
instance(t2,treat-01)
instance(y,you)
instance(c,child)
op1(a,s)
ARG0(s,t)
ARG1(s,s2)
poss(s2,t)
op2(a,t2)
ARG0(t2,t)
ARG1(t2,y)
ARG2(t2,c)

(c3 / contrast-01
      :ARG2 (a / and
            :op1 (c / convince-01
                  :ARG1 (t / they))
            :op2 (l / leave-14
                  :ARG0 t
                  :ARG1 (p2 / peace
                        :topic (q2 / question-01 :polarity -
                              :ARG0 t)
                        :domain y))
            :condition (s / say-01
                  :ARG0 (y / you)
                  :ARG1 (c2 / come-01
                        :ARG1 (h / he)
                        :ARG3 (p / planet :wiki - :name (n / name :op1 "Asteroid" :op2 "B-612")))
                  :ARG2 t)))

instance(c3,contrast-01)
instance(a,and)
instance(c,convince-01)
instance(t,they)
instance(l,leave-14)
instance(p2,peace)
instance(q2,question-01)
instance(s,say-01)
instance(y,you)
instance(c2,come-01)
instance(h,he)
instance(p,planet)
instance(n,name)
ARG2(c3,a)
op1(a,c)
ARG1(c,t)
op2(a,l)
ARG0(l,t)
ARG1(l,p2)
topic(p2,q2)
polarity(q2,-)
ARG0(q2,t)
domain(p2,y)
condition(a,s)
ARG0(s,y)
ARG1(s,c2)
ARG1(c2,h)
ARG3(c2,p)
wiki(p,-)
name(p,n)
op1(n,"Asteroid")
op2(n,"B-612")
ARG2(s,t)

(r / resemble-01
      :ARG1 (t / they)
      :ARG2 (t2 / that))

instance(r,resemble-01)
instance(t,they)
instance(t2,that)
ARG1(r,t)
ARG2(r,t2)

(o / obligate-01
      :ARG1 (o2 / one)
      :ARG2 (h / hold-01 :polarity -
            :ARG0 o2
            :ARG1 (i / it)
            :ARG2 (a / against
                  :op1 (t / they))))

instance(o,obligate-01)
instance(o2,one)
instance(h,hold-01)
instance(i,it)
instance(a,against)
instance(t,they)
ARG1(o,o2)
ARG2(o,h)
polarity(h,-)
ARG0(h,o2)
ARG1(h,i)
ARG2(h,a)
op1(a,t)

(r / recommend-01
      :ARG1 (s / show-01
            :ARG0 (c / child)
            :ARG1 (f / forbearance
                  :mod (g / great))
            :ARG2 (g2 / grown-up)
            :time (a / always)))

instance(r,recommend-01)
instance(s,show-01)
instance(c,child)
instance(f,forbearance)
instance(g,great)
instance(g2,grown-up)
instance(a,always)
ARG1(r,s)
ARG0(s,c)
ARG1(s,f)
mod(f,g)
ARG2(s,g2)
time(s,a)

(c2 / contrast-01
  :ARG2 (c / certain
          :domain (i2 / indifferent-01
                    :ARG1 (w2 / we
                            :ARG0-of (u / understand-01
                                       :ARG1 (l / life)))
                    :ARG2 (f2 / figure))))

instance(c2,contrast-01)
instance(c,certain)
instance(i2,indifferent-01)
instance(w2,we)
instance(u,understand-01)
instance(l,life)
instance(f2,figure)
ARG2(c2,c)
domain(c,i2)
ARG1(i2,w2)
ARG0-of(w2,u)
ARG1(u,l)
ARG2(i2,f2)

(l / like-02
  :ARG0 (i / i)
  :ARG1 (b / begin-01
          :ARG0 i
          :ARG1 (s / story
                  :mod (t / this))
          :manner (f / fashion
                    :mod (t2 / tale
                           :mod (f2 / fairy)))))

instance(l,like-02)
instance(i,i)
instance(b,begin-01)
instance(s,story)
instance(t,this)
instance(f,fashion)
instance(t2,tale)
instance(f2,fairy)
ARG0(l,i)
ARG1(l,b)
ARG0(b,i)
ARG1(b,s)
mod(s,t)
manner(b,f)
mod(f,t2)
mod(t2,f2)

(l / like-02
      :ARG0 (i / i)
      :ARG1 (s / say-01
            :ARG0 i
            :ARG1 (p / prince
                  :mod (l2 / little)
                  :ARG0-of (l3 / live-01
                        :location (p2 / planet
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (b / big)
                                    :ARG3 (m / more
                                          :quant (s2 / scarce))
                                    :ARG4 p)))
                  :ARG0-of (n / need-01
                        :ARG1 (s3 / sheep))
                  :time (o / once-upon-a-time))))

instance(l,like-02)
instance(i,i)
instance(s,say-01)
instance(p,prince)
instance(l2,little)
instance(l3,live-01)
instance(p2,planet)
instance(h,have-degree-91)
instance(b,big)
instance(m,more)
instance(s2,scarce)
instance(n,need-01)
instance(s3,sheep)
instance(o,once-upon-a-time)
ARG0(l,i)
ARG1(l,s)
ARG0(s,i)
ARG1(s,p)
mod(p,l2)
ARG0-of(p,l3)
location(l3,p2)
ARG1-of(p2,h)
ARG2(h,b)
ARG3(h,m)
quant(m,s2)
ARG4(h,p)
ARG0-of(p,n)
ARG1(n,s3)
time(p,o)

(g / give-01
      :ARG0 (t / that)
      :ARG1 (t3 / truth
            :quant (a / air
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g2 / great)
                        :ARG3 (m / more
                              :quant (m2 / much)))))
      :ARG2 (s / story
            :poss (i / i))
      :beneficiary (p / person
            :ARG0-of (u / understand-01
                  :ARG1 (l / life))))

instance(g,give-01)
instance(t,that)
instance(t3,truth)
instance(a,air)
instance(h,have-degree-91)
instance(g2,great)
instance(m,more)
instance(m2,much)
instance(s,story)
instance(i,i)
instance(p,person)
instance(u,understand-01)
instance(l,life)
ARG0(g,t)
ARG1(g,t3)
quant(t3,a)
ARG1-of(a,h)
ARG2(h,g2)
ARG3(h,m)
quant(m,m2)
ARG2(g,s)
poss(s,i)
beneficiary(g,p)
ARG0-of(p,u)
ARG1(u,l)

(c / cause-01
      :ARG0 (w / want-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (r / read-01
                  :ARG0 (a / anyone)
                  :ARG1 (b / book
                        :poss i)
                  :manner (c2 / care-04 :polarity -
                        :ARG0 a))))

instance(c,cause-01)
instance(w,want-01)
instance(i,i)
instance(r,read-01)
instance(a,anyone)
instance(b,book)
instance(c2,care-04)
ARG0(c,w)
polarity(w,-)
ARG0(w,i)
ARG1(w,r)
ARG0(r,a)
ARG1(r,b)
poss(b,i)
manner(r,c2)
polarity(c2,-)
ARG0(c2,a)

(h / have-quant-91
      :ARG1 (g / grief
            :ARG1-of (s / suffer-01
                  :ARG0 (i / i)
                  :ARG1-of (c / cause-01
                        :ARG0 (s2 / set-down-09
                              :ARG0 i
                              :ARG1 (m2 / memory
                                    :mod (t2 / this))))))
      :ARG2 (m / much)
      :ARG3 (t / too))

instance(h,have-quant-91)
instance(g,grief)
instance(s,suffer-01)
instance(i,i)
instance(c,cause-01)
instance(s2,set-down-09)
instance(m2,memory)
instance(t2,this)
instance(m,much)
instance(t,too)
ARG1(h,g)
ARG1-of(g,s)
ARG0(s,i)
ARG1-of(s,c)
ARG0(c,s2)
ARG0(s2,i)
ARG1(s2,m2)
mod(m2,t2)
ARG2(h,m)
ARG3(h,t)

(g / go-02
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (f / friend)))
      :direction (a / away
            :op1 i)
      :accompanier (s / sheep
            :poss p)
      :time (b / before
            :op1 (n / now)
            :quant (t / temporal-quantity :quant 6
                  :unit (y / year)))
      :time (a3 / already))

instance(g,go-02)
instance(p,person)
instance(h,have-rel-role-91)
instance(i,i)
instance(f,friend)
instance(a,away)
instance(s,sheep)
instance(b,before)
instance(n,now)
instance(t,temporal-quantity)
instance(y,year)
instance(a3,already)
ARG0(g,p)
ARG0-of(p,h)
ARG1(h,i)
ARG2(h,f)
direction(g,a)
op1(a,i)
accompanier(g,s)
poss(s,p)
time(g,b)
op1(b,n)
quant(b,t)
quant(t,6)
unit(t,y)
time(g,a3)

(e / ensure-01
      :ARG1 (f / forget-01 :polarity -
            :ARG0 i
            :ARG1 h)
      :condition (t / try-01
            :ARG0 (i / i)
            :ARG1 (d / describe-01
                  :ARG0 i
                  :ARG1 (h / he)
                  :location (h2 / here))))

instance(e,ensure-01)
instance(f,forget-01)
instance(t,try-01)
instance(i,i)
instance(d,describe-01)
instance(h,he)
instance(h2,here)
ARG1(e,f)
polarity(f,-)
ARG0(f,i)
ARG1(f,h)
condition(e,t)
ARG0(t,i)
ARG1(t,d)
ARG0(d,i)
ARG1(d,h)
location(d,h2)

(s / sad-02
      :ARG0 (f3 / forget-01
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (f / friend)))))

instance(s,sad-02)
instance(f3,forget-01)
instance(p,person)
instance(h,have-rel-role-91)
instance(f,friend)
ARG0(s,f3)
ARG1(f3,p)
ARG0-of(p,h)
ARG2(h,f)

(h / have-03 :polarity -
      :ARG0 (e / everyone)
      :ARG1 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 e
                  :ARG2 (f / friend))))

instance(h,have-03)
instance(e,everyone)
instance(p,person)
instance(h2,have-rel-role-91)
instance(f,friend)
polarity(h,-)
ARG0(h,e)
ARG1(h,p)
ARG0-of(p,h2)
ARG1(h2,e)
ARG2(h2,f)

(a / and
      :op2 (p / possible-01
            :ARG1 (r / resemble-01
                  :ARG1 (i / i)
                  :ARG2 (g / grown-up
                        :ARG1-of (i2 / interest-01
                              :ARG2 (a2 / anything
                                    :ARG2-of (e / except-01
                                          :ARG1 (f / figure)))
                              :time (n / no-longer))))
            :condition (f2 / forget-01
                  :ARG0 i
                  :ARG1 (h / he))))

instance(a,and)
instance(p,possible-01)
instance(r,resemble-01)
instance(i,i)
instance(g,grown-up)
instance(i2,interest-01)
instance(a2,anything)
instance(e,except-01)
instance(f,figure)
instance(n,no-longer)
instance(f2,forget-01)
instance(h,he)
op2(a,p)
ARG1(p,r)
ARG1(r,i)
ARG2(r,g)
ARG1-of(g,i2)
ARG2(i2,a2)
ARG2-of(a2,e)
ARG1(e,f)
time(i2,n)
condition(p,f2)
ARG0(f2,i)
ARG1(f2,h)

(b / buy-01
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (b2 / box
                  :ARG0-of (c / contain-01
                        :ARG1 (p / paint)))
            :op2 (p2 / pencil
                  :quant (s / some)))
      :purpose (t2 / that))

instance(b,buy-01)
instance(i,i)
instance(a,and)
instance(b2,box)
instance(c,contain-01)
instance(p,paint)
instance(p2,pencil)
instance(s,some)
instance(t2,that)
ARG0(b,i)
ARG1(b,a)
op1(a,b2)
ARG0-of(b2,c)
ARG1(c,p)
op2(a,p2)
quant(p2,s)
purpose(b,t2)

(h / hard-02
      :ARG1 (t / take-up-31
            :ARG0 (i / i
                  :age (t4 / temporal-quantity
                        :duration-of (m / make-01 :polarity -
                              :ARG1 (p / picture
                                    :mod (a5 / any)
                                    :ARG2-of (e2 / except-01
                                          :ARG1 (a6 / and
                                                :op1 (p2 / picture
                                                      :topic (b / boa
                                                            :mod (c2 / constrictor)
                                                            :direction (f / from
                                                                  :op1 (o / outside))))
                                                :op2 (p3 / picture
                                                      :topic (b2 / boa
                                                            :mod (c3 / constrictor)
                                                            :direction (f2 / from
                                                                  :op1 (i2 / inside)))))))
                              :time (e / ever)
                              :time (s / since
                                    :op1 (a3 / age-01
                                          :ARG1 i
                                          :ARG2 (t6 / temporal-quantity :quant 6
                                                :unit (y2 / year)))))))
            :ARG1 (d / draw-01)
            :mod (a / again))
      :ARG1-of (c / cause-01))

instance(h,hard-02)
instance(t,take-up-31)
instance(i,i)
instance(t4,temporal-quantity)
instance(m,make-01)
instance(p,picture)
instance(a5,any)
instance(e2,except-01)
instance(a6,and)
instance(p2,picture)
instance(b,boa)
instance(c2,constrictor)
instance(f,from)
instance(o,outside)
instance(p3,picture)
instance(b2,boa)
instance(c3,constrictor)
instance(f2,from)
instance(i2,inside)
instance(e,ever)
instance(s,since)
instance(a3,age-01)
instance(t6,temporal-quantity)
instance(y2,year)
instance(d,draw-01)
instance(a,again)
instance(c,cause-01)
ARG1(h,t)
ARG0(t,i)
age(i,t4)
duration-of(t4,m)
polarity(m,-)
ARG1(m,p)
mod(p,a5)
ARG2-of(p,e2)
ARG1(e2,a6)
op1(a6,p2)
topic(p2,b)
mod(b,c2)
direction(b,f)
op1(f,o)
op2(a6,p3)
topic(p3,b2)
mod(b2,c3)
direction(b2,f2)
op1(f2,i2)
time(m,e)
time(m,s)
op1(s,a3)
ARG1(a3,i)
ARG2(a3,t6)
quant(t6,6)
unit(t6,y2)
ARG1(t,d)
mod(t,a)
ARG1-of(h,c)

(t / try-01
      :ARG0 (i / i)
      :ARG1 (m / make-02
            :ARG0 i
            :ARG1 (h / have-degree-91
                  :ARG1 (p / portrait
                        :topic i)
                  :ARG2 (t2 / true-02
                        :ARG1 p
                        :ARG2 (l / life))
                  :ARG3 (e / equal)
                  :ARG4 (p2 / possible-01
                        :ARG1 t2)))
      :mod (c / certain))

instance(t,try-01)
instance(i,i)
instance(m,make-02)
instance(h,have-degree-91)
instance(p,portrait)
instance(t2,true-02)
instance(l,life)
instance(e,equal)
instance(p2,possible-01)
instance(c,certain)
ARG0(t,i)
ARG1(t,m)
ARG0(m,i)
ARG1(m,h)
ARG1(h,p)
topic(p,i)
ARG2(h,t2)
ARG1(t2,p)
ARG2(t2,l)
ARG3(h,e)
ARG4(h,p2)
ARG1(p2,t2)
mod(t,c)

(c / contrast-01
      :ARG2 (s / sure-02 :polarity -
            :ARG0 (i / i)
            :degree (a / at-all)
            :ARG1-of (s2 / succeed-01
                  :ARG0 i)))

instance(c,contrast-01)
instance(s,sure-02)
instance(i,i)
instance(a,at-all)
instance(s2,succeed-01)
ARG2(c,s)
polarity(s,-)
ARG0(s,i)
degree(s,a)
ARG1-of(s,s2)
ARG0(s2,i)

(a / and
      :op1 (g / go-06
            :ARG1 (p2 / picture :quant 1
                  :ARG1-of (d / draw-01))
            :ARG2 (a2 / along)
            :mod (a3 / all-right))
      :op2 (r2 / resemble-01 :polarity -
            :ARG1 (p / picture
                  :ARG1-of (d2 / draw-01)
                  :mod (a4 / another))
            :ARG2 (s / subject
                  :poss p)))

instance(a,and)
instance(g,go-06)
instance(p2,picture)
instance(d,draw-01)
instance(a2,along)
instance(a3,all-right)
instance(r2,resemble-01)
instance(p,picture)
instance(d2,draw-01)
instance(a4,another)
instance(s,subject)
op1(a,g)
ARG1(g,p2)
quant(p2,1)
ARG1-of(p2,d)
ARG2(g,a2)
mod(g,a3)
op2(a,r2)
polarity(r2,-)
ARG1(r2,p)
ARG1-of(p,d2)
mod(p,a4)
ARG2(r2,s)
poss(s,p)

(e / err-01
      :ARG0 (i / i)
      :topic (h / high-02
            :ARG1 (p / prince
                  :mod (l / little)))
      :mod (t / too)
      :example (a / and
            :op1 (h2 / have-degree-91
                  :ARG1 p
                  :ARG2 (t2 / tall)
                  :ARG3 (t3 / too)
                  :location (p2 / place
                        :mod (o / one)))
            :op2 (h3 / have-degree-91
                  :ARG1 p
                  :ARG2 (s / short-07
                        :ARG1 p)
                  :ARG3 (t4 / too)
                  :location (p3 / place
                        :mod (a2 / another))))
      :mod (s2 / some))

instance(e,err-01)
instance(i,i)
instance(h,high-02)
instance(p,prince)
instance(l,little)
instance(t,too)
instance(a,and)
instance(h2,have-degree-91)
instance(t2,tall)
instance(t3,too)
instance(p2,place)
instance(o,one)
instance(h3,have-degree-91)
instance(s,short-07)
instance(t4,too)
instance(p3,place)
instance(a2,another)
instance(s2,some)
ARG0(e,i)
topic(e,h)
ARG1(h,p)
mod(p,l)
mod(e,t)
example(e,a)
op1(a,h2)
ARG1(h2,p)
ARG2(h2,t2)
ARG3(h2,t3)
location(h2,p2)
mod(p2,o)
op2(a,h3)
ARG1(h3,p)
ARG2(h3,s)
ARG1(s,p)
ARG3(h3,t4)
location(h3,p3)
mod(p3,a2)
mod(e,s2)

(a / and
  :op2 (f / feel-01
         :ARG0 (i / i)
         :ARG1 (d / doubt-01
                 :ARG0 i
                 :ARG1 (c / color
                         :poss (c2 / costume
                                 :poss (h / he)))
                 :quant (s / some))))

instance(a,and)
instance(f,feel-01)
instance(i,i)
instance(d,doubt-01)
instance(c,color)
instance(c2,costume)
instance(h,he)
instance(s,some)
op2(a,f)
ARG0(f,i)
ARG1(f,d)
ARG0(d,i)
ARG1(d,c)
poss(c,c2)
poss(c2,h)
quant(d,s)

(c / cause-01
      :ARG1 (h2 / have-degree-91
            :ARG1 (f / fumble-01
                  :ARG0 (i / i)
                  :ARG1 (a / along))
            :ARG2 (g / good-03
                  :ARG1 i
                  :ARG2 f)
            :ARG3 (e / equal)
            :ARG4 (p / possible-01
                  :ARG1 f)
            :example (g2 / good-03
                  :time (n / now))
            :example (b / bad-02
                  :time (n2 / now))
            :example (b2 / between
                  :op1 (f2 / fair-04)
                  :op2 (m2 / middling)
                  :ARG1-of (g3 / general-02)
                  :ARG1-of (h / hope-01
                        :ARG0 i))))

instance(c,cause-01)
instance(h2,have-degree-91)
instance(f,fumble-01)
instance(i,i)
instance(a,along)
instance(g,good-03)
instance(e,equal)
instance(p,possible-01)
instance(g2,good-03)
instance(n,now)
instance(b,bad-02)
instance(n2,now)
instance(b2,between)
instance(f2,fair-04)
instance(m2,middling)
instance(g3,general-02)
instance(h,hope-01)
ARG1(c,h2)
ARG1(h2,f)
ARG0(f,i)
ARG1(f,a)
ARG2(h2,g)
ARG1(g,i)
ARG2(g,f)
ARG3(h2,e)
ARG4(h2,p)
ARG1(p,f)
example(h2,g2)
time(g2,n)
example(h2,b)
time(b,n2)
example(h2,b2)
op1(b2,f2)
op2(b2,m2)
ARG1-of(b2,g3)
ARG1-of(b2,h)
ARG0(h,i)

(m2 / mistake-02
      :ARG0 (i / i)
      :ARG1 (d / detail
            :mod (c / certain)
            :ARG1-of (h / have-degree-91
                  :ARG2 (i2 / important-01
                        :ARG1 d)
                  :ARG3 (m3 / more)))
      :mod (a / also))

instance(m2,mistake-02)
instance(i,i)
instance(d,detail)
instance(c,certain)
instance(h,have-degree-91)
instance(i2,important-01)
instance(m3,more)
instance(a,also)
ARG0(m2,i)
ARG1(m2,d)
mod(d,c)
ARG1-of(d,h)
ARG2(h,i2)
ARG1(i2,d)
ARG3(h,m3)
mod(m2,a)

(c / contrast-01
  :ARG2 (f2 / fault-01
          :ARG1 (i / i)
          :ARG2 (s2 / something
                  :mod (t2 / that))
          :polarity -))

instance(c,contrast-01)
instance(f2,fault-01)
instance(i,i)
instance(s2,something)
instance(t2,that)
ARG2(c,f2)
ARG1(f2,i)
ARG2(f2,s2)
mod(s2,t2)
polarity(f2,-)

(e / explain-01 :polarity -
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 i
                  :ARG2 (f / friend)))
      :ARG1 (a / anything)
      :ARG2 (i / i)
      :time (e2 / ever))

instance(e,explain-01)
instance(p,person)
instance(h,have-rel-role-91)
instance(f,friend)
instance(a,anything)
instance(i,i)
instance(e2,ever)
polarity(e,-)
ARG0(e,p)
ARG0-of(p,h)
ARG1(h,i)
ARG2(h,f)
ARG1(e,a)
ARG2(e,i)
time(e,e2)

(t / think-01
      :ARG0 (h / he)
      :ARG1 (r / resemble-01
            :ARG1 (i / i)
            :ARG2 h)
      :mod (p / perhaps))

instance(t,think-01)
instance(h,he)
instance(r,resemble-01)
instance(i,i)
instance(p,perhaps)
ARG0(t,h)
ARG1(t,r)
ARG1(r,i)
ARG2(r,h)
mod(t,p)

(c / contrast-01
      :ARG2 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (t2 / thing
                  :manner-of (s / see-01
                        :ARG1 (s2 / sheep)
                        :path (t / through
                              :op1 (w / wall
                                    :consist-of (b2 / box))))))
      :mod (a / alas))

instance(c,contrast-01)
instance(k,know-01)
instance(i,i)
instance(t2,thing)
instance(s,see-01)
instance(s2,sheep)
instance(t,through)
instance(w,wall)
instance(b2,box)
instance(a,alas)
ARG2(c,k)
polarity(k,-)
ARG0(k,i)
ARG1(k,t2)
manner-of(t2,s)
ARG1(s,s2)
path(s,t)
op1(t,w)
consist-of(w,b2)
mod(c,a)

(r / resemble-01
      :ARG1 (i / i)
      :ARG2 (g / grown-up)
      :mod (p / perhaps)
      :quant (l / little))

instance(r,resemble-01)
instance(i,i)
instance(g,grown-up)
instance(p,perhaps)
instance(l,little)
ARG1(r,i)
ARG2(r,g)
mod(r,p)
quant(r,l)

(o / obligate-01
  :ARG1 (i / i)
  :ARG2 (g / grow-02
          :ARG1 i
          :ARG2 (o2 / old)))

instance(o,obligate-01)
instance(i,i)
instance(g,grow-02)
instance(o2,old)
ARG1(o,i)
ARG2(o,g)
ARG1(g,i)
ARG2(g,o2)

(c / chapter :mod 5)

instance(c,chapter)
mod(c,5)

(l / learn-01
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (s / something
                  :topic (p2 / planet
                        :poss (p3 / prince
                              :mod (l2 / little))))
            :op2 (d2 / depart-01
                  :ARG0 p3
                  :ARG1 p2)
            :op3 (j / journey-01
                  :ARG0 p3))
      :time (p / pass-03
            :ARG1 (d / day
                  :mod (e / each)))
      :source (t / talk-01
            :ARG0 (w / we)))

instance(l,learn-01)
instance(i,i)
instance(a,and)
instance(s,something)
instance(p2,planet)
instance(p3,prince)
instance(l2,little)
instance(d2,depart-01)
instance(j,journey-01)
instance(p,pass-03)
instance(d,day)
instance(e,each)
instance(t,talk-01)
instance(w,we)
ARG0(l,i)
ARG1(l,a)
op1(a,s)
topic(s,p2)
poss(p2,p3)
mod(p3,l2)
op2(a,d2)
ARG0(d2,p3)
ARG1(d2,p2)
op3(a,j)
ARG0(j,p3)
time(l,p)
ARG1(p,d)
mod(d,e)
source(l,t)
ARG0(t,w)

(c / come-01
      :ARG1 (i / information)
      :ARG1-of (s / slow-05
            :degree (v / very))
      :time (f / fall-01
            :ARG1 i
            :ARG3 (t / thing
                  :ARG1-of (t2 / think-01
                        :ARG0 (h / he)))
            :ARG1-of (c2 / chance-01)))

instance(c,come-01)
instance(i,information)
instance(s,slow-05)
instance(v,very)
instance(f,fall-01)
instance(t,thing)
instance(t2,think-01)
instance(h,he)
instance(c2,chance-01)
ARG1(c,i)
ARG1-of(c,s)
degree(s,v)
time(c,f)
ARG1(f,i)
ARG3(f,t)
ARG1-of(t,t2)
ARG0(t2,h)
ARG1-of(f,c2)

(h / hear-01
      :ARG0 (i / i)
      :ARG1 (c / catastrophe
            :poss (b / baobab))
      :manner (t / this)
      :time (d / day
            :ord (o / ordinal-entity :value 3)))

instance(h,hear-01)
instance(i,i)
instance(c,catastrophe)
instance(b,baobab)
instance(t,this)
instance(d,day)
instance(o,ordinal-entity)
ARG0(h,i)
ARG1(h,c)
poss(c,b)
manner(h,t)
time(h,d)
ord(d,o)
value(o,3)

(o / obligate-01
      :ARG2 (t / thank-01
            :ARG0 (i / i)
            :ARG1 (s / sheep)
            :ARG2 (i2 / it))
      :time (t2 / time
            :mod (t3 / this))
      :mod (a / again))

instance(o,obligate-01)
instance(t,thank-01)
instance(i,i)
instance(s,sheep)
instance(i2,it)
instance(t2,time)
instance(t3,this)
instance(a,again)
ARG2(o,t)
ARG0(t,i)
ARG1(t,s)
ARG2(t,i2)
time(o,t2)
mod(t2,t3)
mod(o,a)

(r2 / request-confirmation-91
      :ARG0 (p / prince
            :mod (l2 / little))
      :ARG1 (e / eat-01
            :ARG0 (s / sheep)
            :ARG1 (b / bush
                  :mod (l / little)))
      :ARG2 (i2 / i)
      :manner (a2 / abrupt)
      :conj-as-if (s2 / seize-01
            :ARG0 (d / doubt-01
                  :ARG0 p
                  :mod (g / grave))
            :ARG1 p))

instance(r2,request-confirmation-91)
instance(p,prince)
instance(l2,little)
instance(e,eat-01)
instance(s,sheep)
instance(b,bush)
instance(l,little)
instance(i2,i)
instance(a2,abrupt)
instance(s2,seize-01)
instance(d,doubt-01)
instance(g,grave)
ARG0(r2,p)
mod(p,l2)
ARG1(r2,e)
ARG0(e,s)
ARG1(e,b)
mod(b,l)
ARG2(r2,i2)
manner(r2,a2)
conj-as-if(r2,s2)
ARG0(s2,d)
ARG0(d,p)
mod(d,g)
ARG1(s2,p)

(t / true-01
      :ARG1 (t2 / that))

instance(t,true-01)
instance(t2,that)
ARG1(t,t2)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(g / glad-02
      :ARG1 (i / i))

instance(g,glad-02)
instance(i,i)
ARG1(g,i)

(u / understand-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (i2 / important-01
            :mod (s2 / so)
            :ARG1 (r / recommend-01
                  :ARG1 (e / eat-01
                        :ARG0 (s / sheep)
                        :ARG1 (b / bush
                              :mod (l / little))))
            :ARG1-of (c / cause-01
                  :ARG0 (a / amr-unknown))))

instance(u,understand-01)
instance(i,i)
instance(i2,important-01)
instance(s2,so)
instance(r,recommend-01)
instance(e,eat-01)
instance(s,sheep)
instance(b,bush)
instance(l,little)
instance(c,cause-01)
instance(a,amr-unknown)
polarity(u,-)
ARG0(u,i)
ARG1(u,i2)
mod(i2,s2)
ARG1(i2,r)
ARG1(r,e)
ARG0(e,s)
ARG1(e,b)
mod(b,l)
ARG1-of(i2,c)
ARG0(c,a)

(c / contrast-01
      :ARG1 (a / add-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (f / follow-05
                  :ARG1 (e / eat-01
                        :ARG0 (t / they)
                        :ARG1 (b / baobab)
                        :mod (a2 / also))
                  :ARG1-of (h / have-condition-91)
                  :ARG1-of (r / request-confirmation-91))))

instance(c,contrast-01)
instance(a,add-01)
instance(p,prince)
instance(l,little)
instance(f,follow-05)
instance(e,eat-01)
instance(t,they)
instance(b,baobab)
instance(a2,also)
instance(h,have-condition-91)
instance(r,request-confirmation-91)
ARG1(c,a)
ARG0(a,p)
mod(p,l)
ARG1(a,f)
ARG1(f,e)
ARG0(e,t)
ARG1(e,b)
mod(e,a2)
ARG1-of(f,h)
ARG1-of(f,r)

(p2 / point-out-02
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (t2 / tree
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (b5 / big)
                        :ARG3 (e4 / equal)
                        :ARG4 (c / castle))
                  :domain (b2 / baobab)
                  :ARG1-of (i2 / instead-of-91
                        :ARG2 (b3 / bush
                              :mod (l3 / little)
                              :domain b2)))
            :op2 (e / eat-up-02 :polarity -
                  :ARG0 h
                  :ARG1 (b / baobab :quant 1
                        :ARG1-of (s / single-02))
                  :concession (e3 / even-if
                        :op1 (t / take-01
                              :ARG0 p
                              :ARG1 (h / herd
                                    :consist-of (e2 / elephant)
                                    :mod (w / whole))
                              :ARG3 (a2 / away)))))
      :beneficiary (p / prince
            :mod (l2 / little)))

instance(p2,point-out-02)
instance(i,i)
instance(a,and)
instance(t2,tree)
instance(h2,have-degree-91)
instance(b5,big)
instance(e4,equal)
instance(c,castle)
instance(b2,baobab)
instance(i2,instead-of-91)
instance(b3,bush)
instance(l3,little)
instance(e,eat-up-02)
instance(b,baobab)
instance(s,single-02)
instance(e3,even-if)
instance(t,take-01)
instance(h,herd)
instance(e2,elephant)
instance(w,whole)
instance(a2,away)
instance(p,prince)
instance(l2,little)
ARG0(p2,i)
ARG1(p2,a)
op1(a,t2)
ARG1-of(t2,h2)
ARG2(h2,b5)
ARG3(h2,e4)
ARG4(h2,c)
domain(t2,b2)
ARG1-of(t2,i2)
ARG2(i2,b3)
mod(b3,l3)
domain(b3,b2)
op2(a,e)
polarity(e,-)
ARG0(e,h)
ARG1(e,b)
quant(b,1)
ARG1-of(b,s)
concession(e,e3)
op1(e3,t)
ARG0(t,p)
ARG1(t,h)
consist-of(h,e2)
mod(h,w)
ARG3(t,a2)
beneficiary(p2,p)
mod(p,l2)

(m / make-02
      :ARG0 (i / idea
            :topic (h / herd
                  :consist-of (e / elephant)))
      :ARG1 (l / laugh-01
            :ARG0 (p / prince
                  :mod (l2 / little))))

instance(m,make-02)
instance(i,idea)
instance(h,herd)
instance(e,elephant)
instance(l,laugh-01)
instance(p,prince)
instance(l2,little)
ARG0(m,i)
topic(i,h)
consist-of(h,e)
ARG1(m,l)
ARG0(l,p)
mod(p,l2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (o / obligate-01
            :ARG2 (s2 / stack-01
                  :ARG0 (w / we)
                  :ARG1 (t / they))))

instance(s,say-01)
instance(h,he)
instance(o,obligate-01)
instance(s2,stack-01)
instance(w,we)
instance(t,they)
ARG0(s,h)
ARG1(s,o)
ARG2(o,s2)
ARG0(s2,w)
ARG1(s2,t)

(c2 / contrast-01
      :ARG2 (c / comment-01
            :ARG0 (h / he)
            :ARG1 (s / start-out-05
                  :ARG0 (b2 / baobab)
                  :ARG2 (l / little)
                  :time (b4 / before
                        :op1 (g / grow-02
                              :ARG1 b2
                              :ARG2 (b5 / big
                                    :degree (s2 / so)))))
            :manner (w / wise)))

instance(c2,contrast-01)
instance(c,comment-01)
instance(h,he)
instance(s,start-out-05)
instance(b2,baobab)
instance(l,little)
instance(b4,before)
instance(g,grow-02)
instance(b5,big)
instance(s2,so)
instance(w,wise)
ARG2(c2,c)
ARG0(c,h)
ARG1(c,s)
ARG0(s,b2)
ARG2(s,l)
time(s,b4)
op1(b4,g)
ARG1(g,b2)
ARG2(g,b5)
degree(b5,s2)
manner(c,w)

(c / correct-02
      :ARG1 (t / that)
      :mod (s / strict))

instance(c,correct-02)
instance(t,that)
instance(s,strict)
ARG1(c,t)
mod(c,s)

(s / say-01
  :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(c / contrast-01
      :ARG2 (c2 / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (e / eat-01
                        :ARG0 (s / sheep)
                        :ARG1 (b / baobab
                              :mod (l / little))))))

instance(c,contrast-01)
instance(c2,cause-01)
instance(a,amr-unknown)
instance(w,want-01)
instance(y,you)
instance(e,eat-01)
instance(s,sheep)
instance(b,baobab)
instance(l,little)
ARG2(c,c2)
ARG0(c2,a)
ARG1(c2,w)
ARG0(w,y)
ARG1(w,e)
ARG0(e,s)
ARG1(e,b)
mod(b,l)

(a / answer-01
      :ARG0 (h / he)
      :ARG1 (i2 / i)
      :ARG2 (c / come-on-25)
      :time (a2 / at-once-01)
      :conj-as-if (s / speak-01
            :ARG0 h
            :ARG1 (s2 / something
                  :ARG0-of (e / evidence-01
                        :ARG1 s2))))

instance(a,answer-01)
instance(h,he)
instance(i2,i)
instance(c,come-on-25)
instance(a2,at-once-01)
instance(s,speak-01)
instance(s2,something)
instance(e,evidence-01)
ARG0(a,h)
ARG1(a,i2)
ARG2(a,c)
time(a,a2)
conj-as-if(a,s)
ARG0(s,h)
ARG1(s,s2)
ARG0-of(s2,e)
ARG1(e,s2)

(a / and
      :op1 (o / oblige-02
            :ARG1 (i / i)
            :ARG2 (e / effort-01
                  :ARG0 i
                  :ARG1 (s / solve-01
                        :ARG0 i
                        :ARG1 (p / problem
                              :mod (t / this))
                        :ARG2-of (a2 / assist-01 :polarity -
                              :ARG1 i))
                  :manner (m2 / mental)
                  :mod (g / great))))

instance(a,and)
instance(o,oblige-02)
instance(i,i)
instance(e,effort-01)
instance(s,solve-01)
instance(p,problem)
instance(t,this)
instance(a2,assist-01)
instance(m2,mental)
instance(g,great)
op1(a,o)
ARG1(o,i)
ARG2(o,e)
ARG0(e,i)
ARG1(e,s)
ARG0(s,i)
ARG1(s,p)
mod(p,t)
ARG2-of(s,a2)
polarity(a2,-)
ARG1(a2,i)
manner(e,m2)
mod(e,g)

(b2 / be-located-at-91
      :ARG1 (a3 / and
            :op1 (p / plant
                  :ARG1-of (g / good-02))
            :op2 (p2 / plant
                  :ARG1-of (b / bad-07))
            :mod (i / indeed))
      :ARG2 (a / and
            :op1 (p3 / planet
                  :location-of (l / live-01
                        :ARG0 (p4 / prince
                              :mod (l2 / little))))
            :op2 (p5 / planet
                  :mod (a2 / all)))
      :ARG1-of (l3 / learn-01
            :ARG0 (i2 / i)))

instance(b2,be-located-at-91)
instance(a3,and)
instance(p,plant)
instance(g,good-02)
instance(p2,plant)
instance(b,bad-07)
instance(i,indeed)
instance(a,and)
instance(p3,planet)
instance(l,live-01)
instance(p4,prince)
instance(l2,little)
instance(p5,planet)
instance(a2,all)
instance(l3,learn-01)
instance(i2,i)
ARG1(b2,a3)
op1(a3,p)
ARG1-of(p,g)
op2(a3,p2)
ARG1-of(p2,b)
mod(a3,i)
ARG2(b2,a)
op1(a,p3)
location-of(p3,l)
ARG0(l,p4)
mod(p4,l2)
op2(a,p5)
mod(p5,a2)
ARG1-of(b2,l3)
ARG0(l3,i2)

(c / consequence-03
      :ARG2 (a / and
            :op1 (s / seed
                  :ARG1-of (g / good-02)
                  :source (p / plant
                        :ARG1-of (g2 / good-02)))
            :op2 (s2 / seed
                  :ARG1-of (b / bad-07)
                  :source (p2 / plant
                        :ARG1-of (b2 / bad-07)))))

instance(c,consequence-03)
instance(a,and)
instance(s,seed)
instance(g,good-02)
instance(p,plant)
instance(g2,good-02)
instance(s2,seed)
instance(b,bad-07)
instance(p2,plant)
instance(b2,bad-07)
ARG2(c,a)
op1(a,s)
ARG1-of(s,g)
source(s,p)
ARG1-of(p,g2)
op2(a,s2)
ARG1-of(s2,b)
source(s2,p2)
ARG1-of(p2,b2)

(c / contrast-01
      :ARG2 (p / possible-01 :polarity -
            :ARG1 (s2 / see-01
                  :ARG1 (s / seed))))

instance(c,contrast-01)
instance(p,possible-01)
instance(s2,see-01)
instance(s,seed)
ARG2(c,p)
polarity(p,-)
ARG1(p,s2)
ARG1(s2,s)

(s / sleep-01
      :ARG0 (t / they)
      :location (h / heart
            :ARG2-of (d / deep-02)
            :part-of (d2 / darkness
                  :poss (e / earth)))
      :time (u / until
            :op1 (s2 / seize-01
                  :ARG0 (d3 / desire-01
                        :ARG1 (w / wake-01
                              :ARG1 s))
                  :ARG1 (s3 / someone
                        :ARG1-of (i / include-91
                              :ARG2 t)))))

instance(s,sleep-01)
instance(t,they)
instance(h,heart)
instance(d,deep-02)
instance(d2,darkness)
instance(e,earth)
instance(u,until)
instance(s2,seize-01)
instance(d3,desire-01)
instance(w,wake-01)
instance(s3,someone)
instance(i,include-91)
ARG0(s,t)
location(s,h)
ARG2-of(h,d)
part-of(h,d2)
poss(d2,e)
time(s,u)
op1(u,s2)
ARG0(s2,d3)
ARG1(d3,w)
ARG1(w,s)
ARG1(s2,s3)
ARG1-of(s3,i)
ARG2(i,t)

(a / and
      :op1 (s / stretch-01
            :ARG0 (s2 / seed
                  :mod (l / little)
                  :mod (t2 / this))
            :ARG1 s2)
      :op2 (b / begin-01
            :ARG0 s2
            :ARG1 (p / push-01
                  :ARG0 s2
                  :ARG1 (s3 / sprig
                        :mod (l2 / little)
                        :ARG0-of (c / charm-01))
                  :ARG2 (u / upward
                        :direction (s4 / sun))
                  :manner (o / offensive :polarity -))
            :manner (t3 / timid
                  :time (a2 / at-first)))
      :time (t / then))

instance(a,and)
instance(s,stretch-01)
instance(s2,seed)
instance(l,little)
instance(t2,this)
instance(b,begin-01)
instance(p,push-01)
instance(s3,sprig)
instance(l2,little)
instance(c,charm-01)
instance(u,upward)
instance(s4,sun)
instance(o,offensive)
instance(t3,timid)
instance(a2,at-first)
instance(t,then)
op1(a,s)
ARG0(s,s2)
mod(s2,l)
mod(s2,t2)
ARG1(s,s2)
op2(a,b)
ARG0(b,s2)
ARG1(b,p)
ARG0(p,s2)
ARG1(p,s3)
mod(s3,l2)
ARG0-of(s3,c)
ARG2(p,u)
direction(u,s4)
manner(p,o)
polarity(o,-)
manner(b,t3)
time(t3,a2)
time(a,t)

(a / allow-01
      :ARG0 (o / one)
      :ARG1 (g / grow-01
            :ARG1 i
            :location (w2 / wish-01
                  :ARG0 i
                  :ARG1-of (p / possible-01)))
      :condition (o2 / or
            :op1 (s / sprout
                  :part-of (r / radish))
            :op2 (s2 / sprig
                  :part-of (b2 / bush
                        :mod (r2 / rose)))
            :mod (o3 / only)
            :domain (i / it)))

instance(a,allow-01)
instance(o,one)
instance(g,grow-01)
instance(w2,wish-01)
instance(p,possible-01)
instance(o2,or)
instance(s,sprout)
instance(r,radish)
instance(s2,sprig)
instance(b2,bush)
instance(r2,rose)
instance(o3,only)
instance(i,it)
ARG0(a,o)
ARG1(a,g)
ARG1(g,i)
location(g,w2)
ARG0(w2,i)
ARG1-of(w2,p)
condition(a,o2)
op1(o2,s)
part-of(s,r)
op2(o2,s2)
part-of(s2,b2)
mod(b2,r2)
mod(o2,o3)
domain(o2,i)

(c / contrast-01
      :ARG2 (o / obligate-01
            :ARG2 (d / destroy-01
                  :ARG0 (o2 / one)
                  :ARG1 i2
                  :time (i / instant
                        :time-of (r / recognize-01
                              :ARG0 o2
                              :ARG1 i2)
                        :ord (o3 / ordinal-entity :value 1
                              :degree (v / very)))
                  :time (s / soon
                        :ARG2-of (h / have-degree-91
                              :ARG1 d
                              :ARG3 (e / equal)
                              :ARG4 (p2 / possible-01
                                    :ARG1 d))))
            :condition (p / plant
                  :ARG1-of (b / bad-07)
                  :domain (i2 / it))))

instance(c,contrast-01)
instance(o,obligate-01)
instance(d,destroy-01)
instance(o2,one)
instance(i,instant)
instance(r,recognize-01)
instance(o3,ordinal-entity)
instance(v,very)
instance(s,soon)
instance(h,have-degree-91)
instance(e,equal)
instance(p2,possible-01)
instance(p,plant)
instance(b,bad-07)
instance(i2,it)
ARG2(c,o)
ARG2(o,d)
ARG0(d,o2)
ARG1(d,i2)
time(d,i)
time-of(i,r)
ARG0(r,o2)
ARG1(r,i2)
ord(i,o3)
value(o3,1)
degree(o3,v)
time(d,s)
ARG2-of(s,h)
ARG1(h,d)
ARG3(h,e)
ARG4(h,p2)
ARG1(p2,d)
condition(o,p)
ARG1-of(p,b)
domain(p,i2)

(b2 / be-located-at-91
      :ARG1 (s / seed
            :ARG1-of (t / terrible-01)
            :quant (s2 / some)
            :poss (b / baobab))
      :ARG2 (p / planet
            :location-of (h / home
                  :poss (p2 / prince
                        :mod (l / little))))
      :time (n / now))

instance(b2,be-located-at-91)
instance(s,seed)
instance(t,terrible-01)
instance(s2,some)
instance(b,baobab)
instance(p,planet)
instance(h,home)
instance(p2,prince)
instance(l,little)
instance(n,now)
ARG1(b2,s)
ARG1-of(s,t)
quant(s,s2)
poss(s,b)
ARG2(b2,p)
location-of(p,h)
poss(h,p2)
mod(p2,l)
time(b2,n)

(i / infest-01
      :ARG1 (s / soil
            :poss (p / planet
                  :mod (t2 / that)))
      :ARG2 (t / they))

instance(i,infest-01)
instance(s,soil)
instance(p,planet)
instance(t2,that)
instance(t,they)
ARG1(i,s)
poss(s,p)
mod(p,t2)
ARG2(i,t)

(p / possible-01 :polarity -
      :ARG1 (e / eliminate-01
            :ARG0 (y / you)
            :ARG1 (b / baobab)
            :time (e2 / ever))
      :condition (a / attend-02
            :ARG0 y
            :ARG1 b
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / late)
                  :ARG3 (t / too))))

instance(p,possible-01)
instance(e,eliminate-01)
instance(y,you)
instance(b,baobab)
instance(e2,ever)
instance(a,attend-02)
instance(h,have-degree-91)
instance(l,late)
instance(t,too)
polarity(p,-)
ARG1(p,e)
ARG0(e,y)
ARG1(e,b)
time(e,e2)
condition(p,a)
ARG0(a,y)
ARG1(a,b)
ARG1-of(a,h)
ARG2(h,l)
ARG3(h,t)

(s / spread-01
  :ARG1 (i / it)
  :ARG2 (p / planet
          :mod (e / entire)))

instance(s,spread-01)
instance(i,it)
instance(p,planet)
instance(e,entire)
ARG1(s,i)
ARG2(s,p)
mod(p,e)

(b / bore-01
      :ARG0 (i / it)
      :ARG2 (t2 / through
            :op1 (i2 / it)
            :mod (c / clear-03))
      :ARG3 (r / root
            :poss i))

instance(b,bore-01)
instance(i,it)
instance(t2,through)
instance(i2,it)
instance(c,clear-03)
instance(r,root)
ARG0(b,i)
ARG2(b,t2)
op1(t2,i2)
mod(t2,c)
ARG3(b,r)
poss(r,i)

(a / and
      :op1 (s / split-01
            :ARG0 b
            :ARG1 p2
            :ARG2 (p / piece)
            :condition (a2 / and
                  :op1 (h / have-degree-91
                        :ARG1 (p2 / planet)
                        :ARG2 (s2 / small)
                        :ARG3 (t2 / too))
                  :op2 (h2 / have-quant-91
                        :ARG1 (b / baobab)
                        :ARG2 (m / many)
                        :ARG3 (t3 / too)))))

instance(a,and)
instance(s,split-01)
instance(p,piece)
instance(a2,and)
instance(h,have-degree-91)
instance(p2,planet)
instance(s2,small)
instance(t2,too)
instance(h2,have-quant-91)
instance(b,baobab)
instance(m,many)
instance(t3,too)
op1(a,s)
ARG0(s,b)
ARG1(s,p2)
ARG2(s,p)
condition(s,a2)
op1(a2,h)
ARG1(h,p2)
ARG2(h,s2)
ARG3(h,t2)
op2(a2,h2)
ARG1(h2,b)
ARG2(h2,m)
ARG3(h2,t3)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (q / question
            :topic (d / discipline)
            :domain (i / it))
      :ARG2 (i2 / i)
      :time (a / after))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(q,question)
instance(d,discipline)
instance(i,it)
instance(i2,i)
instance(a,after)
ARG0(s,p)
mod(p,l)
ARG1(s,q)
topic(q,d)
domain(q,i)
ARG2(s,i2)
time(s,a)

(a / attend-02
      :ARG0 (y / you)
      :ARG1 (t2 / toilet
            :poss (p / planet
                  :poss y)
            :ARG1-of (r / resemble-01
                  :ARG2 t))
      :manner (c / care-04
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / great)
                  :ARG3 (m2 / most)))
      :time (f / finish-01
            :ARG0 y
            :ARG1 (t / toilet
                  :poss y)
            :time (d / date-entity
                  :dayperiod (m / morning))))

instance(a,attend-02)
instance(y,you)
instance(t2,toilet)
instance(p,planet)
instance(r,resemble-01)
instance(c,care-04)
instance(h,have-degree-91)
instance(g,great)
instance(m2,most)
instance(f,finish-01)
instance(t,toilet)
instance(d,date-entity)
instance(m,morning)
ARG0(a,y)
ARG1(a,t2)
poss(t2,p)
poss(p,y)
ARG1-of(t2,r)
ARG2(r,t)
manner(a,c)
ARG1-of(c,h)
ARG2(h,g)
ARG3(h,m2)
time(a,f)
ARG0(f,y)
ARG1(f,t)
poss(t,y)
time(f,d)
dayperiod(d,m)

(o2 / obligate-01
      :ARG1 (p / pull-01
            :ARG0 (y / you)
            :ARG1 (b / baobab
                  :mod (a / all))
            :ARG1-of (r / regular-02)
            :time (m / moment
                  :ord (o / ordinal-entity :value 1
                        :degree (v / very))
                  :time-of (p2 / possible-01
                        :ARG1 (d / distinguish-01
                              :ARG1 b
                              :ARG2 (r2 / rosebush
                                    :ARG2-of (r3 / resemble-01
                                          :ARG1 b
                                          :ARG1-of (c / close-10
                                                :degree (s / so))
                                          :time (e / early
                                                :op1 (y2 / youth
                                                      :poss b)
                                                :degree (v2 / very)))))))))

instance(o2,obligate-01)
instance(p,pull-01)
instance(y,you)
instance(b,baobab)
instance(a,all)
instance(r,regular-02)
instance(m,moment)
instance(o,ordinal-entity)
instance(v,very)
instance(p2,possible-01)
instance(d,distinguish-01)
instance(r2,rosebush)
instance(r3,resemble-01)
instance(c,close-10)
instance(s,so)
instance(e,early)
instance(y2,youth)
instance(v2,very)
ARG1(o2,p)
ARG0(p,y)
ARG1(p,b)
mod(b,a)
ARG1-of(p,r)
time(p,m)
ord(m,o)
value(o,1)
degree(o,v)
time-of(m,p2)
ARG1(p2,d)
ARG1(d,b)
ARG2(d,r2)
ARG2-of(r2,r3)
ARG1(r3,b)
ARG1-of(r3,c)
degree(c,s)
time(r3,e)
op1(e,y2)
poss(y2,b)
degree(e,v2)

(a / add-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (c / contrast-01
            :ARG1 (t / tedious
                  :degree (v / very)
                  :domain (w / work-01))
            :ARG2 (e / easy-05
                  :degree (v2 / very)
                  :ARG1 w)))

instance(a,add-01)
instance(p,prince)
instance(l,little)
instance(c,contrast-01)
instance(t,tedious)
instance(v,very)
instance(w,work-01)
instance(e,easy-05)
instance(v2,very)
ARG0(a,p)
mod(p,l)
ARG1(a,c)
ARG1(c,t)
degree(t,v)
domain(t,w)
ARG2(c,e)
degree(e,v2)
ARG1(e,w)

(a / and
      :op1 (s / say-01
            :ARG0 (h / he)
            :ARG1 (r / recommend-01
                  :ARG0 h
                  :ARG1 (d3 / draw-01
                        :ARG0 i
                        :ARG1 (p2 / picture
                              :ARG1-of (b / beautiful-02))
                        :purpose (p / possible-01
                              :ARG1 (s2 / see-01
                                    :ARG0 (c / child
                                          :location (l / live-01
                                                :ARG0 i))
                                    :ARG1 (t / this
                                          :mod (a2 / all))
                                    :manner (e / exact))))
                  :ARG2 i)
            :ARG2 (i / i)
            :time (d / day
                  :mod (o / one))))

instance(a,and)
instance(s,say-01)
instance(h,he)
instance(r,recommend-01)
instance(d3,draw-01)
instance(p2,picture)
instance(b,beautiful-02)
instance(p,possible-01)
instance(s2,see-01)
instance(c,child)
instance(l,live-01)
instance(t,this)
instance(a2,all)
instance(e,exact)
instance(i,i)
instance(d,day)
instance(o,one)
op1(a,s)
ARG0(s,h)
ARG1(s,r)
ARG0(r,h)
ARG1(r,d3)
ARG0(d3,i)
ARG1(d3,p2)
ARG1-of(p2,b)
purpose(d3,p)
ARG1(p,s2)
ARG0(s2,c)
location(c,l)
ARG0(l,i)
ARG1(s2,t)
mod(t,a2)
manner(s2,e)
ARG2(r,i)
ARG2(s,i)
time(s,d)
mod(d,o)

(u / useful-05
      :ARG0 (t2 / they)
      :ARG1 (t / that)
      :degree (v / very)
      :condition (t3 / travel-01
            :ARG0 t2
            :time (d / day
                  :mod (s / some))))

instance(u,useful-05)
instance(t2,they)
instance(t,that)
instance(v,very)
instance(t3,travel-01)
instance(d,day)
instance(s,some)
ARG0(u,t2)
ARG1(u,t)
degree(u,v)
condition(u,t3)
ARG0(t3,t2)
time(t3,d)
mod(d,s)

(a / add-01
      :ARG0 (h / he)
      :ARG1 (h2 / harm-01 :polarity -
            :ARG0 (p / put-off-06
                  :ARG1 (t / thing
                        :ARG1-of (w / work-01)
                        :quant (p3 / piece))
                  :ARG2 (d / day
                        :mod (a2 / another)))
            :time (s / sometimes)))

instance(a,add-01)
instance(h,he)
instance(h2,harm-01)
instance(p,put-off-06)
instance(t,thing)
instance(w,work-01)
instance(p3,piece)
instance(d,day)
instance(a2,another)
instance(s,sometimes)
ARG0(a,h)
ARG1(a,h2)
polarity(h2,-)
ARG0(h2,p)
ARG1(p,t)
ARG1-of(t,w)
quant(t,p3)
ARG2(p,d)
mod(d,a2)
time(h2,s)

(c2 / contrast-01
      :ARG2 (m3 / mean-01
            :ARG1 (t / that)
            :ARG2 (c / catastrophe)
            :time (a / always)
            :condition (b / baobab)))

instance(c2,contrast-01)
instance(m3,mean-01)
instance(t,that)
instance(c,catastrophe)
instance(a,always)
instance(b,baobab)
ARG2(c2,m3)
ARG1(m3,t)
ARG2(m3,c)
time(m3,a)
condition(m3,b)

(k / know-02
      :ARG0 (i / i)
      :ARG1 (p / planet
            :ARG1-of (i2 / inhabit-01
                  :ARG0 (m / man
                        :mod (l / lazy)))))

instance(k,know-02)
instance(i,i)
instance(p,planet)
instance(i2,inhabit-01)
instance(m,man)
instance(l,lazy)
ARG0(k,i)
ARG1(k,p)
ARG1-of(p,i2)
ARG0(i2,m)
mod(m,l)

(n / neglect-01
  :ARG0 (h / he)
  :ARG1 (b / bush
          :mod (l / little)
          :quant 3))

instance(n,neglect-01)
instance(h,he)
instance(b,bush)
instance(l,little)
ARG0(n,h)
ARG1(n,b)
mod(b,l)
quant(b,3)

(d / draw-01
      :ARG0 (i / i)
      :ARG1 (p / planet
            :mod (t / that))
      :manner (d2 / describe-01
            :ARG0 (p2 / prince
                  :mod (l / little))
            :ARG1 p
            :beneficiary i)
      :ARG1-of (c / cause-01))

instance(d,draw-01)
instance(i,i)
instance(p,planet)
instance(t,that)
instance(d2,describe-01)
instance(p2,prince)
instance(l,little)
instance(c,cause-01)
ARG0(d,i)
ARG1(d,p)
mod(p,t)
manner(d,d2)
ARG0(d2,p2)
mod(p2,l)
ARG1(d2,p)
beneficiary(d2,i)
ARG1-of(d,c)

(d / dislike-01
      :ARG0 (i / i)
      :ARG1 (t / take-01
            :ARG0 i
            :ARG1 (t2 / tone
                  :poss (m2 / moralist)))
      :degree (m / much))

instance(d,dislike-01)
instance(i,i)
instance(t,take-01)
instance(t2,tone)
instance(m2,moralist)
instance(m,much)
ARG0(d,i)
ARG1(d,t)
ARG0(t,i)
ARG1(t,t2)
poss(t2,m2)
degree(d,m)

(c2 / contrast-01
      :ARG2 (c3 / cause-01
            :ARG0 (a / and
                  :op1 (u / understand-01
                        :ARG1 (d / danger
                              :poss (b2 / baobab))
                        :degree (l / little
                              :degree (s / so)))
                  :op2 (r / risk-01
                        :ARG0 (a2 / anyone
                              :ARG1-of (l2 / lose-02
                                    :location (a3 / asteroid)
                                    :ARG1-of (p / possible-01)))
                        :degree (c / considerable
                              :mod (s2 / such))))
            :ARG1 (b3 / break-away-14
                  :ARG0 (i / i)
                  :ARG1 (r3 / reserve
                        :poss i)
                  :mod (f / for-once))))

instance(c2,contrast-01)
instance(c3,cause-01)
instance(a,and)
instance(u,understand-01)
instance(d,danger)
instance(b2,baobab)
instance(l,little)
instance(s,so)
instance(r,risk-01)
instance(a2,anyone)
instance(l2,lose-02)
instance(a3,asteroid)
instance(p,possible-01)
instance(c,considerable)
instance(s2,such)
instance(b3,break-away-14)
instance(i,i)
instance(r3,reserve)
instance(f,for-once)
ARG2(c2,c3)
ARG0(c3,a)
op1(a,u)
ARG1(u,d)
poss(d,b2)
degree(u,l)
degree(l,s)
op2(a,r)
ARG0(r,a2)
ARG1-of(a2,l2)
location(l2,a3)
ARG1-of(l2,p)
degree(r,c)
mod(c,s2)
ARG1(c3,b3)
ARG0(b3,i)
ARG1(b3,r3)
poss(r3,i)
mod(b3,f)

(c2 / child)

instance(c2,child)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (w / watch-out-02 :mode imperative
            :ARG0 (y / you)
            :ARG1 (b / baobab))
      :manner (p / plain))

instance(s,say-01)
instance(i,i)
instance(w,watch-out-02)
instance(y,you)
instance(b,baobab)
instance(p,plain)
ARG0(s,i)
ARG1(s,w)
mode(w,imperative)
ARG0(w,y)
ARG1(w,b)
manner(s,p)

(c / cause-01
      :ARG0 (s / skirt-02
            :ARG0 (a / and
                  :op1 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 (i / i)
                              :ARG2 (f / friend)))
                  :op2 i)
            :ARG1 (d / danger
                  :mod (t / this))
            :ARG1-of (k / know-01 :polarity -
                  :ARG0 p2
                  :time (e / ever))
            :ARG1-of (l / long-03))
      :ARG1 (w / work-01
            :ARG0 i
            :ARG1 (p / picture
                  :ARG1-of (d2 / draw-01)
                  :mod (t3 / this))
            :ARG1-of (h / hard-02
                  :degree (s2 / so))
            :beneficiary p2))

instance(c,cause-01)
instance(s,skirt-02)
instance(a,and)
instance(p2,person)
instance(h2,have-rel-role-91)
instance(i,i)
instance(f,friend)
instance(d,danger)
instance(t,this)
instance(k,know-01)
instance(e,ever)
instance(l,long-03)
instance(w,work-01)
instance(p,picture)
instance(d2,draw-01)
instance(t3,this)
instance(h,hard-02)
instance(s2,so)
ARG0(c,s)
ARG0(s,a)
op1(a,p2)
ARG0-of(p2,h2)
ARG1(h2,i)
ARG2(h2,f)
op2(a,i)
ARG1(s,d)
mod(d,t)
ARG1-of(s,k)
polarity(k,-)
ARG0(k,p2)
time(k,e)
ARG1-of(s,l)
ARG1(c,w)
ARG0(w,i)
ARG1(w,p)
ARG1-of(p,d2)
mod(p,t3)
ARG1-of(w,h)
degree(h,s2)
beneficiary(w,p2)

(w / worth-02
      :ARG1 (l / lesson
            :ARG1-of (p / pass-on-09
                  :ARG0 (i / i)
                  :manner (t2 / this)))
      :ARG2 (t / trouble-05
            :ARG2-of (c / cost-01
                  :ARG1 l
                  :ARG3 i)
            :mod (a / all)))

instance(w,worth-02)
instance(l,lesson)
instance(p,pass-on-09)
instance(i,i)
instance(t2,this)
instance(t,trouble-05)
instance(c,cost-01)
instance(a,all)
ARG1(w,l)
ARG1-of(l,p)
ARG0(p,i)
manner(p,t2)
ARG2(w,t)
ARG2-of(t,c)
ARG1(c,l)
ARG3(c,i)
mod(t,a)

(p / possible-01
      :ARG1 (a / ask-01
            :ARG0 (y / you)
            :ARG1 (p2 / picture :polarity -
                  :ARG1-of (d / draw-01)
                  :mod (o / other)
                  :location (b / book
                        :mod (t / this))
                  :ARG0-of (c / cause-01
                        :ARG1 (a2 / amr-unknown))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (m / magnificent)
                        :ARG3 (e / equal)
                        :ARG4 (p3 / picture
                              :ARG1-of (d2 / draw-01)
                              :mod (t2 / this)
                              :topic (b2 / baobab)))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (i3 / impress-01
                              :ARG0 p2)
                        :ARG3 (e2 / equal)
                        :ARG4 p3))
            :ARG2 (i2 / i)))

instance(p,possible-01)
instance(a,ask-01)
instance(y,you)
instance(p2,picture)
instance(d,draw-01)
instance(o,other)
instance(b,book)
instance(t,this)
instance(c,cause-01)
instance(a2,amr-unknown)
instance(h,have-degree-91)
instance(m,magnificent)
instance(e,equal)
instance(p3,picture)
instance(d2,draw-01)
instance(t2,this)
instance(b2,baobab)
instance(h2,have-degree-91)
instance(i3,impress-01)
instance(e2,equal)
instance(i2,i)
ARG1(p,a)
ARG0(a,y)
ARG1(a,p2)
polarity(p2,-)
ARG1-of(p2,d)
mod(p2,o)
location(p2,b)
mod(b,t)
ARG0-of(p2,c)
ARG1(c,a2)
ARG1-of(p2,h)
ARG2(h,m)
ARG3(h,e)
ARG4(h,p3)
ARG1-of(p3,d2)
mod(p3,t2)
topic(p3,b2)
ARG1-of(p2,h2)
ARG2(h2,i3)
ARG0(i3,p2)
ARG3(h2,e2)
ARG4(h2,p3)
ARG2(a,i2)

(s / simple-02
      :ARG1 (t / thing
            :ARG2-of (r / reply-01)))

instance(s,simple-02)
instance(t,thing)
instance(r,reply-01)
ARG1(s,t)
ARG2-of(t,r)

(t / try-01
  :ARG0 (i / i))

instance(t,try-01)
instance(i,i)
ARG0(t,i)

(c / contrast-01
      :ARG2 (s / succeed-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (o / other)))

instance(c,contrast-01)
instance(s,succeed-01)
instance(i,i)
instance(o,other)
ARG2(c,s)
polarity(s,-)
ARG0(s,i)
ARG1(s,o)

(c / carry-01
      :ARG0 (f / force-01
            :ARG0 (n / necessity
                  :mod (u / urgent))
            :ARG0-of (i2 / inspire-01))
      :ARG1 (i / i)
      :destination (b / beyond
            :op1 i)
      :time (d / draw-01
            :ARG0 i
            :ARG1 (b2 / baobab)))

instance(c,carry-01)
instance(f,force-01)
instance(n,necessity)
instance(u,urgent)
instance(i2,inspire-01)
instance(i,i)
instance(b,beyond)
instance(d,draw-01)
instance(b2,baobab)
ARG0(c,f)
ARG0(f,n)
mod(n,u)
ARG0-of(f,i2)
ARG1(c,i)
destination(c,b)
op1(b,i)
time(c,d)
ARG0(d,i)
ARG1(d,b2)

(c / chapter :mod 6)

instance(c,chapter)
mod(c,6)

(p / prince
      :mod (l / little))

instance(p,prince)
instance(l,little)
mod(p,l)

(u / understand-01
      :ARG0 (i / i)
      :ARG1 (s / secret
            :poss (l / life
                  :poss (y / you)
                  :mod (l2 / little)
                  :ARG1-of (s2 / sad-02)))
      :manner (b / bit-by-bit))

instance(u,understand-01)
instance(i,i)
instance(s,secret)
instance(l,life)
instance(y,you)
instance(l2,little)
instance(s2,sad-02)
instance(b,bit-by-bit)
ARG0(u,i)
ARG1(u,s)
poss(s,l)
poss(l,y)
mod(l,l2)
ARG1-of(l,s2)
manner(u,b)

(f / find-01
      :ARG0 (y / you)
      :ARG1 (e / entertain-01
            :ARG0 (l2 / look-01
                  :ARG0 y
                  :ARG1 (s / sunset)
                  :mod (p / pleasure
                        :ARG1-of (q / quiet-04)))
            :ARG1 y
            :mod (o / only))
      :ARG1-of (l / long-03))

instance(f,find-01)
instance(y,you)
instance(e,entertain-01)
instance(l2,look-01)
instance(s,sunset)
instance(p,pleasure)
instance(q,quiet-04)
instance(o,only)
instance(l,long-03)
ARG0(f,y)
ARG1(f,e)
ARG0(e,l2)
ARG0(l2,y)
ARG1(l2,s)
mod(l2,p)
ARG1-of(p,q)
ARG1(e,y)
mod(e,o)
ARG1-of(f,l)

(l / learn-01
      :ARG0 (i / i)
      :ARG1 (d / detail
            :ARG1-of (n / new-01)
            :mod (t / that))
      :time (d3 / date-entity
            :dayperiod (m / morning)
            :mod (d2 / day
                  :ord (o / ordinal-entity :value 4)))
      :time (s / say-01
            :ARG0 (y / you)
            :ARG1 (l2 / like-01
                  :ARG0 y
                  :ARG1 (s2 / sunset)
                  :degree (v / very))
            :ARG2 i))

instance(l,learn-01)
instance(i,i)
instance(d,detail)
instance(n,new-01)
instance(t,that)
instance(d3,date-entity)
instance(m,morning)
instance(d2,day)
instance(o,ordinal-entity)
instance(s,say-01)
instance(y,you)
instance(l2,like-01)
instance(s2,sunset)
instance(v,very)
ARG0(l,i)
ARG1(l,d)
ARG1-of(d,n)
mod(d,t)
time(l,d3)
dayperiod(d3,m)
mod(d3,d2)
ord(d2,o)
value(o,4)
time(l,s)
ARG0(s,y)
ARG1(s,l2)
ARG0(l2,y)
ARG1(l2,s2)
degree(l2,v)
ARG2(s,i)

(a / and
      :op1 (c / come-01 :mode imperative
            :ARG1 (y / you))
      :op2 (g / go-05 :mode imperative
            :ARG0 w
            :ARG1 (l / look-01
                  :ARG0 (w / we)
                  :ARG1 (s / sunset)
                  :time (n / now))))

instance(a,and)
instance(c,come-01)
instance(y,you)
instance(g,go-05)
instance(l,look-01)
instance(w,we)
instance(s,sunset)
instance(n,now)
op1(a,c)
mode(c,imperative)
ARG1(c,y)
op2(a,g)
mode(g,imperative)
ARG0(g,w)
ARG1(g,l)
ARG0(l,w)
ARG1(l,s)
time(l,n)

(c / contrast-01
      :ARG2 (o / obligate-01
            :ARG2 (w2 / wait-01
                  :ARG1 (w / we))))

instance(c,contrast-01)
instance(o,obligate-01)
instance(w2,wait-01)
instance(w,we)
ARG2(c,o)
ARG2(o,w2)
ARG1(w2,w)

(s / say-01
  :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(w / wait-01 :polarity (a / amr-unknown))

instance(w,wait-01)
instance(a,amr-unknown)
polarity(w,a)

(w / wait-01
      :ARG2 (a / amr-unknown))

instance(w,wait-01)
instance(a,amr-unknown)
ARG2(w,a)

(w / wait-01
      :ARG2 (s / sunset))

instance(w,wait-01)
instance(s,sunset)
ARG2(w,s)

(o / obligate-01
      :ARG2 (w2 / wait-01
            :ARG1 (w / we)
            :duration (u / until
                  :op1 (t / time))))

instance(o,obligate-01)
instance(w2,wait-01)
instance(w,we)
instance(u,until)
instance(t,time)
ARG2(o,w2)
ARG1(w2,w)
duration(w2,u)
op1(u,t)

(s / seem-01
      :ARG1 (s2 / surprise-01
            :ARG1 (y / you)
            :degree (m / much
                  :degree (v / very)))
      :time (a / at-first))

instance(s,seem-01)
instance(s2,surprise-01)
instance(y,you)
instance(m,much)
instance(v,very)
instance(a,at-first)
ARG1(s,s2)
ARG1(s2,y)
degree(s2,m)
degree(m,v)
time(s,a)

(a / and
      :op1 (l / laugh-01
            :ARG0 (y / you)
            :ARG2 y
            :time (t / then)))

instance(a,and)
instance(l,laugh-01)
instance(y,you)
instance(t,then)
op1(a,l)
ARG0(l,y)
ARG2(l,y)
time(l,t)

(s / say-01
      :ARG0 (y / you)
      :ARG1 (t / think-01
            :ARG0 y
            :ARG1 (b / be-located-at-91
                  :ARG1 y
                  :ARG2 (h / home))
            :time (a / always))
      :ARG2 (i / i))

instance(s,say-01)
instance(y,you)
instance(t,think-01)
instance(b,be-located-at-91)
instance(h,home)
instance(a,always)
instance(i,i)
ARG0(s,y)
ARG1(s,t)
ARG0(t,y)
ARG1(t,b)
ARG1(b,y)
ARG2(b,h)
time(t,a)
ARG2(s,i)

(j / just-so)

instance(j,just-so)

(k / know-01
      :ARG0 (e / everybody)
      :ARG1 (s / set-11
            :ARG1 (s2 / sun)
            :location (c2 / country :wiki "France"
                  :name (n3 / name :op1 "France"))
            :time (d / date-entity :time "12:00"
                  :location (c / country :wiki "United_States"
                        :name (n2 / name :op1 "United" :op2 "States")))))

instance(k,know-01)
instance(e,everybody)
instance(s,set-11)
instance(s2,sun)
instance(c2,country)
instance(n3,name)
instance(d,date-entity)
instance(c,country)
instance(n2,name)
ARG0(k,e)
ARG1(k,s)
ARG1(s,s2)
location(s,c2)
wiki(c2,"France")
name(c2,n3)
op1(n3,"France")
time(s,d)
time(d,"12)
00"(d,location)
wiki(c,"United_States")
name(c,n2)
op1(n2,"United")
op2(n2,"States")

(p / possible-01
      :ARG1 (g / go-02
            :ARG0 y
            :ARG3 (d / date-entity :time "12:00")
            :ARG4 (s / sunset)
            :ARG1-of (s2 / straight-04))
      :condition (p2 / possible-01
            :ARG1 (f / fly-01
                  :ARG1 (y / you)
                  :duration (t / temporal-quantity :quant 1
                        :unit (m / minute))
                  :destination (c / country :wiki "France" :name (n / name :op1 "France")))))

instance(p,possible-01)
instance(g,go-02)
instance(d,date-entity)
instance(s,sunset)
instance(s2,straight-04)
instance(p2,possible-01)
instance(f,fly-01)
instance(y,you)
instance(t,temporal-quantity)
instance(m,minute)
instance(c,country)
instance(n,name)
ARG1(p,g)
ARG0(g,y)
ARG3(g,d)
time(d,"12)
00"(d,)
ARG4(,s)
ARG1-of(,s2)
condition(d,p2)
ARG1(p2,f)
ARG1(f,y)
duration(f,t)
quant(t,1)
unit(t,m)
destination(f,c)
wiki(c,"France")
name(c,n)
op1(n,"France")

(f / fortunate-01 :polarity -
      :ARG2 (b / be-located-at-91
            :ARG1 (c / country :wiki "France" :name (n / name :op1 "France"))
            :ARG2 (a / away
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f2 / far)
                        :ARG3 (t / too)
                        :ARG6 (t2 / that)))))

instance(f,fortunate-01)
instance(b,be-located-at-91)
instance(c,country)
instance(n,name)
instance(a,away)
instance(h,have-degree-91)
instance(f2,far)
instance(t,too)
instance(t2,that)
polarity(f,-)
ARG2(f,b)
ARG1(b,c)
wiki(c,"France")
name(c,n)
op1(n,"France")
ARG2(b,a)
ARG1-of(a,h)
ARG2(h,f2)
ARG3(h,t)
ARG6(h,t2)

(s2 / say-01
      :ARG1 (c2 / contrast-01
            :ARG2 (o / obligate-01
                  :ARG2 (m / move-01
                        :ARG0 p2
                        :ARG1 (c / chair
                              :poss p2)
                        :extent (s / step
                              :quant (f / few))
                        :mod (o2 / only))
                  :location (p / planet
                        :mod (t / tiny)
                        :poss (p2 / prince
                              :mod (l / little)
                              :poss (i / i)))))
      :ARG2 p2)

instance(s2,say-01)
instance(c2,contrast-01)
instance(o,obligate-01)
instance(m,move-01)
instance(c,chair)
instance(s,step)
instance(f,few)
instance(o2,only)
instance(p,planet)
instance(t,tiny)
instance(p2,prince)
instance(l,little)
instance(i,i)
ARG1(s2,c2)
ARG2(c2,o)
ARG2(o,m)
ARG0(m,p2)
ARG1(m,c)
poss(c,p2)
extent(m,s)
quant(s,f)
mod(m,o2)
location(o,p)
mod(p,t)
poss(p,p2)
mod(p2,l)
poss(p2,i)
ARG2(s2,p2)

(p / possible-01
      :ARG1 (s / see-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (e / end-01
                        :ARG1 (d / day))
                  :op2 (f / fall-04
                        :ARG1 (t / twilight)))
            :time (l / like-02
                  :ARG0 y
                  :ARG1 s
                  :mod (a2 / any))))

instance(p,possible-01)
instance(s,see-01)
instance(y,you)
instance(a,and)
instance(e,end-01)
instance(d,day)
instance(f,fall-04)
instance(t,twilight)
instance(l,like-02)
instance(a2,any)
ARG1(p,s)
ARG0(s,y)
ARG1(s,a)
op1(a,e)
ARG1(e,d)
op2(a,f)
ARG1(f,t)
time(s,l)
ARG0(l,y)
ARG1(l,s)
mod(l,a2)

(s / say-01
      :ARG0 (y / you)
      :ARG1 (s2 / see-01 :frequency 44
            :ARG0 y
            :ARG1 (s3 / sunset)
            :time (d / day
                  :mod (o / one)))
      :ARG2 (i / i))

instance(s,say-01)
instance(y,you)
instance(s2,see-01)
instance(s3,sunset)
instance(d,day)
instance(o,one)
instance(i,i)
ARG0(s,y)
ARG1(s,s2)
frequency(s2,44)
ARG0(s2,y)
ARG1(s2,s3)
time(s2,d)
mod(d,o)
ARG2(s,i)

(a / and
      :op1 (a2 / add-01
            :ARG0 (y / you)
            :ARG1 (l3 / love-01
                  :ARG0 (o / one)
                  :ARG1 (s / sunset)
                  :time (s2 / sad-02
                        :ARG1 o
                        :mod (s3 / so)))
            :time (a3 / after
                  :quant (l2 / little))))

instance(a,and)
instance(a2,add-01)
instance(y,you)
instance(l3,love-01)
instance(o,one)
instance(s,sunset)
instance(s2,sad-02)
instance(s3,so)
instance(a3,after)
instance(l2,little)
op1(a,a2)
ARG0(a2,y)
ARG1(a2,l3)
ARG0(l3,o)
ARG1(l3,s)
time(l3,s2)
ARG1(s2,o)
mod(s2,s3)
time(a2,a3)
quant(a3,l2)

(s / sad-02 :polarity (a / amr-unknown)
      :ARG1 (y / you)
      :time (t / then)
      :degree (s2 / so))

instance(s,sad-02)
instance(a,amr-unknown)
instance(y,you)
instance(t,then)
instance(s2,so)
polarity(s,a)
ARG1(s,y)
time(s,t)
degree(s,s2)

(a / ask-01
      :ARG0 (i / i)
      :ARG1 (t / truth-value
            :polarity-of (b / be-temporally-at-91
                  :ARG2 (d / day
                        :ARG0-of (h / have-03
                              :ARG1 (s / sunset :quant 44))))))

instance(a,ask-01)
instance(i,i)
instance(t,truth-value)
instance(b,be-temporally-at-91)
instance(d,day)
instance(h,have-03)
instance(s,sunset)
ARG0(a,i)
ARG1(a,t)
polarity-of(t,b)
ARG2(b,d)
ARG0-of(d,h)
ARG1(h,s)
quant(s,44)

(c / contrast-01
      :ARG2 (r / reply-01 :polarity -
            :ARG0 (p / prince
                  :mod (l / little))))

instance(c,contrast-01)
instance(r,reply-01)
instance(p,prince)
instance(l,little)
ARG2(c,r)
polarity(r,-)
ARG0(r,p)
mod(p,l)

(c / chapter :mod 7)

instance(c,chapter)
mod(c,7)

(r / reveal-01
      :ARG0 (s / sheep
            :ARG1-of (t / thank-01))
      :ARG1 (s2 / secret
            :poss (l / life
                  :poss (p / prince
                        :mod (l2 / little))))
      :ARG2 (i / i)
      :time (d / day
            :ord (o / ordinal-entity :value 5))
      :mod (a / again)
      :time (a2 / always))

instance(r,reveal-01)
instance(s,sheep)
instance(t,thank-01)
instance(s2,secret)
instance(l,life)
instance(p,prince)
instance(l2,little)
instance(i,i)
instance(d,day)
instance(o,ordinal-entity)
instance(a,again)
instance(a2,always)
ARG0(r,s)
ARG1-of(s,t)
ARG1(r,s2)
poss(s2,l)
poss(l,p)
mod(p,l2)
ARG2(r,i)
time(r,d)
ord(d,o)
value(o,5)
mod(r,a)
time(r,a2)

(d / demand-01
      :ARG0 (h / he)
      :ARG1 (t3 / truth-value
            :polarity-of (e / eat-01
                  :ARG0 (s / sheep)
                  :ARG1 (f / flower
                        :mod (t / too))
                  :condition (e2 / eat-01
                        :ARG0 s
                        :ARG1 (b / bush
                              :mod (l / little)))))
      :manner (a / abrupt)
      :conj-as-if (b2 / bear-02
            :ARG0 (m / meditate-01
                  :ARG1 (p / problem
                        :poss h)
                  :ARG1-of (l3 / long-03)
                  :manner (s2 / silent))
            :ARG1 (t2 / thing
                  :ARG1-of (q / question-01)))
      :ARG2-of (l2 / lead-up-05 :polarity -
            :ARG1 (a2 / anything)))

instance(d,demand-01)
instance(h,he)
instance(t3,truth-value)
instance(e,eat-01)
instance(s,sheep)
instance(f,flower)
instance(t,too)
instance(e2,eat-01)
instance(b,bush)
instance(l,little)
instance(a,abrupt)
instance(b2,bear-02)
instance(m,meditate-01)
instance(p,problem)
instance(l3,long-03)
instance(s2,silent)
instance(t2,thing)
instance(q,question-01)
instance(l2,lead-up-05)
instance(a2,anything)
ARG0(d,h)
ARG1(d,t3)
polarity-of(t3,e)
ARG0(e,s)
ARG1(e,f)
mod(f,t)
condition(e,e2)
ARG0(e2,s)
ARG1(e2,b)
mod(b,l)
manner(d,a)
conj-as-if(d,b2)
ARG0(b2,m)
ARG1(m,p)
poss(p,h)
ARG1-of(m,l3)
manner(m,s2)
ARG1(b2,t2)
ARG1-of(t2,q)
ARG2-of(d,l2)
polarity(l2,-)
ARG1(l2,a2)

(s / sheep)

instance(s,sheep)

(a / answer-01
      :ARG0 (i / i)
      :ARG1 (e / eat-01
            :ARG1 (a2 / anything
                  :ARG1-of (f / find-01
                        :ARG0 (i2 / it)
                        :location (r / reach-03
                              :ARG0 i2)))))

instance(a,answer-01)
instance(i,i)
instance(e,eat-01)
instance(a2,anything)
instance(f,find-01)
instance(i2,it)
instance(r,reach-03)
ARG0(a,i)
ARG1(a,e)
ARG1(e,a2)
ARG1-of(a2,f)
ARG0(f,i2)
location(f,r)
ARG0(r,i2)

(f / flower :polarity (a / amr-unknown)
      :mod (e / even)
      :ARG0-of (h / have-03
            :ARG1 (t / thorn)))

instance(f,flower)
instance(a,amr-unknown)
instance(e,even)
instance(h,have-03)
instance(t,thorn)
polarity(f,a)
mod(f,e)
ARG0-of(f,h)
ARG1(h,t)

(f / flower
      :mod (e / even)
      :ARG0-of (h / have-03
            :ARG1 (t / thorn)))

instance(f,flower)
instance(e,even)
instance(h,have-03)
instance(t,thorn)
mod(f,e)
ARG0-of(f,h)
ARG1(h,t)

(h / have-purpose-91
      :ARG1 (t / thorn)
      :ARG2 (a / amr-unknown)
      :ARG1-of (h2 / have-condition-91))

instance(h,have-purpose-91)
instance(t,thorn)
instance(a,amr-unknown)
instance(h2,have-condition-91)
ARG1(h,t)
ARG2(h,a)
ARG1-of(h,h2)

(k / know-01
  :ARG0 (i / i)
  :polarity -)

instance(k,know-01)
instance(i,i)
ARG0(k,i)
polarity(k,-)

(t / try-01
      :ARG0 (i / i
            :ARG1-of (b2 / busy-01
                  :degree (v / very)))
      :ARG1 (u / unscrew-01
            :ARG0 i
            :ARG1 (b / bolt
                  :ARG1-of (s / stick-01
                        :ARG2 (e / engine
                              :poss i))))
      :time (m / moment
            :mod (t2 / that)))

instance(t,try-01)
instance(i,i)
instance(b2,busy-01)
instance(v,very)
instance(u,unscrew-01)
instance(b,bolt)
instance(s,stick-01)
instance(e,engine)
instance(m,moment)
instance(t2,that)
ARG0(t,i)
ARG1-of(i,b2)
degree(b2,v)
ARG1(t,u)
ARG0(u,i)
ARG1(u,b)
ARG1-of(b,s)
ARG2(s,e)
poss(e,i)
time(t,m)
mod(m,t2)

(c2 / cause-01
      :ARG0 (c / clear-06
            :ARG1 (s / serious-02
                  :ARG1 (b / break-down-12
                        :ARG1 (p / plane
                              :poss i))
                  :degree (e / extreme))
            :ARG2 (i / i))
      :ARG1 (w / worry-01
            :ARG1 i
            :quant (m / much
                  :degree (v / very))))

instance(c2,cause-01)
instance(c,clear-06)
instance(s,serious-02)
instance(b,break-down-12)
instance(p,plane)
instance(e,extreme)
instance(i,i)
instance(w,worry-01)
instance(m,much)
instance(v,very)
ARG0(c2,c)
ARG1(c,s)
ARG1(s,b)
ARG1(b,p)
poss(p,i)
degree(s,e)
ARG2(c,i)
ARG1(c2,w)
ARG1(w,i)
quant(w,m)
degree(m,v)

(a / and
      :op1 (h3 / have-degree-91
            :ARG1 (w / water
                  :purpose (d / drink-01)
                  :ARG1-of (l2 / leave-17)
                  :ARG1-of (h / have-03
                        :ARG0 (i / i)))
            :ARG2 (l / little)
            :ARG3 (s / so)
            :ARG6 (o / obligate-01
                  :ARG1 i
                  :ARG2 (f / fear-01
                        :ARG0 i
                        :ARG1 (t / thing
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (b / bad-07)
                                    :ARG3 (m / most)))))))

instance(a,and)
instance(h3,have-degree-91)
instance(w,water)
instance(d,drink-01)
instance(l2,leave-17)
instance(h,have-03)
instance(i,i)
instance(l,little)
instance(s,so)
instance(o,obligate-01)
instance(f,fear-01)
instance(t,thing)
instance(h2,have-degree-91)
instance(b,bad-07)
instance(m,most)
op1(a,h3)
ARG1(h3,w)
purpose(w,d)
ARG1-of(w,l2)
ARG1-of(w,h)
ARG0(h,i)
ARG2(h3,l)
ARG3(h3,s)
ARG6(h3,o)
ARG1(o,i)
ARG2(o,f)
ARG0(f,i)
ARG1(f,t)
ARG1-of(t,h2)
ARG2(h2,b)
ARG3(h2,m)

(u / use-01
  :ARG1 (t / thorn)
  :ARG2 (a / amr-unknown))

instance(u,use-01)
instance(t,thorn)
instance(a,amr-unknown)
ARG1(u,t)
ARG2(u,a)

(l / let-01 :polarity -
      :ARG0 (p / prince
            :mod (l2 / little))
      :ARG1 (g / go-01
            :ARG1 (t / thing
                  :ARG1-of (q / question-01
                        :ARG0 p)))
      :time (o / once
            :op1 (a / ask-01
                  :ARG0 p
                  :ARG1 q)))

instance(l,let-01)
instance(p,prince)
instance(l2,little)
instance(g,go-01)
instance(t,thing)
instance(q,question-01)
instance(o,once)
instance(a,ask-01)
polarity(l,-)
ARG0(l,p)
mod(p,l2)
ARG1(l,g)
ARG1(g,t)
ARG1-of(t,q)
ARG0(q,p)
time(l,o)
op1(o,a)
ARG0(a,p)
ARG1(a,q)

(u / upset-01
      :ARG0 (b / bolt
            :mod (t / that))
      :ARG1 (i / i))

instance(u,upset-01)
instance(b,bolt)
instance(t,that)
instance(i,i)
ARG0(u,b)
mod(b,t)
ARG1(u,i)

(a / and
      :op1 (a2 / answer-01
            :ARG0 (i / i)
            :ARG2 (t / thing
                  :ord (o / ordinal-entity :value 1)
                  :ARG1-of (c / come-01
                        :ARG4 (h / head
                              :part-of i))
                  :domain (u / use-01 :polarity -
                        :ARG1 (t2 / thorn)
                        :ARG2 (a3 / at-all)))))

instance(a,and)
instance(a2,answer-01)
instance(i,i)
instance(t,thing)
instance(o,ordinal-entity)
instance(c,come-01)
instance(h,head)
instance(u,use-01)
instance(t2,thorn)
instance(a3,at-all)
op1(a,a2)
ARG0(a2,i)
ARG2(a2,t)
ord(t,o)
value(o,1)
ARG1-of(t,c)
ARG4(c,h)
part-of(h,i)
domain(t,u)
polarity(u,-)
ARG1(u,t2)
ARG2(u,a3)

(h / have-03
      :ARG0 (f / flower)
      :ARG1 (t / thorn)
      :purpose (s / spite)
      :mod (j / just))

instance(h,have-03)
instance(f,flower)
instance(t,thorn)
instance(s,spite)
instance(j,just)
ARG0(h,f)
ARG1(h,t)
purpose(h,s)
mod(h,j)

(o / oh :mode expressive)

instance(o,oh)
mode(o,expressive)

(m / moment
      :ARG1-of (c / compose-01
            :ARG2 (s / silent
                  :ARG1-of (c2 / complete-02))))

instance(m,moment)
instance(c,compose-01)
instance(s,silent)
instance(c2,complete-02)
ARG1-of(m,c)
ARG2(c,s)
ARG1-of(s,c2)

(f / flash-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (b / believe-01 :polarity -
            :ARG0 p
            :ARG1 i)
      :ARG2 (i / i)
      :time (t / then)
      :manner (r / resent-01
            :ARG0 p
            :mod (k / kind))
      :direction (b2 / back))

instance(f,flash-01)
instance(p,prince)
instance(l,little)
instance(b,believe-01)
instance(i,i)
instance(t,then)
instance(r,resent-01)
instance(k,kind)
instance(b2,back)
ARG0(f,p)
mod(p,l)
ARG1(f,b)
polarity(b,-)
ARG0(b,p)
ARG1(b,i)
ARG2(f,i)
time(f,t)
manner(f,r)
ARG0(r,p)
mod(r,k)
direction(f,b2)

(c / creature
      :ARG1-of (w / weak-02)
      :domain (f / flower))

instance(c,creature)
instance(w,weak-02)
instance(f,flower)
ARG1-of(c,w)
domain(c,f)

(n / naive
      :domain (t / they))

instance(n,naive)
instance(t,they)
domain(n,t)

(h / have-degree-91
      :ARG1 (r / reassure-01
            :ARG0 (t / they)
            :ARG1 t)
      :ARG2 (g / good-03
            :ARG1 t
            :ARG2 r)
      :ARG3 (e / equal)
      :ARG4 (p2 / possible-01
            :ARG1 (r2 / reassure-01
                  :ARG0 t
                  :ARG1 t)))

instance(h,have-degree-91)
instance(r,reassure-01)
instance(t,they)
instance(g,good-03)
instance(e,equal)
instance(p2,possible-01)
instance(r2,reassure-01)
ARG1(h,r)
ARG0(r,t)
ARG1(r,t)
ARG2(h,g)
ARG1(g,t)
ARG2(g,r)
ARG3(h,e)
ARG4(h,p2)
ARG1(p2,r2)
ARG0(r2,t)
ARG1(r2,t)

(b2 / believe-01
      :ARG0 (t / they)
      :ARG1 (w / weapon
            :domain (t2 / thorn
                  :poss t)
            :ARG1-of (t3 / terrible-01)))

instance(b2,believe-01)
instance(t,they)
instance(w,weapon)
instance(t2,thorn)
instance(t3,terrible-01)
ARG0(b2,t)
ARG1(b2,w)
domain(w,t2)
poss(t2,t)
ARG1-of(w,t3)

(a / answer-01
  :ARG0 (i / i)
  :polarity -)

instance(a,answer-01)
instance(i,i)
ARG0(a,i)
polarity(a,-)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (k / knock-out-03
            :ARG0 i
            :ARG1 b
            :ARG2 (h / hammer)
            :condition (t2 / turn-01 :polarity -
                  :ARG1 (b / bolt
                        :mod (t3 / this))
                  :mod (s2 / still)))
      :ARG2 i
      :time (i2 / instant
            :mod (t / that)))

instance(s,say-01)
instance(i,i)
instance(k,knock-out-03)
instance(h,hammer)
instance(t2,turn-01)
instance(b,bolt)
instance(t3,this)
instance(s2,still)
instance(i2,instant)
instance(t,that)
ARG0(s,i)
ARG1(s,k)
ARG0(k,i)
ARG1(k,b)
ARG2(k,h)
condition(k,t2)
polarity(t2,-)
ARG1(t2,b)
mod(b,t3)
mod(t2,s2)
ARG2(s,i)
time(s,i2)
mod(i2,t)

(d / disturb-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / think-01
            :ARG0 (i / i))
      :mod (a / again))

instance(d,disturb-01)
instance(p,prince)
instance(l,little)
instance(t,think-01)
instance(i,i)
instance(a,again)
ARG0(d,p)
mod(p,l)
ARG1(d,t)
ARG0(t,i)
mod(d,a)

(a / and
      :op1 (b / believe-01
            :ARG0 (y / you)
            :ARG1 (d / do-02
                  :ARG0 (f / flower))
            :ARG1-of (a2 / actual-02)))

instance(a,and)
instance(b,believe-01)
instance(y,you)
instance(d,do-02)
instance(f,flower)
instance(a2,actual-02)
op1(a,b)
ARG0(b,y)
ARG1(b,d)
ARG0(d,f)
ARG1-of(b,a2)

(n / no
      :mod (o / oh :mode expressive))

instance(n,no)
instance(o,oh)
mod(n,o)
mode(o,expressive)

(c / cry-01
  :ARG0 (i / i))

instance(c,cry-01)
instance(i,i)
ARG0(c,i)

(n / no :quant 3)

instance(n,no)
quant(n,3)

(b2 / believe-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (a2 / anything))

instance(b2,believe-01)
instance(i,i)
instance(a2,anything)
polarity(b2,-)
ARG0(b2,i)
ARG1(b2,a2)

(a / answer-01
      :ARG0 (i / i)
      :ARG1 (y / you)
      :ARG2 (t / thing
            :ord (o / ordinal-entity :value 1)
            :ARG1-of (c / come-01
                  :ARG4 (h / head
                        :part-of i))))

instance(a,answer-01)
instance(i,i)
instance(y,you)
instance(t,thing)
instance(o,ordinal-entity)
instance(c,come-01)
instance(h,head)
ARG0(a,i)
ARG1(a,y)
ARG2(a,t)
ord(t,o)
value(o,1)
ARG1-of(t,c)
ARG4(c,h)
part-of(h,i)

(s / see-01
      :ARG0 (y / you)
      :ARG1 (b / busy-01
            :ARG1 (i / i)
            :ARG2 (m / matter
                  :ARG1-of (c / consequential-01))
            :degree (v / very))
      :ARG1-of (r / request-confirmation-91))

instance(s,see-01)
instance(y,you)
instance(b,busy-01)
instance(i,i)
instance(m,matter)
instance(c,consequential-01)
instance(v,very)
instance(r,request-confirmation-91)
ARG0(s,y)
ARG1(s,b)
ARG1(b,i)
ARG2(b,m)
ARG1-of(m,c)
degree(b,v)
ARG1-of(s,r)

(s / stare-01
      :ARG0 (h / he
            :mod (t / thunderstruck))
      :ARG1 (i / i))

instance(s,stare-01)
instance(h,he)
instance(t,thunderstruck)
instance(i,i)
ARG0(s,h)
mod(h,t)
ARG1(s,i)

(m / matter
      :ARG1-of (c / consequential-01))

instance(m,matter)
instance(c,consequential-01)
ARG1-of(m,c)

(l / look-01
      :ARG0 (h / he)
      :ARG1 (i / i
            :ARG0-of (b2 / bend-01
                  :destination (d / down)
                  :location (o / object
                        :mod (u / ugly
                              :mod (s / seem-01
                                    :ARG2 h)
                              :degree (e2 / extreme))))
            :ARG0-of (h4 / have-03
                  :ARG1 (h2 / hammer
                        :poss i)
                  :location (h3 / hand
                        :part-of i))
            :ARG0-of (h5 / have-03
                  :ARG1 (f / finger
                        :part-of i
                        :ARG1-of (b / black-04
                              :ARG0 (g / grease
                                    :mod (e / engine))))))
      :location (t / there))

instance(l,look-01)
instance(h,he)
instance(i,i)
instance(b2,bend-01)
instance(d,down)
instance(o,object)
instance(u,ugly)
instance(s,seem-01)
instance(e2,extreme)
instance(h4,have-03)
instance(h2,hammer)
instance(h3,hand)
instance(h5,have-03)
instance(f,finger)
instance(b,black-04)
instance(g,grease)
instance(e,engine)
instance(t,there)
ARG0(l,h)
ARG1(l,i)
ARG0-of(i,b2)
destination(b2,d)
location(b2,o)
mod(o,u)
mod(u,s)
ARG2(s,h)
degree(u,e2)
ARG0-of(i,h4)
ARG1(h4,h2)
poss(h2,i)
location(h4,h3)
part-of(h3,i)
ARG0-of(i,h5)
ARG1(h5,f)
part-of(f,i)
ARG1-of(f,b)
ARG0(b,g)
mod(g,e)
location(l,t)

(t2 / talk-01
      :ARG0 (y / you)
      :ARG1-of (r / resemble-01
            :ARG2 (g2 / grown-up)
            :mod (j2 / just)))

instance(t2,talk-01)
instance(y,you)
instance(r,resemble-01)
instance(g2,grown-up)
instance(j2,just)
ARG0(t2,y)
ARG1-of(t2,r)
ARG2(r,g2)
mod(r,j2)

(s / shame-01
      :ARG0 (t / that)
      :ARG1 (i / i)
      :degree (l / little))

instance(s,shame-01)
instance(t,that)
instance(i,i)
instance(l,little)
ARG0(s,t)
ARG1(s,i)
degree(s,l)

(c / contrast-01
      :ARG2 (g / go-on-25
            :ARG0 (h / he)
            :ARG1 (m / mix-up-02
                  :ARG0 (y / you)
                  :ARG1 (e / everything)
                  :ARG3 (t / together))
            :manner (r / relentless)))

instance(c,contrast-01)
instance(g,go-on-25)
instance(h,he)
instance(m,mix-up-02)
instance(y,you)
instance(e,everything)
instance(t,together)
instance(r,relentless)
ARG2(c,g)
ARG0(g,h)
ARG1(g,m)
ARG0(m,y)
ARG1(m,e)
ARG3(m,t)
manner(g,r)

(c2 / confuse-01
      :ARG0 (y2 / you)
      :ARG2 (e2 / everything))

instance(c2,confuse-01)
instance(y2,you)
instance(e2,everything)
ARG0(c2,y2)
ARG2(c2,e2)

(a / angry
      :domain (h / he)
      :degree (v / very)
      :ARG1-of (r / real-04))

instance(a,angry)
instance(h,he)
instance(v,very)
instance(r,real-04)
domain(a,h)
degree(a,v)
ARG1-of(a,r)

(t / toss-01
  :ARG0 (h / he)
  :ARG1 (c / curl
          :poss h
          :mod (g / golden))
  :location (b / breeze))

instance(t,toss-01)
instance(h,he)
instance(c,curl)
instance(g,golden)
instance(b,breeze)
ARG0(t,h)
ARG1(t,c)
poss(c,h)
mod(c,g)
location(t,b)

(k / know-02
      :ARG0 (i / i)
      :ARG1 (p / planet
            :location-of (g2 / gentleman
                  :mod (c / certain)
                  :part (f / face
                        :ARG1-of (r / red-02)))))

instance(k,know-02)
instance(i,i)
instance(p,planet)
instance(g2,gentleman)
instance(c,certain)
instance(f,face)
instance(r,red-02)
ARG0(k,i)
ARG1(k,p)
location-of(p,g2)
mod(g2,c)
part(g2,f)
ARG1-of(f,r)

(s / smell-01 :polarity -
      :ARG0 (h / he)
      :ARG1 (f / flower)
      :time (e / ever))

instance(s,smell-01)
instance(h,he)
instance(f,flower)
instance(e,ever)
polarity(s,-)
ARG0(s,h)
ARG1(s,f)
time(s,e)

(l / look-01 :polarity -
      :ARG0 (h / he)
      :ARG1 (s / star)
      :time (e / ever))

instance(l,look-01)
instance(h,he)
instance(s,star)
instance(e,ever)
polarity(l,-)
ARG0(l,h)
ARG1(l,s)
time(l,e)

(l2 / love-01 :polarity -
      :ARG0 (h3 / he)
      :ARG1 (a2 / anyone)
      :time (e / ever))

instance(l2,love-01)
instance(h3,he)
instance(a2,anyone)
instance(e,ever)
polarity(l2,-)
ARG0(l2,h3)
ARG1(l2,a2)
time(l2,e)

(d / do-02 :polarity -
      :ARG0 (h / he)
      :ARG1 (a2 / anything)
      :time (l / live-01
            :ARG0 h)
      :time (e / ever)
      :ARG2-of (e2 / except-01
            :ARG1 (a / add-up-04
                  :ARG0 h
                  :ARG1 (f / figure))))

instance(d,do-02)
instance(h,he)
instance(a2,anything)
instance(l,live-01)
instance(e,ever)
instance(e2,except-01)
instance(a,add-up-04)
instance(f,figure)
polarity(d,-)
ARG0(d,h)
ARG1(d,a2)
time(d,l)
ARG0(l,h)
time(d,e)
ARG2-of(d,e2)
ARG1(e2,a)
ARG0(a,h)
ARG1(a,f)

(m2 / multi-sentence
      :snt1 (a / and
            :op1 (s / say-01
                  :ARG0 (h / he)
                  :ARG1 (b / busy-01
                        :ARG1 h
                        :ARG2 (m / matter
                              :ARG1-of (c / consequential-01)))
                  :time (d / day
                        :mod (a2 / all))
                  :frequency (o / over-and-over)
                  :manner (r / resemble-01
                        :ARG2 (y / you)
                        :mod (j / just))
                  :ARG0-of (c3 / cause-01)))
      :snt2 (a3 / and
            :op1 (m3 / make-02
                  :ARG0 (t / that)
                  :ARG1 (s2 / swell-01
                        :ARG0 t
                        :ARG1 h2
                        :manner (p / pride-01
                              :ARG0 (h2 / he)
                              :ARG2 t)))))

instance(m2,multi-sentence)
instance(a,and)
instance(s,say-01)
instance(h,he)
instance(b,busy-01)
instance(m,matter)
instance(c,consequential-01)
instance(d,day)
instance(a2,all)
instance(o,over-and-over)
instance(r,resemble-01)
instance(y,you)
instance(j,just)
instance(c3,cause-01)
instance(a3,and)
instance(m3,make-02)
instance(t,that)
instance(s2,swell-01)
instance(p,pride-01)
instance(h2,he)
snt1(m2,a)
op1(a,s)
ARG0(s,h)
ARG1(s,b)
ARG1(b,h)
ARG2(b,m)
ARG1-of(m,c)
time(s,d)
mod(d,a2)
frequency(s,o)
manner(s,r)
ARG2(r,y)
mod(r,j)
ARG0-of(s,c3)
snt2(m2,a3)
op1(a3,m3)
ARG0(m3,t)
ARG1(m3,s2)
ARG0(s2,t)
ARG1(s2,h2)
manner(s2,p)
ARG0(p,h2)
ARG2(p,t)

(c / contrast-01
      :ARG2 (a / and
            :op1 (m / man :polarity -
                  :domain h)
            :op2 (m2 / mushroom
                  :domain (h / he))))

instance(c,contrast-01)
instance(a,and)
instance(m,man)
instance(m2,mushroom)
instance(h,he)
ARG2(c,a)
op1(a,m)
polarity(m,-)
domain(m,h)
op2(a,m2)
domain(m2,h)

(a / amr-unknown)

instance(a,amr-unknown)

(m / mushroom)

instance(m,mushroom)

(w / white-03
      :ARG1 (p / prince
            :mod (l / little))
      :time (n / now)
      :ARG1-of (c / cause-01
            :ARG0 (e / enrage-01
                  :ARG1 p)))

instance(w,white-03)
instance(p,prince)
instance(l,little)
instance(n,now)
instance(c,cause-01)
instance(e,enrage-01)
ARG1(w,p)
mod(p,l)
time(w,n)
ARG1-of(w,c)
ARG0(c,e)
ARG1(e,p)

(g / grow-03
      :ARG0 (f / flower)
      :ARG1 (t / thorn)
      :duration (m / multiple
            :op1 (t2 / temporal-quantity :quant 1000000
                  :unit (y / year))))

instance(g,grow-03)
instance(f,flower)
instance(t,thorn)
instance(m,multiple)
instance(t2,temporal-quantity)
instance(y,year)
ARG0(g,f)
ARG1(g,t)
duration(g,m)
op1(m,t2)
quant(t2,1000000)
unit(t2,y)

(e / eat-01
      :ARG0 (s / sheep)
      :ARG1 (t / they)
      :duration (m / multiple
            :op1 (t2 / temporal-quantity :quant 1000000
                  :unit (y / year)))
      :ARG1-of (h / have-concession-91))

instance(e,eat-01)
instance(s,sheep)
instance(t,they)
instance(m,multiple)
instance(t2,temporal-quantity)
instance(y,year)
instance(h,have-concession-91)
ARG0(e,s)
ARG1(e,t)
duration(e,m)
op1(m,t2)
quant(t2,1000000)
unit(t2,y)
ARG1-of(e,h)

(a / and
      :op1 (c / consequential-01
            :ARG1 (t / try-01
                  :ARG1 (u / understand-01
                        :ARG1 (t4 / thing
                              :ARG0-of (c2 / cause-01
                                    :ARG1 (t2 / trouble-05
                                          :ARG1 (f / flower)
                                          :ARG2 (g2 / grow-01
                                                :ARG0 f
                                                :ARG1 (t3 / thorn
                                                      :ARG1-of (u2 / use-01 :polarity -
                                                            :ARG0 f
                                                            :time (e2 / ever))))
                                          :quant (m / much
                                                :degree (s / so)))))))
            :ARG1-of (r / request-confirmation-91)))

instance(a,and)
instance(c,consequential-01)
instance(t,try-01)
instance(u,understand-01)
instance(t4,thing)
instance(c2,cause-01)
instance(t2,trouble-05)
instance(f,flower)
instance(g2,grow-01)
instance(t3,thorn)
instance(u2,use-01)
instance(e2,ever)
instance(m,much)
instance(s,so)
instance(r,request-confirmation-91)
op1(a,c)
ARG1(c,t)
ARG1(t,u)
ARG1(u,t4)
ARG0-of(t4,c2)
ARG1(c2,t2)
ARG1(t2,f)
ARG2(t2,g2)
ARG0(g2,f)
ARG1(g2,t3)
ARG1-of(t3,u2)
polarity(u2,-)
ARG0(u2,f)
time(u2,e2)
quant(t2,m)
degree(m,s)
ARG1-of(c,r)

(i / important-01
      :ARG1 (w / war-01
            :ARG0 (s / sheep)
            :ARG1 (f / flower))
      :ARG1-of (r / request-confirmation-91))

instance(i,important-01)
instance(w,war-01)
instance(s,sheep)
instance(f,flower)
instance(r,request-confirmation-91)
ARG1(i,w)
ARG0(w,s)
ARG1(w,f)
ARG1-of(i,r)

(h3 / have-degree-91
      :ARG1 (t / this)
      :ARG2 (c / consequential-01
            :ARG1 t)
      :ARG3 (m2 / more)
      :ARG4 (s / sum
            :poss (g / gentleman
                  :ARG1-of (f / fat-03)
                  :part (f2 / face
                        :ARG1-of (r / red-02))))
      :ARG1-of (r2 / request-confirmation-91))

instance(h3,have-degree-91)
instance(t,this)
instance(c,consequential-01)
instance(m2,more)
instance(s,sum)
instance(g,gentleman)
instance(f,fat-03)
instance(f2,face)
instance(r,red-02)
instance(r2,request-confirmation-91)
ARG1(h3,t)
ARG2(h3,c)
ARG1(c,t)
ARG3(h3,m2)
ARG4(h3,s)
poss(s,g)
ARG1-of(g,f)
part(g,f2)
ARG1-of(f2,r)
ARG1-of(h3,r2)

(a / and
      :op1 (o / oh :mode expressive
            :condition (k / know-02
                  :ARG0 (i / i)
                  :ARG1 (f / flower :quant 1
                        :ARG1-of (u / unique-01
                              :ARG3 (w / world))
                        :ARG1-of (g / grow-01
                              :location (c / contrast-01
                                    :ARG0 (n / nowhere)
                                    :ARG1 (p / planet
                                          :poss i)))
                        :ARG1-of (d / destroy-01
                              :ARG0 (s / sheep :quant 1
                                    :mod (l / little)
                                    :ARG0-of (n2 / notice-01 :polarity -
                                          :ARG1 d))
                              :ARG2 (b / bite-01 :quant 1
                                    :ARG1-of (s3 / single-02))
                              :ARG2-of c2
                              :ARG1-of (p2 / possible-01)
                              :time (d2 / date-entity
                                    :dayperiod (m / morning)
                                    :mod (s2 / some))))
                  :ARG1-of (c2 / contrast-01))))

instance(a,and)
instance(o,oh)
instance(k,know-02)
instance(i,i)
instance(f,flower)
instance(u,unique-01)
instance(w,world)
instance(g,grow-01)
instance(c,contrast-01)
instance(n,nowhere)
instance(p,planet)
instance(d,destroy-01)
instance(s,sheep)
instance(l,little)
instance(n2,notice-01)
instance(b,bite-01)
instance(s3,single-02)
instance(p2,possible-01)
instance(d2,date-entity)
instance(m,morning)
instance(s2,some)
instance(c2,contrast-01)
op1(a,o)
mode(o,expressive)
condition(o,k)
ARG0(k,i)
ARG1(k,f)
quant(f,1)
ARG1-of(f,u)
ARG3(u,w)
ARG1-of(f,g)
location(g,c)
ARG0(c,n)
ARG1(c,p)
poss(p,i)
ARG1-of(f,d)
ARG0(d,s)
quant(s,1)
mod(s,l)
ARG0-of(s,n2)
polarity(n2,-)
ARG1(n2,d)
ARG2(d,b)
quant(b,1)
ARG1-of(b,s3)
ARG2-of(d,c2)
ARG1-of(d,p2)
time(d,d2)
dayperiod(d2,m)
mod(d2,s2)
ARG1-of(k,c2)

(t / think-01
      :ARG0 (y / you)
      :ARG1 (t2 / that
            :ARG1-of (i / important-01 :polarity -)))

instance(t,think-01)
instance(y,you)
instance(t2,that)
instance(i,important-01)
ARG0(t,y)
ARG1(t,t2)
ARG1-of(t2,i)
polarity(i,-)

(t / turn-02
      :ARG1 (f / face
            :part-of (h / he))
      :ARG2 (r / red-02
            :ARG1 f)
      :ARG3 (w / white-03
            :ARG1 f)
      :time (c / continue-02
            :ARG0 h
            :ARG1 (h3 / have-quant-91
                  :ARG1 (l / love-01
                        :ARG0 (s / someone)
                        :ARG1 (f2 / flower
                              :part (b / blossom :quant 1
                                    :mod (j / just)
                                    :ARG1-of (g / grow-01
                                          :location (s2 / star
                                                :mod (a2 / all)
                                                :quant (m2 / multiple :op1 1000000)))
                                    :ARG1-of (s4 / single-02))))
                  :ARG3 (e / enough)
                  :ARG6 (m / make-02
                        :ARG0 l
                        :ARG1 (h2 / happy-01
                              :ARG1 s)
                        :ARG1-of (c2 / cause-01
                              :ARG0 (l2 / look-01
                                    :ARG0 s
                                    :ARG1 s2
                                    :mod (j2 / just)))))))

instance(t,turn-02)
instance(f,face)
instance(h,he)
instance(r,red-02)
instance(w,white-03)
instance(c,continue-02)
instance(h3,have-quant-91)
instance(l,love-01)
instance(s,someone)
instance(f2,flower)
instance(b,blossom)
instance(j,just)
instance(g,grow-01)
instance(s2,star)
instance(a2,all)
instance(m2,multiple)
instance(s4,single-02)
instance(e,enough)
instance(m,make-02)
instance(h2,happy-01)
instance(c2,cause-01)
instance(l2,look-01)
instance(j2,just)
ARG1(t,f)
part-of(f,h)
ARG2(t,r)
ARG1(r,f)
ARG3(t,w)
ARG1(w,f)
time(t,c)
ARG0(c,h)
ARG1(c,h3)
ARG1(h3,l)
ARG0(l,s)
ARG1(l,f2)
part(f2,b)
quant(b,1)
mod(b,j)
ARG1-of(b,g)
location(g,s2)
mod(s2,a2)
quant(s2,m2)
op1(m2,1000000)
ARG1-of(b,s4)
ARG3(h3,e)
ARG6(h3,m)
ARG0(m,l)
ARG1(m,h2)
ARG1(h2,s)
ARG1-of(m,c2)
ARG0(c2,l2)
ARG0(l2,s)
ARG1(l2,s2)
mod(l2,j2)

(p2 / possible-01
      :ARG1 (s / say-01
            :ARG0 (h / he)
            :ARG1 (c / contrast-01
                  :ARG1 (b / be-located-at-91
                        :ARG1 (f2 / flower
                              :poss h)
                        :ARG2 (t2 / there))
                  :ARG2 (d / darken-01
                        :ARG1 (s4 / star
                              :mod (a / all)
                              :poss h)
                        :condition (e2 / eat-01
                              :ARG0 (s3 / sheep)
                              :ARG1 f2)
                        :time (m / moment :quant 1)))
            :ARG2 h))

instance(p2,possible-01)
instance(s,say-01)
instance(h,he)
instance(c,contrast-01)
instance(b,be-located-at-91)
instance(f2,flower)
instance(t2,there)
instance(d,darken-01)
instance(s4,star)
instance(a,all)
instance(e2,eat-01)
instance(s3,sheep)
instance(m,moment)
ARG1(p2,s)
ARG0(s,h)
ARG1(s,c)
ARG1(c,b)
ARG1(b,f2)
poss(f2,h)
ARG2(b,t2)
ARG2(c,d)
ARG1(d,s4)
mod(s4,a)
poss(s4,h)
condition(d,e2)
ARG0(e2,s3)
ARG1(e2,f2)
time(d,m)
quant(m,1)
ARG2(s,h)

(a2 / and
      :op1 (t / think-01
            :ARG0 (y / you)
            :ARG1 (i / important-01 :polarity -
                  :ARG1 (t2 / that))))

instance(a2,and)
instance(t,think-01)
instance(y,you)
instance(i,important-01)
instance(t2,that)
op1(a2,t)
ARG0(t,y)
ARG1(t,i)
polarity(i,-)
ARG1(i,t2)

(p / possible-01 :polarity -
      :ARG1 (s / say-01
            :ARG0 (h / he)
            :ARG1 (a / anything
                  :mod (m / more))))

instance(p,possible-01)
instance(s,say-01)
instance(h,he)
instance(a,anything)
instance(m,more)
polarity(p,-)
ARG1(p,s)
ARG0(s,h)
ARG1(s,a)
mod(a,m)

(c / choke-up-04
      :ARG0 (s / sob-01)
      :ARG1 (w / word
            :poss (h / he)))

instance(c,choke-up-04)
instance(s,sob-01)
instance(w,word)
instance(h,he)
ARG0(c,s)
ARG1(c,w)
poss(w,h)

(f / fall-04
  :ARG1 (n / night))

instance(f,fall-04)
instance(n,night)
ARG1(f,n)

(l / let-01
      :ARG0 (i / i)
      :ARG1 (d / drop-01
            :ARG1 (t / tool
                  :poss i)
            :ARG3 (h / hand
                  :part-of i)))

instance(l,let-01)
instance(i,i)
instance(d,drop-01)
instance(t,tool)
instance(h,hand)
ARG0(l,i)
ARG1(l,d)
ARG1(d,t)
poss(t,i)
ARG3(d,h)
part-of(h,i)

(o / or
      :op1 (h / hammer
            :poss (i / i))
      :op2 (b / bolt
            :poss i)
      :op3 (t / thirst-01
            :ARG0 i)
      :op4 (d / die-01
            :ARG1 i)
      :time (m / moment
            :mod (a / amr-unknown)))

instance(o,or)
instance(h,hammer)
instance(i,i)
instance(b,bolt)
instance(t,thirst-01)
instance(d,die-01)
instance(m,moment)
instance(a,amr-unknown)
op1(o,h)
poss(h,i)
op2(o,b)
poss(b,i)
op3(o,t)
ARG0(t,i)
op4(o,d)
ARG1(d,i)
time(o,m)
mod(m,a)

(b / be-located-at-91
      :ARG1 (p / prince
            :mod (l / little)
            :ARG1-of (c / comfort-01
                  :ARG2-of (o / obligate-01)))
      :ARG2 (a / and
            :op1 (s / star :quant 1)
            :op2 (p2 / planet :quant 1)
            :op3 (p4 / planet :wiki "Earth"
                  :name (n / name :op1 "Earth")
                  :poss (i / i))))

instance(b,be-located-at-91)
instance(p,prince)
instance(l,little)
instance(c,comfort-01)
instance(o,obligate-01)
instance(a,and)
instance(s,star)
instance(p2,planet)
instance(p4,planet)
instance(n,name)
instance(i,i)
ARG1(b,p)
mod(p,l)
ARG1-of(p,c)
ARG2-of(c,o)
ARG2(b,a)
op1(a,s)
quant(s,1)
op2(a,p2)
quant(p2,1)
op3(a,p4)
wiki(p4,"Earth")
name(p4,n)
op1(n,"Earth")
poss(p4,i)

(a / and
      :op1 (t / take-01
            :ARG0 (i / i)
            :ARG1 (h / he)
            :ARG3 (a2 / arm
                  :part-of i))
      :op2 (r / rock-01
            :ARG0 i
            :ARG1 h))

instance(a,and)
instance(t,take-01)
instance(i,i)
instance(h,he)
instance(a2,arm)
instance(r,rock-01)
op1(a,t)
ARG0(t,i)
ARG1(t,h)
ARG3(t,a2)
part-of(a2,i)
op2(a,r)
ARG0(r,i)
ARG1(r,h)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (e / endanger-01 :polarity -
            :ARG1 (f / flower
                  :ARG1-of (l / love-01
                        :ARG0 h)))
      :ARG2 (h / he))

instance(s,say-01)
instance(i,i)
instance(e,endanger-01)
instance(f,flower)
instance(l,love-01)
instance(h,he)
ARG0(s,i)
ARG1(s,e)
polarity(e,-)
ARG1(e,f)
ARG1-of(f,l)
ARG0(l,h)
ARG2(s,h)

(d / draw-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG2-of (m / muzzle-01
                  :ARG1 (s / sheep
                        :poss y)))
      :ARG2 (y / you))

instance(d,draw-01)
instance(i,i)
instance(t,thing)
instance(m,muzzle-01)
instance(s,sheep)
instance(y,you)
ARG0(d,i)
ARG1(d,t)
ARG2-of(t,m)
ARG1(m,s)
poss(s,y)
ARG2(d,y)

(d2 / draw-01
      :ARG0 (i / i)
      :ARG1 (r / railing
            :ARG1-of (p / put-01
                  :ARG2 (a / around
                        :op1 (f / flower
                              :poss y))))
      :ARG2 (y / you))

instance(d2,draw-01)
instance(i,i)
instance(r,railing)
instance(p,put-01)
instance(a,around)
instance(f,flower)
instance(y,you)
ARG0(d2,i)
ARG1(d2,r)
ARG1-of(r,p)
ARG2(p,a)
op1(a,f)
poss(f,y)
ARG2(d2,y)

(d / do-02
      :ARG0 (i / i))

instance(d,do-02)
instance(i,i)
ARG0(d,i)

(k / know-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG1-of (s / say-01
                  :ARG0 i
                  :ARG2 (h / he))))

instance(k,know-01)
instance(i,i)
instance(t,thing)
instance(s,say-01)
instance(h,he)
polarity(k,-)
ARG0(k,i)
ARG1(k,t)
ARG1-of(t,s)
ARG0(s,i)
ARG2(s,h)

(f / feel-01
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (a2 / awkward)
            :op2 (b / blunder-01
                  :ARG0 i)))

instance(f,feel-01)
instance(i,i)
instance(a,and)
instance(a2,awkward)
instance(b,blunder-01)
ARG0(f,i)
ARG1(f,a)
op1(a,a2)
op2(a,b)
ARG0(b,i)

(k / know-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (a2 / and
            :op1 (m / manner
                  :manner-of (r / reach-02
                        :ARG0 i
                        :ARG1 (h / he)
                        :ARG1-of (p / possible-01)))
            :op2 (l / location
                  :location-of (o / overtake-01
                        :ARG0 i
                        :ARG1 h
                        :ARG1-of (p2 / possible-01))
                  :location-of (g / go-on-15
                        :ARG1 i
                        :mod (a3 / again
                              :mod (o2 / once))
                        :manner (a / accompany-01
                              :ARG0 h
                              :ARG1 i
                              :manner (h2 / hand-in-hand))))))

instance(k,know-01)
instance(i,i)
instance(a2,and)
instance(m,manner)
instance(r,reach-02)
instance(h,he)
instance(p,possible-01)
instance(l,location)
instance(o,overtake-01)
instance(p2,possible-01)
instance(g,go-on-15)
instance(a3,again)
instance(o2,once)
instance(a,accompany-01)
instance(h2,hand-in-hand)
polarity(k,-)
ARG0(k,i)
ARG1(k,a2)
op1(a2,m)
manner-of(m,r)
ARG0(r,i)
ARG1(r,h)
ARG1-of(r,p)
op2(a2,l)
location-of(l,o)
ARG0(o,i)
ARG1(o,h)
ARG1-of(o,p2)
location-of(l,g)
ARG1(g,i)
mod(g,a3)
mod(a3,o2)
manner(g,a)
ARG0(a,h)
ARG1(a,i)
manner(a,h2)

(p / place
      :mod (s / secret
            :degree (s2 / such))
      :domain (l / land
            :location-of (t / tear)))

instance(p,place)
instance(s,secret)
instance(s2,such)
instance(l,land)
instance(t,tear)
mod(p,s)
degree(s,s2)
domain(p,l)
location-of(l,t)

(c / chapter :mod 8)

instance(c,chapter)
mod(c,8)

(l / learn-01
      :ARG0 (i / i)
      :ARG1 (k / know-02
            :ARG0 i
            :ARG1 (f / flower
                  :mod (t / this))
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-03
                        :ARG1 k)
                  :ARG3 (m / more)))
      :time (s / soon))

instance(l,learn-01)
instance(i,i)
instance(k,know-02)
instance(f,flower)
instance(t,this)
instance(h,have-degree-91)
instance(g,good-03)
instance(m,more)
instance(s,soon)
ARG0(l,i)
ARG1(l,k)
ARG0(k,i)
ARG1(k,f)
mod(f,t)
ARG1-of(k,h)
ARG2(h,g)
ARG1(g,k)
ARG3(h,m)
time(l,s)

(s / simple-02
      :ARG1 (f / flower)
      :degree (v / very)
      :time (a / always)
      :location (p / planet
            :poss (p2 / prince
                  :mod (l / little))))

instance(s,simple-02)
instance(f,flower)
instance(v,very)
instance(a,always)
instance(p,planet)
instance(p2,prince)
instance(l,little)
ARG1(s,f)
degree(s,v)
time(s,a)
location(s,p)
poss(p,p2)
mod(p2,l)

(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (t / they)
            :ARG1 (r / ring :quant 1
                  :mod (o / only)
                  :consist-of (p / petal)))
      :snt2 (t2 / take-up-13 :polarity -
            :ARG0 t
            :ARG1 (r2 / room)
            :degree (a / at-all))
      :snt3 (t3 / trouble-01 :polarity -
            :ARG0 t
            :ARG1 (a2 / anybody)))

instance(m,multi-sentence)
instance(h,have-03)
instance(t,they)
instance(r,ring)
instance(o,only)
instance(p,petal)
instance(t2,take-up-13)
instance(r2,room)
instance(a,at-all)
instance(t3,trouble-01)
instance(a2,anybody)
snt1(m,h)
ARG0(h,t)
ARG1(h,r)
quant(r,1)
mod(r,o)
consist-of(r,p)
snt2(m,t2)
polarity(t2,-)
ARG0(t2,t)
ARG1(t2,r2)
degree(t2,a)
snt3(m,t3)
polarity(t3,-)
ARG0(t3,t)
ARG1(t3,a2)

(a / and
      :op1 (a2 / appear-01
            :ARG1 (t / they)
            :time (d / date-entity
                  :dayperiod (m / morning)
                  :mod (o / one))
            :location (g / grass))
      :op2 (f / fade-01
            :ARG1 t
            :manner (p / peaceful)
            :time (b / by
                  :op1 (n / night))))

instance(a,and)
instance(a2,appear-01)
instance(t,they)
instance(d,date-entity)
instance(m,morning)
instance(o,one)
instance(g,grass)
instance(f,fade-01)
instance(p,peaceful)
instance(b,by)
instance(n,night)
op1(a,a2)
ARG1(a2,t)
time(a2,d)
dayperiod(d,m)
mod(d,o)
location(a2,g)
op2(a,f)
ARG1(f,t)
manner(f,p)
time(f,b)
op1(b,n)

(a / and
      :op1 (c / contrast-01
            :ARG2 (c2 / come-up-13
                  :ARG1 (f / flower
                        :ARG1-of (n / new-01)
                        :source (s / seed
                              :ARG1-of (b / blow-01
                                    :source (l2 / location
                                          :ARG1-of (k / know-01 :polarity -)))))
                  :time (d / day
                        :mod (o / one))))
      :op2 (w / watch-over-03
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (s2 / sprout
                  :mod (s3 / small)
                  :mod (t / this)
                  :ARG1-of (r / resemble-01 :polarity -
                        :ARG2 (s4 / sprout
                              :mod (s5 / small)
                              :mod (o2 / other
                                    :mod (a3 / any))
                              :location (p2 / planet
                                    :poss p))))
            :ARG1-of (c3 / close-10
                  :degree (v / very))))

instance(a,and)
instance(c,contrast-01)
instance(c2,come-up-13)
instance(f,flower)
instance(n,new-01)
instance(s,seed)
instance(b,blow-01)
instance(l2,location)
instance(k,know-01)
instance(d,day)
instance(o,one)
instance(w,watch-over-03)
instance(p,prince)
instance(l,little)
instance(s2,sprout)
instance(s3,small)
instance(t,this)
instance(r,resemble-01)
instance(s4,sprout)
instance(s5,small)
instance(o2,other)
instance(a3,any)
instance(p2,planet)
instance(c3,close-10)
instance(v,very)
op1(a,c)
ARG2(c,c2)
ARG1(c2,f)
ARG1-of(f,n)
source(f,s)
ARG1-of(s,b)
source(b,l2)
ARG1-of(l2,k)
polarity(k,-)
time(c2,d)
mod(d,o)
op2(a,w)
ARG0(w,p)
mod(p,l)
ARG1(w,s2)
mod(s2,s3)
mod(s2,t)
ARG1-of(s2,r)
polarity(r,-)
ARG2(r,s4)
mod(s4,s5)
mod(s4,o2)
mod(o2,a3)
location(s4,p2)
poss(p2,p)
ARG1-of(w,c3)
degree(c3,v)

(p / possible-01
      :ARG1 (b2 / baobab
            :mod (k / kind
                  :ARG1-of (n / new-01))
            :domain (i / it)))

instance(p,possible-01)
instance(b2,baobab)
instance(k,kind)
instance(n,new-01)
instance(i,it)
ARG1(p,b2)
mod(b2,k)
ARG1-of(k,n)
domain(b2,i)

(a / and
      :op1 (s / stop-01
            :ARG0 (s2 / shrub)
            :ARG1 (g / grow-01
                  :ARG1 s2)
            :time (s3 / soon))
      :op2 (b / begin-01
            :ARG0 s2
            :ARG1 (r / ready-01
                  :ARG0 s2
                  :ARG1 s2
                  :ARG2 (p / produce-01
                        :ARG0 s2
                        :ARG1 (f / flower)))))

instance(a,and)
instance(s,stop-01)
instance(s2,shrub)
instance(g,grow-01)
instance(s3,soon)
instance(b,begin-01)
instance(r,ready-01)
instance(p,produce-01)
instance(f,flower)
op1(a,s)
ARG0(s,s2)
ARG1(s,g)
ARG1(g,s2)
time(s,s3)
op2(a,b)
ARG0(b,s2)
ARG1(b,r)
ARG0(r,s2)
ARG1(r,s2)
ARG2(r,p)
ARG0(p,s2)
ARG1(p,f)

(f / feel-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG1-of (p2 / present-02
                  :ARG2 (a / appear-01
                        :ARG1 (b / bud
                              :mod (h / huge))
                        :ord (o2 / ordinal-entity :value 1))))
      :ARG1 (o / obligate-01
            :ARG2 (e / emerge-01
                  :ARG0 (t / thing
                        :ARG1-of (a4 / appear-01
                              :manner (m / miraculous))
                        :mod (s / sort))
                  :ARG1 b))
      :time (a2 / at-once-01))

instance(f,feel-01)
instance(p,prince)
instance(l,little)
instance(p2,present-02)
instance(a,appear-01)
instance(b,bud)
instance(h,huge)
instance(o2,ordinal-entity)
instance(o,obligate-01)
instance(e,emerge-01)
instance(t,thing)
instance(a4,appear-01)
instance(m,miraculous)
instance(s,sort)
instance(a2,at-once-01)
ARG0(f,p)
mod(p,l)
ARG1-of(p,p2)
ARG2(p2,a)
ARG1(a,b)
mod(b,h)
ord(a,o2)
value(o2,1)
ARG1(f,o)
ARG2(o,e)
ARG0(e,t)
ARG1-of(t,a4)
manner(a4,m)
mod(t,s)
ARG1(e,b)
time(f,a2)

(c / contrast-01
      :ARG1 (s / satisfy-01 :polarity -
            :ARG0 (c2 / complete-01
                  :ARG0 f
                  :ARG1 (p / prepare-02
                        :ARG0 f
                        :ARG1 (b / beautiful-02
                              :ARG1 f))
                  :location (c3 / chamber
                        :ARG1-of (g / green-02)
                        :poss f
                        :ARG2-of (s2 / shelter-01)))
            :ARG1 (f / flower)))

instance(c,contrast-01)
instance(s,satisfy-01)
instance(c2,complete-01)
instance(p,prepare-02)
instance(b,beautiful-02)
instance(c3,chamber)
instance(g,green-02)
instance(s2,shelter-01)
instance(f,flower)
ARG1(c,s)
polarity(s,-)
ARG0(s,c2)
ARG0(c2,f)
ARG1(c2,p)
ARG0(p,f)
ARG1(p,b)
ARG1(b,f)
location(c2,c3)
ARG1-of(c3,g)
poss(c3,f)
ARG2-of(c3,s2)
ARG1(s,f)

(c / choose-01
      :ARG0 (s / she)
      :ARG1 (c2 / color
            :poss s)
      :manner (c3 / care-04
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / great)
                  :ARG3 (m / most))))

instance(c,choose-01)
instance(s,she)
instance(c2,color)
instance(c3,care-04)
instance(h,have-degree-91)
instance(g,great)
instance(m,most)
ARG0(c,s)
ARG1(c,c2)
poss(c2,s)
manner(c,c3)
ARG1-of(c3,h)
ARG2(h,g)
ARG3(h,m)

(a / adjust-01
  :ARG0 (s / she)
  :ARG1 (p / petal
          :poss s)
  :manner (o / one-by-one))

instance(a,adjust-01)
instance(s,she)
instance(p,petal)
instance(o,one-by-one)
ARG0(a,s)
ARG1(a,p)
poss(p,s)
manner(a,o)

(w / wish-01 :polarity -
      :ARG0 (s / she
            :ARG1-of (r / rumple-02
                  :mod (a / all))
            :ARG1-of (r2 / resemble-01
                  :ARG2 (p / poppy
                        :mod (f / field))))
      :ARG1 (g / go-out-17
            :ARG0 s
            :destination (w2 / world)))

instance(w,wish-01)
instance(s,she)
instance(r,rumple-02)
instance(a,all)
instance(r2,resemble-01)
instance(p,poppy)
instance(f,field)
instance(g,go-out-17)
instance(w2,world)
polarity(w,-)
ARG0(w,s)
ARG1-of(s,r)
mod(r,a)
ARG1-of(s,r2)
ARG2(r2,p)
mod(p,f)
ARG1(w,g)
ARG0(g,s)
destination(g,w2)

(w / wish-01
      :ARG0 (s / she)
      :ARG1 (a / appear-01
            :ARG1 s
            :manner (r / radiate-01
                  :ARG0 s
                  :ARG1 (b / beautiful-02
                        :ARG1 s)
                  :degree (f2 / full)
                  :mod (o / only))))

instance(w,wish-01)
instance(s,she)
instance(a,appear-01)
instance(r,radiate-01)
instance(b,beautiful-02)
instance(f2,full)
instance(o,only)
ARG0(w,s)
ARG1(w,a)
ARG1(a,s)
manner(a,r)
ARG0(r,s)
ARG1(r,b)
ARG1(b,s)
degree(r,f2)
mod(r,o)

(y / yes)

instance(y,yes)

(r / resemble-01
      :ARG1 (s / she)
      :ARG2 (c / creature
            :mod (c2 / coquet)))

instance(r,resemble-01)
instance(s,she)
instance(c,creature)
instance(c2,coquet)
ARG1(r,s)
ARG2(r,c)
mod(c,c2)

(a / and
      :op1 (l / last-01
            :ARG1 (t / thing
                  :ARG2-of (a2 / adorn-01
                        :ARG1 (s / she)
                        :mod (m / mysterious)))
            :ARG2 (m2 / multiple
                  :op1 (t2 / temporal-quantity :quant 1
                        :unit (d / day)))))

instance(a,and)
instance(l,last-01)
instance(t,thing)
instance(a2,adorn-01)
instance(s,she)
instance(m,mysterious)
instance(m2,multiple)
instance(t2,temporal-quantity)
instance(d,day)
op1(a,l)
ARG1(l,t)
ARG2-of(t,a2)
ARG1(a2,s)
mod(a2,m)
ARG2(l,m2)
op1(m2,t2)
quant(t2,1)
unit(t2,d)

(s / show-01
      :ARG0 (s2 / she)
      :ARG1 s2
      :manner (s3 / sudden)
      :time (d / date-entity
            :dayperiod (m / morning)
            :mod (o / one))
      :time (s4 / sunrise
            :mod (e / exact))
      :time (t / then))

instance(s,show-01)
instance(s2,she)
instance(s3,sudden)
instance(d,date-entity)
instance(m,morning)
instance(o,one)
instance(s4,sunrise)
instance(e,exact)
instance(t,then)
ARG0(s,s2)
ARG1(s,s2)
manner(s,s3)
time(s,d)
dayperiod(d,m)
mod(d,o)
time(s,s4)
mod(s4,e)
time(s,t)

(a / and
      :op1 (y / yawn-01
            :ARG0 (s2 / she))
      :op2 (s / say-01
            :ARG0 s2
            :ARG1 (a2 / ah :mode expressive))
      :time (a3 / after
            :op1 (w / work-01
                  :ARG0 s2
                  :manner (p / precise
                        :degree (p2 / painstaking)
                        :mod (t / this)
                        :mod (a4 / all)))))

instance(a,and)
instance(y,yawn-01)
instance(s2,she)
instance(s,say-01)
instance(a2,ah)
instance(a3,after)
instance(w,work-01)
instance(p,precise)
instance(p2,painstaking)
instance(t,this)
instance(a4,all)
op1(a,y)
ARG0(y,s2)
op2(a,s)
ARG0(s,s2)
ARG1(s,a2)
mode(a2,expressive)
time(a,a3)
op1(a3,w)
ARG0(w,s2)
manner(w,p)
degree(p,p2)
mod(p,t)
mod(p,a4)

(a / awake-03
      :ARG1 (i / i)
      :degree (s / scarce))

instance(a,awake-03)
instance(i,i)
instance(s,scarce)
ARG1(a,i)
degree(a,s)

(b2 / beg-01
      :ARG0 (i / i)
      :ARG1 (y2 / you)
      :ARG2 (e2 / excuse-01
            :ARG0 y2
            :ARG1 i))

instance(b2,beg-01)
instance(i,i)
instance(y2,you)
instance(e2,excuse-01)
ARG0(b2,i)
ARG1(b2,y2)
ARG2(b2,e2)
ARG0(e2,y2)
ARG1(e2,i)

(a3 / arrange-01 :polarity -
      :ARG1 (p2 / petal
            :part-of (i / i)
            :mod (a4 / all))
      :mod (s4 / still))

instance(a3,arrange-01)
instance(p2,petal)
instance(i,i)
instance(a4,all)
instance(s4,still)
polarity(a3,-)
ARG1(a3,p2)
part-of(p2,i)
mod(p2,a4)
mod(a3,s4)

(c / contrast-01
      :ARG2 (p2 / possible-01 :polarity -
            :ARG1 (r / restrain-01
                  :ARG0 (p / prince
                        :mod (l / little)
                        :ARG0-of (s / say-01
                              :ARG1 (o / oh :mode "expressive")))
                  :ARG1 (a / admire-01
                        :ARG0 p))))

instance(c,contrast-01)
instance(p2,possible-01)
instance(r,restrain-01)
instance(p,prince)
instance(l,little)
instance(s,say-01)
instance(o,oh)
instance(a,admire-01)
ARG2(c,p2)
polarity(p2,-)
ARG1(p2,r)
ARG0(r,p)
mod(p,l)
ARG0-of(p,s)
ARG1(s,o)
mode(o,"expressive")
ARG1(r,a)
ARG0(a,p)

(b / beautiful-02
      :ARG1 (y / you)
      :degree (s / so))

instance(b,beautiful-02)
instance(y,you)
instance(s,so)
ARG1(b,y)
degree(b,s)

(r / respond-01
      :ARG0 (f / flower)
      :ARG2 (r2 / request-confirmation-91
            :ARG1 (b / beautiful-02
                  :ARG1 f))
      :manner (s / sweet-03))

instance(r,respond-01)
instance(f,flower)
instance(r2,request-confirmation-91)
instance(b,beautiful-02)
instance(s,sweet-03)
ARG0(r,f)
ARG2(r,r2)
ARG1(r2,b)
ARG1(b,f)
manner(r,s)

(a / and
      :op2 (b / bear-02
            :ARG1 (i / i)
            :time (m / moment
                  :ARG1-of (s / same-01
                        :ARG2 (s2 / sun)))))

instance(a,and)
instance(b,bear-02)
instance(i,i)
instance(m,moment)
instance(s,same-01)
instance(s2,sun)
op2(a,b)
ARG1(b,i)
time(b,m)
ARG1-of(m,s)
ARG2(s,s2)

(p / possible-01
      :ARG1 (g / guess-01
            :ARG0 (p2 / prince
                  :mod (l / little))
            :ARG1 (c / contrast-01
                  :ARG1 (m / modest :polarity -
                        :domain (s / she)
                        :degree (t / too))
                  :ARG2 (a2 / and
                        :op1 (m2 / move-05
                              :ARG0 s
                              :degree (s2 / so))
                        :op2 (e3 / excite-01
                              :ARG0 s
                              :degree (s3 / so))))
            :ARG1-of (e / easy-05
                  :mod (e2 / enough))))

instance(p,possible-01)
instance(g,guess-01)
instance(p2,prince)
instance(l,little)
instance(c,contrast-01)
instance(m,modest)
instance(s,she)
instance(t,too)
instance(a2,and)
instance(m2,move-05)
instance(s2,so)
instance(e3,excite-01)
instance(s3,so)
instance(e,easy-05)
instance(e2,enough)
ARG1(p,g)
ARG0(g,p2)
mod(p2,l)
ARG1(g,c)
ARG1(c,m)
polarity(m,-)
domain(m,s)
degree(m,t)
ARG2(c,a2)
op1(a2,m2)
ARG0(m2,s)
degree(m2,s2)
op2(a2,e3)
ARG0(e3,s)
degree(e3,s3)
ARG1-of(g,e)
mod(e,e2)

(a / add-01
      :ARG0 (s / she)
      :ARG1 (t / think-01
            :ARG0 s
            :ARG1 (t2 / time
                  :purpose (b / breakfast-01)))
      :time (a2 / after
            :quant (i / instant)))

instance(a,add-01)
instance(s,she)
instance(t,think-01)
instance(t2,time)
instance(b,breakfast-01)
instance(a2,after)
instance(i,instant)
ARG0(a,s)
ARG1(a,t)
ARG0(t,s)
ARG1(t,t2)
purpose(t2,b)
time(a,a2)
quant(a2,i)

(t / think-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG1-of (n / need-01
                  :ARG0 (i / i)))
      :ARG1-of (k2 / kind-01
            :ARG0 y
            :ARG2 i))

instance(t,think-01)
instance(y,you)
instance(t2,thing)
instance(n,need-01)
instance(i,i)
instance(k2,kind-01)
mode(t,imperative)
ARG0(t,y)
ARG1(t,t2)
ARG1-of(t2,n)
ARG0(n,i)
ARG1-of(t,k2)
ARG0(k2,y)
ARG2(k2,i)

(a / and
      :op1 (g / go-05
            :ARG0 (p / prince
                  :mod (l2 / little)
                  :ARG1-of (a2 / abash-01
                        :ARG1-of (c3 / complete-02)))
            :ARG1 (l / look-01
                  :ARG0 p
                  :ARG1 (c / can
                        :ARG0-of (s / sprinkle-01)
                        :ARG0-of (c2 / contain-01
                              :ARG1 (w / water
                                    :ARG1-of (f / fresh-04)))))))

instance(a,and)
instance(g,go-05)
instance(p,prince)
instance(l2,little)
instance(a2,abash-01)
instance(c3,complete-02)
instance(l,look-01)
instance(c,can)
instance(s,sprinkle-01)
instance(c2,contain-01)
instance(w,water)
instance(f,fresh-04)
op1(a,g)
ARG0(g,p)
mod(p,l2)
ARG1-of(p,a2)
ARG1-of(a2,c3)
ARG1(g,l)
ARG0(l,p)
ARG1(l,c)
ARG0-of(c,s)
ARG0-of(c,c2)
ARG1(c2,w)
ARG1-of(w,f)

(t / tend-01
      :ARG0 (h / he)
      :ARG1 (f / flower)
      :ARG1-of (c / cause-01))

instance(t,tend-01)
instance(h,he)
instance(f,flower)
instance(c,cause-01)
ARG0(t,h)
ARG1(t,f)
ARG1-of(t,c)

(b / begin-01
      :ARG0 (s / she)
      :ARG1 (t2 / torment-01
            :ARG0 s
            :ARG1 (h / he)
            :ARG2 (v2 / vanity
                  :poss s
                  :ARG2-of (d3 / deal-01
                        :ARG0 h
                        :mod (d / difficult
                              :degree (l / little))
                        :condition (k / know-01
                              :ARG1 (t3 / truth)))))
      :mod (t / too)
      :ARG1-of (q / quick-02
            :degree (v / very)))

instance(b,begin-01)
instance(s,she)
instance(t2,torment-01)
instance(h,he)
instance(v2,vanity)
instance(d3,deal-01)
instance(d,difficult)
instance(l,little)
instance(k,know-01)
instance(t3,truth)
instance(t,too)
instance(q,quick-02)
instance(v,very)
ARG0(b,s)
ARG1(b,t2)
ARG0(t2,s)
ARG1(t2,h)
ARG2(t2,v2)
poss(v2,s)
ARG2-of(v2,d3)
ARG0(d3,h)
mod(d3,d)
degree(d,l)
condition(d3,k)
ARG1(k,t3)
mod(b,t)
ARG1-of(b,q)
degree(q,v)

(s / say-01
      :ARG0 (s2 / she)
      :ARG1 (c / come-01 :mode imperative
            :ARG1 (t / tiger)
            :accompanier (c2 / claw
                  :part-of t))
      :ARG2 (p / prince
            :mod (l / little))
      :time (d / day
            :mod (o / one))
      :ARG0-of (e / exemplify-01)
      :time (s3 / speak-01
            :ARG0 s2
            :ARG1 (t2 / thorn :quant 4
                  :part-of s2)))

instance(s,say-01)
instance(s2,she)
instance(c,come-01)
instance(t,tiger)
instance(c2,claw)
instance(p,prince)
instance(l,little)
instance(d,day)
instance(o,one)
instance(e,exemplify-01)
instance(s3,speak-01)
instance(t2,thorn)
ARG0(s,s2)
ARG1(s,c)
mode(c,imperative)
ARG1(c,t)
accompanier(c,c2)
part-of(c2,t)
ARG2(s,p)
mod(p,l)
time(s,d)
mod(d,o)
ARG0-of(s,e)
time(s,s3)
ARG0(s3,s2)
ARG1(s3,t2)
quant(t2,4)
part-of(t2,s2)

(o / object-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / tiger :polarity -
            :location (p2 / planet
                  :poss p)))

instance(o,object-01)
instance(p,prince)
instance(l,little)
instance(t,tiger)
instance(p2,planet)
ARG0(o,p)
mod(p,l)
ARG1(o,t)
polarity(t,-)
location(t,p2)
poss(p2,p)

(a / and
      :op2 (e / eat-01 :polarity -
            :ARG0 (t / tiger)
            :ARG1 (w / weed)
            :mod (a2 / anyway)))

instance(a,and)
instance(e,eat-01)
instance(t,tiger)
instance(w,weed)
instance(a2,anyway)
op2(a,e)
polarity(e,-)
ARG0(e,t)
ARG1(e,w)
mod(e,a2)

(r / reply-01
      :ARG0 (f / flower)
      :ARG2 (w / weed :polarity -
            :domain f)
      :manner (s / sweet-03))

instance(r,reply-01)
instance(f,flower)
instance(w,weed)
instance(s,sweet-03)
ARG0(r,f)
ARG2(r,w)
polarity(w,-)
domain(w,f)
manner(r,s)

(e / excuse-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (i / i))

instance(e,excuse-01)
instance(y,you)
instance(i,i)
mode(e,imperative)
polite(e,+)
ARG0(e,y)
ARG1(e,i)

(g / go-on-25
      :ARG0 (s / she)
      :ARG1 (c / contrast-01
            :ARG1 (f / fear-01 :polarity -
                  :ARG0 s
                  :ARG1 (t / tiger)
                  :degree (a / at-all))
            :ARG2 (a2 / abhor-01
                  :ARG0 s
                  :ARG1 (d / draft))))

instance(g,go-on-25)
instance(s,she)
instance(c,contrast-01)
instance(f,fear-01)
instance(t,tiger)
instance(a,at-all)
instance(a2,abhor-01)
instance(d,draft)
ARG0(g,s)
ARG1(g,c)
ARG1(c,f)
polarity(f,-)
ARG0(f,s)
ARG1(f,t)
degree(f,a)
ARG2(c,a2)
ARG0(a2,s)
ARG1(a2,d)

(s / suppose-01
      :ARG0 (i / i)
      :ARG1 (h / have-03
            :ARG0 (y / you)
            :ARG1 (s2 / screen)
            :beneficiary i
            :ARG1-of (r / request-confirmation-91)))

instance(s,suppose-01)
instance(i,i)
instance(h,have-03)
instance(y,you)
instance(s2,screen)
instance(r,request-confirmation-91)
ARG0(s,i)
ARG1(s,h)
ARG0(h,y)
ARG1(h,s2)
beneficiary(h,i)
ARG1-of(h,r)

(a / and
      :op1 (r / remark-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (l2 / luck
                  :ARG1-of (b / bad-07)
                  :beneficiary (p2 / plant)
                  :domain (a3 / abhor-01
                        :ARG1 (d / draft))))
      :op2 (a2 / add-01
            :ARG0 p
            :ARG1 (c3 / creature
                  :mod (c2 / complex
                        :degree (v / very))
                  :domain (f / flower
                        :mod (t / this)))
            :beneficiary p))

instance(a,and)
instance(r,remark-01)
instance(p,prince)
instance(l,little)
instance(l2,luck)
instance(b,bad-07)
instance(p2,plant)
instance(a3,abhor-01)
instance(d,draft)
instance(a2,add-01)
instance(c3,creature)
instance(c2,complex)
instance(v,very)
instance(f,flower)
instance(t,this)
op1(a,r)
ARG0(r,p)
mod(p,l)
ARG1(r,l2)
ARG1-of(l2,b)
beneficiary(l2,p2)
domain(l2,a3)
ARG1(a3,d)
op2(a,a2)
ARG0(a2,p)
ARG1(a2,c3)
mod(c3,c2)
degree(c2,v)
domain(c3,f)
mod(f,t)
beneficiary(a2,p)

(w / want-01
      :ARG0 (i / i)
      :ARG1 (p / put-01
            :ARG0 (y / you)
            :ARG1 i
            :ARG2 (u / under
                  :op1 (g / globe
                        :consist-of (g2 / glass)))
            :time (d / date-entity :dayperiod (n / night))))

instance(w,want-01)
instance(i,i)
instance(p,put-01)
instance(y,you)
instance(u,under)
instance(g,globe)
instance(g2,glass)
instance(d,date-entity)
instance(n,night)
ARG0(w,i)
ARG1(w,p)
ARG0(p,y)
ARG1(p,i)
ARG2(p,u)
op1(u,g)
consist-of(g,g2)
time(p,d)
dayperiod(d,n)

(c / cold-01
      :degree (v / very)
      :location (l / live-01
            :ARG0 (y / you)))

instance(c,cold-01)
instance(v,very)
instance(l,live-01)
instance(y,you)
degree(c,v)
location(c,l)
ARG0(l,y)

(l / location
      :ARG3-of (c / come-01
            :ARG1 (i / i)))

instance(l,location)
instance(c,come-01)
instance(i,i)
ARG3-of(l,c)
ARG1(c,i)

(c / contrast-01
      :ARG2 (i / interrupt-01
            :ARG0 (s / she)
            :ARG1 s
            :time (p / point
                  :mod (t / that))))

instance(c,contrast-01)
instance(i,interrupt-01)
instance(s,she)
instance(p,point)
instance(t,that)
ARG2(c,i)
ARG0(i,s)
ARG1(i,s)
time(i,p)
mod(p,t)

(c / come-01
      :ARG1 (s / she)
      :time-of (s2 / seed
            :domain s))

instance(c,come-01)
instance(s,she)
instance(s2,seed)
ARG1(c,s)
time-of(c,s2)
domain(s2,s)

(p / possible-01
  :polarity -
  :ARG1 (k / know-01
            :ARG0 (s / she)
            :ARG1 (a / anything
                    :topic (w / world
                             :mod (o / other
                                    :mod (a2 / any))))))

instance(p,possible-01)
instance(k,know-01)
instance(s,she)
instance(a,anything)
instance(w,world)
instance(o,other)
instance(a2,any)
polarity(p,-)
ARG1(p,k)
ARG0(k,s)
ARG1(k,a)
topic(a,w)
mod(w,o)
mod(o,a2)

(c / cough-01
      :ARG0 (s / she
            :ARG1-of (e / embarrass-01
                  :ARG0 (l2 / let-01
                        :ARG0 s
                        :ARG1 (c2 / catch-03
                              :ARG1 s
                              :ARG2 (v / verge-01
                                    :ARG1 (t / truth :polarity -
                                          :mod (n / naive
                                                :degree (s2 / such))))))))
      :purpose (p / put-03
            :ARG0 s
            :ARG1 (p2 / prince
                  :mod (l / little))
            :ARG2 (w / wrong-04
                  :ARG1 p2))
      :frequency (o / or :op1 2 :op2 3))

instance(c,cough-01)
instance(s,she)
instance(e,embarrass-01)
instance(l2,let-01)
instance(c2,catch-03)
instance(v,verge-01)
instance(t,truth)
instance(n,naive)
instance(s2,such)
instance(p,put-03)
instance(p2,prince)
instance(l,little)
instance(w,wrong-04)
instance(o,or)
ARG0(c,s)
ARG1-of(s,e)
ARG0(e,l2)
ARG0(l2,s)
ARG1(l2,c2)
ARG1(c2,s)
ARG2(c2,v)
ARG1(v,t)
polarity(t,-)
mod(t,n)
degree(n,s2)
purpose(c,p)
ARG0(p,s)
ARG1(p,p2)
mod(p2,l)
ARG2(p,w)
ARG1(w,p2)
frequency(c,o)
op1(o,2)
op2(o,3)

(s / screen :polarity (a / amr-unknown))

instance(s,screen)
instance(a,amr-unknown)
polarity(s,a)

(l3 / look-01
      :ARG0 (i / i)
      :ARG1 (i2 / it)
      :time (s3 / speak-01
            :ARG0 (y2 / you)
            :ARG2 i))

instance(l3,look-01)
instance(i,i)
instance(i2,it)
instance(s3,speak-01)
instance(y2,you)
ARG0(l3,i)
ARG1(l3,i2)
time(l3,s3)
ARG0(s3,y2)
ARG2(s3,i)

(f / force-02
      :ARG0 (s / she)
      :ARG1 (c / cough-01
            :ARG0 s
            :ARG1-of (h3 / have-quant-91
                  :ARG3 (m / more
                        :quant (l / little))))
      :time (t / then)
      :purpose (s2 / suffer-01
            :ARG0 (h / he)
            :ARG1 (r / remorse)
            :ARG1-of (h2 / have-concession-91)))

instance(f,force-02)
instance(s,she)
instance(c,cough-01)
instance(h3,have-quant-91)
instance(m,more)
instance(l,little)
instance(t,then)
instance(s2,suffer-01)
instance(h,he)
instance(r,remorse)
instance(h2,have-concession-91)
ARG0(f,s)
ARG1(f,c)
ARG0(c,s)
ARG1-of(c,h3)
ARG3(h3,m)
quant(m,l)
time(f,t)
purpose(f,s2)
ARG0(s2,h)
ARG1(s2,r)
ARG1-of(s2,h2)

(c / come-04
      :ARG1 (p / prince
            :mod (l / little))
      :ARG2 (d / doubt-01
            :ARG0 p
            :ARG1 (s3 / she))
      :time (s / soon)
      :ARG1-of (c2 / cause-01)
      :concession (w / will
            :ARG1-of (g / good-02)
            :mod (a / all)
            :ARG1-of (s2 / separate-01
                  :ARG2 (l2 / love-01
                        :ARG0 p)
                  :ARG1-of (p2 / possible-01 :polarity -))))

instance(c,come-04)
instance(p,prince)
instance(l,little)
instance(d,doubt-01)
instance(s3,she)
instance(s,soon)
instance(c2,cause-01)
instance(w,will)
instance(g,good-02)
instance(a,all)
instance(s2,separate-01)
instance(l2,love-01)
instance(p2,possible-01)
ARG1(c,p)
mod(p,l)
ARG2(c,d)
ARG0(d,p)
ARG1(d,s3)
time(c,s)
ARG1-of(c,c2)
concession(c,w)
ARG1-of(w,g)
mod(w,a)
ARG1-of(w,s2)
ARG2(s2,l2)
ARG0(l2,p)
ARG1-of(s2,p2)
polarity(p2,-)

(s / serious-01
      :ARG1 (h / he)
      :ARG2 (w / word-01
            :ARG1-of (i / important-01 :polarity -))
      :ARG0-of (m / make-02
            :ARG1 (h2 / happy-01 :polarity -
                  :ARG1 h
                  :degree (v / very))))

instance(s,serious-01)
instance(h,he)
instance(w,word-01)
instance(i,important-01)
instance(m,make-02)
instance(h2,happy-01)
instance(v,very)
ARG1(s,h)
ARG2(s,w)
ARG1-of(w,i)
polarity(i,-)
ARG0-of(s,m)
ARG1(m,h2)
polarity(h2,-)
ARG1(h2,h)
degree(h2,v)

(c / confide-01
  :ARG0 (h / he)
  :ARG1 (r / recommend-01
          :ARG1 (l / listen-01
                  :ARG0 h
                  :ARG1 (s / she)
                  :polarity -)
          :ARG2 h)
  :ARG2 (i / i)
  :time (d / day
          :mod (o / one)))

instance(c,confide-01)
instance(h,he)
instance(r,recommend-01)
instance(l,listen-01)
instance(s,she)
instance(i,i)
instance(d,day)
instance(o,one)
ARG0(c,h)
ARG1(c,r)
ARG1(r,l)
ARG0(l,h)
ARG1(l,s)
polarity(l,-)
ARG2(r,h)
ARG2(c,i)
time(c,d)
mod(d,o)

(r / recommend-01
      :ARG1 (l / listen-01 :polarity -
            :ARG0 (o2 / one)
            :ARG1 (f / flower)
            :time (e / ever)))

instance(r,recommend-01)
instance(l,listen-01)
instance(o2,one)
instance(f,flower)
instance(e,ever)
ARG1(r,l)
polarity(l,-)
ARG0(l,o2)
ARG1(l,f)
time(l,e)

(r / recommend-01
      :ARG1 (a / and
            :op1 (l / look-01
                  :ARG0 (o2 / one)
                  :ARG1 (t / they)
                  :manner (s / simple))
            :op2 (b / breathe-01
                  :ARG0 o2
                  :ARG1 (f / fragrance
                        :poss t))))

instance(r,recommend-01)
instance(a,and)
instance(l,look-01)
instance(o2,one)
instance(t,they)
instance(s,simple)
instance(b,breathe-01)
instance(f,fragrance)
ARG1(r,a)
op1(a,l)
ARG0(l,o2)
ARG1(l,t)
manner(l,s)
op2(a,b)
ARG0(b,o2)
ARG1(b,f)
poss(f,t)

(p / perfume-01
      :ARG0 (t / thing
            :poss (i / i))
      :ARG1 (p2 / planet
            :mod (a / all)
            :poss i))

instance(p,perfume-01)
instance(t,thing)
instance(i,i)
instance(p2,planet)
instance(a,all)
ARG0(p,t)
poss(t,i)
ARG1(p,p2)
mod(p2,a)
poss(p2,i)

(c / contrast-01
      :ARG2 (k / know-01 :polarity -
            :ARG0 (i / i)
            :manner (p2 / please-01
                  :ARG0 (g / grace
                        :poss (s / she)
                        :mod (a / all))
                  :ARG1 i)))

instance(c,contrast-01)
instance(k,know-01)
instance(i,i)
instance(p2,please-01)
instance(g,grace)
instance(s,she)
instance(a,all)
ARG2(c,k)
polarity(k,-)
ARG0(k,i)
manner(k,p2)
ARG0(p2,g)
poss(g,s)
mod(g,a)
ARG1(p2,i)

(r2 / recommend-01
      :ARG1 (f / fill-01
            :ARG0 (t2 / tale
                  :topic (c / claw)
                  :ARG0-of (d / disturb-01
                        :ARG1 (i / i)
                        :degree (m / much
                              :degree (s / so)))
                  :mod (t3 / this))
            :ARG1 (h / heart
                  :part-of i)
            :ARG2 (a / and
                  :op1 (t / tender)
                  :op2 (p / pity-01))
            :mod (o / only)))

instance(r2,recommend-01)
instance(f,fill-01)
instance(t2,tale)
instance(c,claw)
instance(d,disturb-01)
instance(i,i)
instance(m,much)
instance(s,so)
instance(t3,this)
instance(h,heart)
instance(a,and)
instance(t,tender)
instance(p,pity-01)
instance(o,only)
ARG1(r2,f)
ARG0(f,t2)
topic(t2,c)
ARG0-of(t2,d)
ARG1(d,i)
degree(d,m)
degree(m,s)
mod(t2,t3)
ARG1(f,h)
part-of(h,i)
ARG2(f,a)
op1(a,t)
op2(a,p)
mod(f,o)

(a / and
      :op1 (c / continue-02
            :ARG0 (h / he)
            :ARG1 (c2 / confide-01
                  :ARG0 h
                  :ARG1 (k / know-01 :polarity -
                        :ARG0 h
                        :ARG1 (t / thing
                              :manner-of (u / understand-01
                                    :ARG0 h
                                    :ARG1 (a2 / anything)))))))

instance(a,and)
instance(c,continue-02)
instance(h,he)
instance(c2,confide-01)
instance(k,know-01)
instance(t,thing)
instance(u,understand-01)
instance(a2,anything)
op1(a,c)
ARG0(c,h)
ARG1(c,c2)
ARG0(c2,h)
ARG1(c2,k)
polarity(k,-)
ARG0(k,h)
ARG1(k,t)
manner-of(t,u)
ARG0(u,h)
ARG1(u,a2)

(r2 / recommend-01
      :ARG1 (a2 / and
            :op1 (j / judge-01
                  :ARG0 (i / i)
                  :ARG3 (d / do-02))
            :op2 (j2 / judge-01 :polarity -
                  :ARG0 i
                  :ARG3 (w / word))))

instance(r2,recommend-01)
instance(a2,and)
instance(j,judge-01)
instance(i,i)
instance(d,do-02)
instance(j2,judge-01)
instance(w,word)
ARG1(r2,a2)
op1(a2,j)
ARG0(j,i)
ARG3(j,d)
op2(a2,j2)
polarity(j2,-)
ARG0(j2,i)
ARG3(j2,w)

(c / cast-01
      :ARG0 (s / she)
      :ARG1 (a / and
            :op1 (f / fragrance
                  :poss s)
            :op2 (t / thing
                  :ARG1-of (r / radiate-01
                        :ARG0 s)))
      :ARG2 (i / i))

instance(c,cast-01)
instance(s,she)
instance(a,and)
instance(f,fragrance)
instance(t,thing)
instance(r,radiate-01)
instance(i,i)
ARG0(c,s)
ARG1(c,a)
op1(a,f)
poss(f,s)
op2(a,t)
ARG1-of(t,r)
ARG0(r,s)
ARG2(c,i)

(r / recommend-01
      :ARG1 (r2 / run-02 :polarity -
            :ARG0 (i / i)
            :time (e / ever)
            :direction (a2 / away
                  :op1 (s / she))))

instance(r,recommend-01)
instance(r2,run-02)
instance(i,i)
instance(e,ever)
instance(a2,away)
instance(s,she)
ARG1(r,r2)
polarity(r2,-)
ARG0(r2,i)
time(r2,e)
direction(r2,a2)
op1(a2,s)

(r / recommend-01
      :ARG1 (g / guess-01
            :ARG0 (i / i)
            :ARG1 (a / affection
                  :mod (a2 / all)
                  :ARG1-of (l / lie-07
                        :ARG2 (b / behind
                              :op1 (s / strategem
                                    :mod (l2 / little)
                                    :mod (p / poor)
                                    :poss (s2 / she)))))))

instance(r,recommend-01)
instance(g,guess-01)
instance(i,i)
instance(a,affection)
instance(a2,all)
instance(l,lie-07)
instance(b,behind)
instance(s,strategem)
instance(l2,little)
instance(p,poor)
instance(s2,she)
ARG1(r,g)
ARG0(g,i)
ARG1(g,a)
mod(a,a2)
ARG1-of(a,l)
ARG2(l,b)
op1(b,s)
mod(s,l2)
mod(s,p)
poss(s,s2)

(c / consistent-01 :polarity -
      :ARG1 (f / flower)
      :degree (s / so))

instance(c,consistent-01)
instance(f,flower)
instance(s,so)
polarity(c,-)
ARG1(c,f)
degree(c,s)

(c / contrast-01
      :ARG2 (h / have-degree-91
            :ARG1 (i / i)
            :ARG2 (y / young)
            :ARG3 (t / too)
            :ARG6 (k / know-01
                  :ARG0 i
                  :ARG1 (m / manner
                        :manner-of (l / love-01
                              :ARG0 i
                              :ARG1 (s / she))))))

instance(c,contrast-01)
instance(h,have-degree-91)
instance(i,i)
instance(y,young)
instance(t,too)
instance(k,know-01)
instance(m,manner)
instance(l,love-01)
instance(s,she)
ARG2(c,h)
ARG1(h,i)
ARG2(h,y)
ARG3(h,t)
ARG6(h,k)
ARG0(k,i)
ARG1(k,m)
manner-of(m,l)
ARG0(l,i)
ARG1(l,s)

(c / chapter :mod 9)

instance(c,chapter)
mod(c,9)

(b / believe-01
      :ARG0 (i / i)
      :ARG1 (t / take-advantage-02
            :ARG0 (h / he)
            :ARG1 (m / migrate-01
                  :ARG0 (f / flock-02
                        :ARG0 (b2 / bird
                              :mod (w / wild))))
            :purpose (e / escape-01
                  :ARG0 h)))

instance(b,believe-01)
instance(i,i)
instance(t,take-advantage-02)
instance(h,he)
instance(m,migrate-01)
instance(f,flock-02)
instance(b2,bird)
instance(w,wild)
instance(e,escape-01)
ARG0(b,i)
ARG1(b,t)
ARG0(t,h)
ARG1(t,m)
ARG0(m,f)
ARG0(f,b2)
mod(b2,w)
purpose(t,e)
ARG0(e,h)

(o / order-03
      :ARG0 (h / he)
      :ARG1 (p2 / planet
            :poss h)
      :ARG1-of (p / perfect-02)
      :time (d2 / date-entity
            :dayperiod (m / morning)
            :time-of (d / depart-01
                  :ARG0 h)))

instance(o,order-03)
instance(h,he)
instance(p2,planet)
instance(p,perfect-02)
instance(d2,date-entity)
instance(m,morning)
instance(d,depart-01)
ARG0(o,h)
ARG1(o,p2)
poss(p2,h)
ARG1-of(o,p)
time(o,d2)
dayperiod(d2,m)
time-of(d2,d)
ARG0(d,h)

(c / clean-out-03
      :ARG0 (h / he)
      :ARG1 (v / volcano
            :poss h
            :ARG0-of (a / activity-06))
      :manner (c2 / careful))

instance(c,clean-out-03)
instance(h,he)
instance(v,volcano)
instance(a,activity-06)
instance(c2,careful)
ARG0(c,h)
ARG1(c,v)
poss(v,h)
ARG0-of(v,a)
manner(c,c2)

(a / and
      :op1 (p / possess-01
            :ARG0 (h / he)
            :ARG1 (v / volcano :quant 2
                  :ARG0-of (a2 / activity-06)))
      :op2 (c / convenient
            :degree (v2 / very)
            :purpose (h2 / heat-01
                  :ARG1 (f / food
                        :ARG1-of (b2 / breakfast-01
                              :ARG0 h))
                  :ARG2 v
                  :time (d / date-entity :dayperiod (m / morning)))
            :domain v))

instance(a,and)
instance(p,possess-01)
instance(h,he)
instance(v,volcano)
instance(a2,activity-06)
instance(c,convenient)
instance(v2,very)
instance(h2,heat-01)
instance(f,food)
instance(b2,breakfast-01)
instance(d,date-entity)
instance(m,morning)
op1(a,p)
ARG0(p,h)
ARG1(p,v)
quant(v,2)
ARG0-of(v,a2)
op2(a,c)
degree(c,v2)
purpose(c,h2)
ARG1(h2,f)
ARG1-of(f,b2)
ARG0(b2,h)
ARG2(h2,v)
time(h2,d)
dayperiod(d,m)
domain(c,v)

(h / have-03
  :ARG0 (h2 / he)
  :ARG1 (v / volcano
          :mod (e / extinct)
          :quant 1)
  :mod (a / also))

instance(h,have-03)
instance(h2,he)
instance(v,volcano)
instance(e,extinct)
instance(a,also)
ARG0(h,h2)
ARG1(h,v)
mod(v,e)
quant(v,1)
mod(h,a)

(c / contrast-01
      :ARG2 (s / say-01
            :ARG0 (h / he)
            :ARG1 (k / know-01 :polarity -
                  :ARG0 (o / one))))

instance(c,contrast-01)
instance(s,say-01)
instance(h,he)
instance(k,know-01)
instance(o,one)
ARG2(c,s)
ARG0(s,h)
ARG1(s,k)
polarity(k,-)
ARG0(k,o)

(c / clean-out-03
      :ARG0 (h / he)
      :ARG1 (v / volcano
            :mod (e / extinct))
      :mod (t / too))

instance(c,clean-out-03)
instance(h,he)
instance(v,volcano)
instance(e,extinct)
instance(t,too)
ARG0(c,h)
ARG1(c,v)
mod(v,e)
mod(c,t)

(b / burn-01
      :ARG1 (v / volcano
            :ARG1-of (e2 / erupt-01 :polarity -))
      :condition (c / clean-out-03
            :ARG1 v
            :degree (w / well))
      :manner (s3 / steady)
      :ARG1-of (s / slow-05))

instance(b,burn-01)
instance(v,volcano)
instance(e2,erupt-01)
instance(c,clean-out-03)
instance(w,well)
instance(s3,steady)
instance(s,slow-05)
ARG1(b,v)
ARG1-of(v,e2)
polarity(e2,-)
condition(b,c)
ARG1(c,v)
degree(c,w)
manner(b,s3)
ARG1-of(b,s)

(e / erupt-01
      :ARG1 (v / volcano)
      :ARG1-of (r / resemble-01
            :ARG2 (f / fire
                  :location (c / chimney))))

instance(e,erupt-01)
instance(v,volcano)
instance(r,resemble-01)
instance(f,fire)
instance(c,chimney)
ARG1(e,v)
ARG1-of(e,r)
ARG2(r,f)
location(f,c)

(h / have-degree-91
      :ARG1 (w / we)
      :ARG2 (s / small)
      :ARG3 (t2 / too
            :degree (m / much))
      :ARG6 (c / clean-out-03
            :ARG0 w
            :ARG1 (v / volcano
                  :poss w))
      :ARG1-of (o / obvious-01)
      :location (e / earth
            :poss w))

instance(h,have-degree-91)
instance(w,we)
instance(s,small)
instance(t2,too)
instance(m,much)
instance(c,clean-out-03)
instance(v,volcano)
instance(o,obvious-01)
instance(e,earth)
ARG1(h,w)
ARG2(h,s)
ARG3(h,t2)
degree(t2,m)
ARG6(h,c)
ARG0(c,w)
ARG1(c,v)
poss(v,w)
ARG1-of(h,o)
location(h,e)
poss(e,w)

(c / cause-01
      :ARG0 (t3 / that)
      :ARG1 (t2 / trouble-01
            :ARG0 (t4 / they)
            :ARG1 (w / we)
            :quant (e / end :polarity -)))

instance(c,cause-01)
instance(t3,that)
instance(t2,trouble-01)
instance(t4,they)
instance(w,we)
instance(e,end)
ARG0(c,t3)
ARG1(c,t2)
ARG0(t2,t4)
ARG1(t2,w)
quant(t2,e)
polarity(e,-)

(p / pull-01
      :ARG0 (p2 / prince
            :mod (l / little)
            :ARG0-of (s2 / sense-01
                  :ARG1 (d2 / deject-01)
                  :mod (c / certain)))
      :ARG1 (s / shoot
            :part-of (b / baobab)
            :mod (l2 / little)
            :ord (o / ordinal-entity :value "-1"))
      :mod (a / also)
      :direction (u / up))

instance(p,pull-01)
instance(p2,prince)
instance(l,little)
instance(s2,sense-01)
instance(d2,deject-01)
instance(c,certain)
instance(s,shoot)
instance(b,baobab)
instance(l2,little)
instance(o,ordinal-entity)
instance(a,also)
instance(u,up)
ARG0(p,p2)
mod(p2,l)
ARG0-of(p2,s2)
ARG1(s2,d2)
mod(s2,c)
ARG1(p,s)
part-of(s,b)
mod(s,l2)
ord(s,o)
value(o,"-1")
mod(p,a)
direction(p,u)

(b / believe-01
      :ARG0 (h / he)
      :ARG1 (w / want-01 :polarity -
            :ARG0 h
            :ARG1 (r / return-01
                  :ARG1 h)
            :time (e / ever)))

instance(b,believe-01)
instance(h,he)
instance(w,want-01)
instance(r,return-01)
instance(e,ever)
ARG0(b,h)
ARG1(b,w)
polarity(w,-)
ARG0(w,h)
ARG1(w,r)
ARG1(r,h)
time(w,e)

(c / contrast-01
      :ARG2 (s / seem-01
            :ARG1 (p / precious
                  :degree (v / very)
                  :domain (t2 / task
                        :mod (a2 / all)
                        :mod (f / familiar)))
            :ARG2 (h / he)
            :time (d / date-entity
                  :dayperiod (m / morning)
                  :mod (t / this)
                  :ord (o / ordinal-entity :value "-1"))))

instance(c,contrast-01)
instance(s,seem-01)
instance(p,precious)
instance(v,very)
instance(t2,task)
instance(a2,all)
instance(f,familiar)
instance(h,he)
instance(d,date-entity)
instance(m,morning)
instance(t,this)
instance(o,ordinal-entity)
ARG2(c,s)
ARG1(s,p)
degree(p,v)
domain(p,t2)
mod(t2,a2)
mod(t2,f)
ARG2(s,h)
time(s,d)
dayperiod(d,m)
mod(d,t)
ord(d,o)
value(o,"-1")

(r / realize-01
      :ARG0 (h / he)
      :ARG1 (c / close-10
            :ARG1 h
            :ARG2 (t / tear-03
                  :ARG1 h)
            :degree (v / very))
      :time (a / and
            :op1 (w / water-01
                  :ARG0 h
                  :ARG1 (f / flower-01)
                  :ord (o / ordinal-entity :value "-1"))
            :op2 (p / prepare-02
                  :ARG0 h
                  :ARG1 h
                  :ARG2 (p2 / place-01
                        :ARG0 h
                        :ARG1 f
                        :ARG2 (u2 / under
                              :op1 (g / globe
                                    :consist-of (g2 / glass)
                                    :poss f
                                    :ARG2-of (s2 / shelter-01
                                          :ARG0 h
                                          :ARG1 f)))))))

instance(r,realize-01)
instance(h,he)
instance(c,close-10)
instance(t,tear-03)
instance(v,very)
instance(a,and)
instance(w,water-01)
instance(f,flower-01)
instance(o,ordinal-entity)
instance(p,prepare-02)
instance(p2,place-01)
instance(u2,under)
instance(g,globe)
instance(g2,glass)
instance(s2,shelter-01)
ARG0(r,h)
ARG1(r,c)
ARG1(c,h)
ARG2(c,t)
ARG1(t,h)
degree(c,v)
time(r,a)
op1(a,w)
ARG0(w,h)
ARG1(w,f)
ord(w,o)
value(o,"-1")
op2(a,p)
ARG0(p,h)
ARG1(p,h)
ARG2(p,p2)
ARG0(p2,h)
ARG1(p2,f)
ARG2(p2,u2)
op1(u2,g)
consist-of(g,g2)
poss(g,f)
ARG2-of(g,s2)
ARG0(s2,h)
ARG1(s2,f)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (g / goodbye)
      :ARG2 (f / flower))

instance(s,say-01)
instance(h,he)
instance(g,goodbye)
instance(f,flower)
ARG0(s,h)
ARG1(s,g)
ARG2(s,f)

(c / contrast-01
      :ARG2 (a2 / answer-01 :polarity -
            :ARG0 (s / she)))

instance(c,contrast-01)
instance(a2,answer-01)
instance(s,she)
ARG2(c,a2)
polarity(a2,-)
ARG0(a2,s)

(s / say-01
  :ARG0 (h / he)
  :ARG1 (g / goodbye)
  :mod (a / again))

instance(s,say-01)
instance(h,he)
instance(g,goodbye)
instance(a,again)
ARG0(s,h)
ARG1(s,g)
mod(s,a)

(c / cough-01
      :ARG0 (f / flower))

instance(c,cough-01)
instance(f,flower)
ARG0(c,f)

(c2 / contrast-01
      :ARG2 (c3 / cause-01 :polarity -
            :ARG0 (h / have-03
                  :ARG0 (s / she)
                  :ARG1 (c / cold))
            :ARG1 (i / it)))

instance(c2,contrast-01)
instance(c3,cause-01)
instance(h,have-03)
instance(s,she)
instance(c,cold)
instance(i,it)
ARG2(c2,c3)
polarity(c3,-)
ARG0(c3,h)
ARG0(h,s)
ARG1(h,c)
ARG1(c3,i)

(s / say-01
      :ARG0 (s2 / she)
      :ARG1 (s4 / silly
            :domain s2)
      :ARG2 (h / he)
      :time (a / at-last))

instance(s,say-01)
instance(s2,she)
instance(s4,silly)
instance(h,he)
instance(a,at-last)
ARG0(s,s2)
ARG1(s,s4)
domain(s4,s2)
ARG2(s,h)
time(s,a)

(a / ask-02
      :ARG0 (i / i)
      :ARG1 (f / forgive-01
            :ARG0 y
            :ARG1 i)
      :ARG2 (y / you))

instance(a,ask-02)
instance(i,i)
instance(f,forgive-01)
instance(y,you)
ARG0(a,i)
ARG1(a,f)
ARG0(f,y)
ARG1(f,i)
ARG2(a,y)

(t / try-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / happy-01
            :ARG1 y))

instance(t,try-01)
instance(y,you)
instance(h,happy-01)
mode(t,imperative)
ARG0(t,y)
ARG1(t,h)
ARG1(h,y)

(s / surprise-01
      :ARG0 (a / absent-01
            :ARG1 (r / reproach-01))
      :ARG1 (h / he))

instance(s,surprise-01)
instance(a,absent-01)
instance(r,reproach-01)
instance(h,he)
ARG0(s,a)
ARG1(a,r)
ARG1(s,h)

(s / stand-01
      :ARG1 (h / he
            :ARG1-of (b / bewilder-01
                  :degree (a / all))
            :ARG0-of (h2 / hold-01
                  :ARG1 (g / globe
                        :consist-of (g2 / glass)
                        :ARG1-of (a2 / arrest-02
                              :location (m / midair)))))
      :ARG2 (t / there))

instance(s,stand-01)
instance(h,he)
instance(b,bewilder-01)
instance(a,all)
instance(h2,hold-01)
instance(g,globe)
instance(g2,glass)
instance(a2,arrest-02)
instance(m,midair)
instance(t,there)
ARG1(s,h)
ARG1-of(h,b)
degree(b,a)
ARG0-of(h,h2)
ARG1(h2,g)
consist-of(g,g2)
ARG1-of(g,a2)
location(a2,m)
ARG2(s,t)

(u / understand-01 :polarity -
      :ARG0 (h / he)
      :ARG1 (s / sweet-05
            :ARG1 (t / this)
            :ARG1-of (q / quiet-04)))

instance(u,understand-01)
instance(h,he)
instance(s,sweet-05)
instance(t,this)
instance(q,quiet-04)
polarity(u,-)
ARG0(u,h)
ARG1(u,s)
ARG1(s,t)
ARG1-of(s,q)

(s / say-01
  :ARG0 (f / flower-01)
  :ARG1 (l / love-01
          :ARG0 f
          :ARG1 h
          :mod (o / of-course))
  :ARG2 (h / he))

instance(s,say-01)
instance(f,flower-01)
instance(l,love-01)
instance(o,of-course)
instance(h,he)
ARG0(s,f)
ARG1(s,l)
ARG0(l,f)
ARG1(l,h)
mod(l,o)
ARG2(s,h)

(f / fault-01
      :ARG1 (i3 / i)
      :ARG2 (k / know-01 :polarity -
            :ARG0 (y / you)
            :ARG1 (i2 / it)
            :time (w / while-away-01
                  :duration (a / all))))

instance(f,fault-01)
instance(i3,i)
instance(k,know-01)
instance(y,you)
instance(i2,it)
instance(w,while-away-01)
instance(a,all)
ARG1(f,i3)
ARG2(f,k)
polarity(k,-)
ARG0(k,y)
ARG1(k,i2)
time(k,w)
duration(w,a)

(i / important-01 :polarity -
      :ARG1 (t / that))

instance(i,important-01)
instance(t,that)
polarity(i,-)
ARG1(i,t)

(c / contrast-01
      :ARG2 (h / have-degree-91
            :ARG1 (y / you)
            :ARG2 (f / foolish)
            :ARG3 (e / equal)
            :ARG4 (i / i)))

instance(c,contrast-01)
instance(h,have-degree-91)
instance(y,you)
instance(f,foolish)
instance(e,equal)
instance(i,i)
ARG2(c,h)
ARG1(h,y)
ARG2(h,f)
ARG3(h,e)
ARG4(h,i)

(a / and
      :op1 (t / try-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (h / happy-01
                  :ARG1 y))
      :op2 (l / leave-14 :mode imperative
            :ARG0 y
            :ARG1 (a2 / alone
                  :domain (g / globe
                        :consist-of (g2 / glass)))))

instance(a,and)
instance(t,try-01)
instance(y,you)
instance(h,happy-01)
instance(l,leave-14)
instance(a2,alone)
instance(g,globe)
instance(g2,glass)
op1(a,t)
mode(t,imperative)
ARG0(t,y)
ARG1(t,h)
ARG1(h,y)
op2(a,l)
mode(l,imperative)
ARG0(l,y)
ARG1(l,a2)
domain(a2,g)
consist-of(g,g2)

(w / want-01
  :ARG0 (i / i)
  :ARG1 (i2 / it)
  :polarity -
  :time (a / anymore))

instance(w,want-01)
instance(i,i)
instance(i2,it)
instance(a,anymore)
ARG0(w,i)
ARG1(w,i2)
polarity(w,-)
time(w,a)

(c / contrast-01
  :ARG2 (w / wind))

instance(c,contrast-01)
instance(w,wind)
ARG2(c,w)

(a / and
      :op1 (h / have-degree-91 :polarity -
            :ARG1 (c3 / cold
                  :poss (i / i))
            :ARG2 (b / bad-05
                  :ARG1 c3)
            :ARG3 (e / equal)
            :ARG4 (t / that
                  :mod (a2 / all)))
      :op2 (g / good-04
            :ARG1 (a3 / air
                  :ARG1-of (c / cool-06)
                  :mod (n / night))
            :ARG2 i))

instance(a,and)
instance(h,have-degree-91)
instance(c3,cold)
instance(i,i)
instance(b,bad-05)
instance(e,equal)
instance(t,that)
instance(a2,all)
instance(g,good-04)
instance(a3,air)
instance(c,cool-06)
instance(n,night)
op1(a,h)
polarity(h,-)
ARG1(h,c3)
poss(c3,i)
ARG2(h,b)
ARG1(b,c3)
ARG3(h,e)
ARG4(h,t)
mod(t,a2)
op2(a,g)
ARG1(g,a3)
ARG1-of(a3,c)
mod(a3,n)
ARG2(g,i)

(f / flower
      :domain (i / i))

instance(f,flower)
instance(i,i)
domain(f,i)

(c / contrast-01
  :ARG2 (a / animal))

instance(c,contrast-01)
instance(a,animal)
ARG2(c,a)

(h / have-concession-91
      :ARG2 (o / obligate-01
            :ARG1 i
            :ARG2 (e / endure-01
                  :ARG1 (i / i)
                  :ARG2 (p / present-02
                        :ARG1 (c / caterpillar
                              :quant (o2 / or :op1 2 :op2 3)))
                  :condition (w / wish-01
                        :ARG0 i
                        :ARG1 (a / acquaint-01
                              :ARG1 i
                              :ARG2 (b2 / butterfly))))))

instance(h,have-concession-91)
instance(o,obligate-01)
instance(e,endure-01)
instance(i,i)
instance(p,present-02)
instance(c,caterpillar)
instance(o2,or)
instance(w,wish-01)
instance(a,acquaint-01)
instance(b2,butterfly)
ARG2(h,o)
ARG1(o,i)
ARG2(o,e)
ARG1(e,i)
ARG2(e,p)
ARG1(p,c)
quant(c,o2)
op1(o2,2)
op2(o2,3)
condition(e,w)
ARG0(w,i)
ARG1(w,a)
ARG1(a,i)
ARG2(a,b2)

(s / seem-01
      :ARG1 (b / beautiful-02
            :ARG1 (t2 / they)
            :degree (v2 / very)))

instance(s,seem-01)
instance(b,beautiful-02)
instance(t2,they)
instance(v2,very)
ARG1(s,b)
ARG1(b,t2)
degree(b,v2)

(c / call-on-05
      :ARG0 (a / amr-unknown)
      :ARG1 (i / i)
      :condition (c3 / call-on-05 :polarity -
            :ARG0 (a2 / and
                  :op1 (b / butterfly)
                  :op2 (c2 / caterpillar))
            :ARG1 i))

instance(c,call-on-05)
instance(a,amr-unknown)
instance(i,i)
instance(c3,call-on-05)
instance(a2,and)
instance(b,butterfly)
instance(c2,caterpillar)
ARG0(c,a)
ARG1(c,i)
condition(c,c3)
polarity(c3,-)
ARG0(c3,a2)
op1(a2,b)
op2(a2,c2)
ARG1(c3,i)

(a / and
      :op1 (a2 / away
            :extent (f / far)
            :location-of (y / you))
      :op2 (f2 / fear-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (a3 / animal
                  :mod (l / large)
                  :quant (a4 / any))
            :degree (a5 / at-all)))

instance(a,and)
instance(a2,away)
instance(f,far)
instance(y,you)
instance(f2,fear-01)
instance(i,i)
instance(a3,animal)
instance(l,large)
instance(a4,any)
instance(a5,at-all)
op1(a,a2)
extent(a2,f)
location-of(a2,y)
op2(a,f2)
polarity(f2,-)
ARG0(f2,i)
ARG1(f2,a3)
mod(a3,l)
quant(a3,a4)
degree(f2,a5)

(h / have-03
      :ARG0 (i / i)
      :ARG1 (c / claw
            :part-of i))

instance(h,have-03)
instance(i,i)
instance(c,claw)
ARG0(h,i)
ARG1(h,c)
part-of(c,i)

(s / show-01
      :ARG0 (s2 / she)
      :ARG1 (t / thorn :quant 4
            :part-of s2)
      :manner (n / naive))

instance(s,show-01)
instance(s2,she)
instance(t,thorn)
instance(n,naive)
ARG0(s,s2)
ARG1(s,t)
quant(t,4)
part-of(t,s2)
manner(s,n)

(a / add-01
      :ARG0 (s / she)
      :ARG1 (l / linger-01 :polarity - :mode imperative
            :ARG1 (y / you)
            :manner (t3 / this))
      :time (t / then))

instance(a,add-01)
instance(s,she)
instance(l,linger-01)
instance(y,you)
instance(t3,this)
instance(t,then)
ARG0(a,s)
ARG1(a,l)
polarity(l,-)
mode(l,imperative)
ARG1(l,y)
manner(l,t3)
time(a,t)

(d / decide-01
      :ARG0 (y / you)
      :ARG1 (g / go-02
            :ARG0 y
            :direction (a / away)))

instance(d,decide-01)
instance(y,you)
instance(g,go-02)
instance(a,away)
ARG0(d,y)
ARG1(d,g)
ARG0(g,y)
direction(g,a)

(g / go-02 :mode imperative
      :ARG0 (y / you)
      :time (n / now))

instance(g,go-02)
instance(y,you)
instance(n,now)
mode(g,imperative)
ARG0(g,y)
time(g,n)

(w / want-01 :polarity -
      :ARG0 (s / she)
      :ARG1 (s2 / see-01
            :ARG0 (h / he)
            :ARG1 (c / cry-02
                  :ARG0 s)))

instance(w,want-01)
instance(s,she)
instance(s2,see-01)
instance(h,he)
instance(c,cry-02)
polarity(w,-)
ARG0(w,s)
ARG1(w,s2)
ARG0(s2,h)
ARG1(s2,c)
ARG0(c,s)

(p / pride-01
      :ARG0 (f2 / flower
            :domain (s / she))
      :degree (s2 / such))

instance(p,pride-01)
instance(f2,flower)
instance(s,she)
instance(s2,such)
ARG0(p,f2)
domain(f2,s)
degree(p,s2)

(c / chapter :mod 10)

instance(c,chapter)
mod(c,10)

(f / find-out-03
      :ARG0 (h / he)
      :ARG1 (b / be-located-at-91
            :ARG1 h
            :ARG2 (n / neighborhood
                  :location-of (a3 / and
                        :op1 (a4 / asteroid :wiki -
                              :name (n2 / name :op1 325))
                        :op2 (a5 / asteroid :wiki -
                              :name (n3 / name :op1 326))
                        :op3 (a6 / asteroid :wiki -
                              :name (n4 / name :op1 327))
                        :op4 (a7 / asteroid :wiki -
                              :name (n5 / name :op1 328))
                        :op5 (a8 / asteroid :wiki -
                              :name (n6 / name :op1 329))
                        :op6 (a9 / asteroid :wiki -
                              :name (n7 / name :op1 330))))))

instance(f,find-out-03)
instance(h,he)
instance(b,be-located-at-91)
instance(n,neighborhood)
instance(a3,and)
instance(a4,asteroid)
instance(n2,name)
instance(a5,asteroid)
instance(n3,name)
instance(a6,asteroid)
instance(n4,name)
instance(a7,asteroid)
instance(n5,name)
instance(a8,asteroid)
instance(n6,name)
instance(a9,asteroid)
instance(n7,name)
ARG0(f,h)
ARG1(f,b)
ARG1(b,h)
ARG2(b,n)
location-of(n,a3)
op1(a3,a4)
wiki(a4,-)
name(a4,n2)
op1(n2,325)
op2(a3,a5)
wiki(a5,-)
name(a5,n3)
op1(n3,326)
op3(a3,a6)
wiki(a6,-)
name(a6,n4)
op1(n4,327)
op4(a3,a7)
wiki(a7,-)
name(a7,n5)
op1(n5,328)
op5(a3,a8)
wiki(a8,-)
name(a8,n6)
op1(n6,329)
op6(a3,a9)
wiki(a9,-)
name(a9,n7)
op1(n7,330)

(b / begin-01
      :ARG0 (h / he)
      :ARG2 (v / visit-01
            :ARG0 h
            :ARG1 (t2 / they))
      :mod (t / therefore)
      :purpose (a / add-02
            :ARG0 v
            :ARG2 (k / knowledge
                  :poss h)))

instance(b,begin-01)
instance(h,he)
instance(v,visit-01)
instance(t2,they)
instance(t,therefore)
instance(a,add-02)
instance(k,knowledge)
ARG0(b,h)
ARG2(b,v)
ARG0(v,h)
ARG1(v,t2)
mod(b,t)
purpose(b,a)
ARG0(a,v)
ARG2(a,k)
poss(k,h)

(i / inhabit-01
      :ARG0 (k / king)
      :ARG1 (t2 / thing
            :ord (o / ordinal-entity :value 1)
            :ARG1-of (i2 / include-91
                  :ARG2 (t / they))))

instance(i,inhabit-01)
instance(k,king)
instance(t2,thing)
instance(o,ordinal-entity)
instance(i2,include-91)
instance(t,they)
ARG0(i,k)
ARG1(i,t2)
ord(t2,o)
value(o,1)
ARG1-of(t2,i2)
ARG2(i2,t)

(s / seat-01
      :ARG1 (h / he
            :ARG1-of (c / clad-01
                  :ARG2 (a / and
                        :op1 (p / purple-02
                              :mod (r / royal))
                        :op2 (e / ermine))))
      :ARG2 (t / throne
            :ARG1-of (s2 / simple-02)
            :mod (m / majesty)))

instance(s,seat-01)
instance(h,he)
instance(c,clad-01)
instance(a,and)
instance(p,purple-02)
instance(r,royal)
instance(e,ermine)
instance(t,throne)
instance(s2,simple-02)
instance(m,majesty)
ARG1(s,h)
ARG1-of(h,c)
ARG2(c,a)
op1(a,p)
mod(p,r)
op2(a,e)
ARG2(s,t)
ARG1-of(t,s2)
mod(t,m)

(a2 / ah :mode expressive)

instance(a2,ah)
mode(a2,expressive)

(e / exclaim-01
      :ARG0 (k / king)
      :ARG1 (h2 / here
            :location-of (s / subject))
      :time (s2 / see-01
            :ARG0 k
            :ARG1 (p / prince
                  :mod (l / little)
                  :ARG1-of (c / come-01))))

instance(e,exclaim-01)
instance(k,king)
instance(h2,here)
instance(s,subject)
instance(s2,see-01)
instance(p,prince)
instance(l,little)
instance(c,come-01)
ARG0(e,k)
ARG1(e,h2)
location-of(h2,s)
time(e,s2)
ARG0(s2,k)
ARG1(s2,p)
mod(p,l)
ARG1-of(p,c)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (p2 / possible-01
            :ARG1 (r / recognize-02
                  :ARG0 (h / he)
                  :ARG1 p
                  :condition (s / see-01 :polarity -
                        :ARG0 h
                        :ARG1 p
                        :time (b / before)
                        :time (e / ever)))
            :manner (a2 / amr-unknown))
      :ARG2 p)

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(p2,possible-01)
instance(r,recognize-02)
instance(h,he)
instance(s,see-01)
instance(b,before)
instance(e,ever)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,p2)
ARG1(p2,r)
ARG0(r,h)
ARG1(r,p)
condition(r,s)
polarity(s,-)
ARG0(s,h)
ARG1(s,p)
time(s,b)
time(s,e)
manner(p2,a2)
ARG2(a,p)

(k / know-01
  :ARG0 (h / he)
  :ARG1 (s / simplify-01
          :ARG1 (w / world)
          :beneficiary (k2 / king))
  :polarity -)

instance(k,know-01)
instance(h,he)
instance(s,simplify-01)
instance(w,world)
instance(k2,king)
ARG0(k,h)
ARG1(k,s)
ARG1(s,w)
beneficiary(s,k2)
polarity(k,-)

(o / opine-01
      :ARG0 (t2 / they)
      :ARG1 (s2 / subject
            :domain (m2 / man
                  :mod (a2 / all))))

instance(o,opine-01)
instance(t2,they)
instance(s2,subject)
instance(m2,man)
instance(a2,all)
ARG0(o,t2)
ARG1(o,s2)
domain(s2,m2)
mod(m2,a2)

(s / say-01
      :ARG0 (k / king
            :ARG0-of (p / pride-01
                  :ARG2 (r / reign-01
                        :ARG0 k
                        :ARG1 (s3 / somebody)
                        :time (a2 / at-last))))
      :ARG1 (a / approach-01 :mode imperative
            :ARG1 y
            :purpose (s2 / see-01
                  :ARG0 k
                  :ARG1 (y / you)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (w / well)
                        :ARG3 (m / more)))))

instance(s,say-01)
instance(k,king)
instance(p,pride-01)
instance(r,reign-01)
instance(s3,somebody)
instance(a2,at-last)
instance(a,approach-01)
instance(s2,see-01)
instance(y,you)
instance(h,have-degree-91)
instance(w,well)
instance(m,more)
ARG0(s,k)
ARG0-of(k,p)
ARG2(p,r)
ARG0(r,k)
ARG1(r,s3)
time(r,a2)
ARG1(s,a)
mode(a,imperative)
ARG1(a,y)
purpose(a,s2)
ARG0(s2,k)
ARG1(s2,y)
ARG1-of(s2,h)
ARG2(h,w)
ARG3(h,m)

(a / and
      :op1 (c / cram-01
            :ARG1 (r2 / robe
                  :mod (e2 / ermine)
                  :mod (m / magnificent)
                  :poss (k / king))
            :ARG2 (p3 / planet
                  :extent (e3 / entire)))
      :op2 (o / obstruct-01
            :ARG0 r2
            :ARG1 p3)
      :concession (l / look-01
            :ARG0 (p / prince
                  :mod (l2 / little))
            :ARG1 (p2 / place
                  :purpose (s / sit-down-02
                        :ARG1 p))
            :location (e / everywhere)))

instance(a,and)
instance(c,cram-01)
instance(r2,robe)
instance(e2,ermine)
instance(m,magnificent)
instance(k,king)
instance(p3,planet)
instance(e3,entire)
instance(o,obstruct-01)
instance(l,look-01)
instance(p,prince)
instance(l2,little)
instance(p2,place)
instance(s,sit-down-02)
instance(e,everywhere)
op1(a,c)
ARG1(c,r2)
mod(r2,e2)
mod(r2,m)
poss(r2,k)
ARG2(c,p3)
extent(p3,e3)
op2(a,o)
ARG0(o,r2)
ARG1(o,p3)
concession(a,l)
ARG0(l,p)
mod(p,l2)
ARG1(l,p2)
purpose(p2,s)
ARG1(s,p)
location(l,e)

(a / and
  :op1 (r / remain-01
         :ARG1 (h / he)
         :ARG3 (s / stand-01
                 :ARG1 h
                 :manner (u / upright)))
  :op2 (y / yawn-01
         :ARG0 h
         :ARG1-of (c / cause-01
                    :ARG0 (t / tire-01
                            :ARG1 h))))

instance(a,and)
instance(r,remain-01)
instance(h,he)
instance(s,stand-01)
instance(u,upright)
instance(y,yawn-01)
instance(c,cause-01)
instance(t,tire-01)
op1(a,r)
ARG1(r,h)
ARG3(r,s)
ARG1(s,h)
manner(s,u)
op2(a,y)
ARG0(y,h)
ARG1-of(y,c)
ARG0(c,t)
ARG1(t,h)

(s / say-01
      :ARG0 (m / monarch)
      :ARG1 (c / contrary-01
            :ARG1 (y / yawn-01
                  :location (k / king))
            :ARG2 (e / etiquette))
      :ARG2 (h / he))

instance(s,say-01)
instance(m,monarch)
instance(c,contrary-01)
instance(y,yawn-01)
instance(k,king)
instance(e,etiquette)
instance(h,he)
ARG0(s,m)
ARG1(s,c)
ARG1(c,y)
location(y,k)
ARG2(c,e)
ARG2(s,h)

(f / forbid-01
      :ARG0 (i / i)
      :ARG1 (d / do-02
            :ARG0 y
            :ARG1 (s / so))
      :ARG2 (y / you))

instance(f,forbid-01)
instance(i,i)
instance(d,do-02)
instance(s,so)
instance(y,you)
ARG0(f,i)
ARG1(f,d)
ARG0(d,y)
ARG1(d,s)
ARG2(f,y)

(p / possible-01 :polarity -
      :ARG1 (h / help-02
            :ARG0 (i / i)
            :ARG1 (i2 / it)))

instance(p,possible-01)
instance(h,help-02)
instance(i,i)
instance(i2,it)
polarity(p,-)
ARG1(p,h)
ARG0(h,i)
ARG1(h,i2)

(r / reply-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG2 (p2 / possible-01 :polarity -
            :ARG1 (s / stop-01
                  :ARG0 p
                  :ARG1 p))
      :manner (e / embarrass-01
            :ARG1 p
            :degree (t / thorough)))

instance(r,reply-01)
instance(p,prince)
instance(l,little)
instance(p2,possible-01)
instance(s,stop-01)
instance(e,embarrass-01)
instance(t,thorough)
ARG0(r,p)
mod(p,l)
ARG2(r,p2)
polarity(p2,-)
ARG1(p2,s)
ARG0(s,p)
ARG1(s,p)
manner(r,e)
ARG1(e,p)
degree(e,t)

(a / and
      :op1 (c / come-01
            :ARG1 (i / i)
            :ARG2 (j / journey-01
                  :ARG0 i
                  :ARG1-of (l / long-03)))
      :op2 (s / sleep-01 :polarity -
            :ARG0 i))

instance(a,and)
instance(c,come-01)
instance(i,i)
instance(j,journey-01)
instance(l,long-03)
instance(s,sleep-01)
op1(a,c)
ARG1(c,i)
ARG2(c,j)
ARG0(j,i)
ARG1-of(j,l)
op2(a,s)
polarity(s,-)
ARG0(s,i)

(s / say-01
      :ARG0 (k / king)
      :ARG1 (a / ah :mode expressive
            :mod (t / then)))

instance(s,say-01)
instance(k,king)
instance(a,ah)
instance(t,then)
ARG0(s,k)
ARG1(s,a)
mode(a,expressive)
mod(a,t)

(o / order-01
      :ARG0 (i / i)
      :ARG1 (y / you)
      :ARG2 (y2 / yawn-01
            :ARG0 y))

instance(o,order-01)
instance(i,i)
instance(y,you)
instance(y2,yawn-01)
ARG0(o,i)
ARG1(o,y)
ARG2(o,y2)
ARG0(y2,y)

(p / pass-03
      :ARG1 (y3 / year)
      :time (s3 / since
            :op1 (s / see-01
                  :ARG0 (i / i)
                  :ARG1 (a / anyone
                        :ARG0-of (y / yawn-01)))))

instance(p,pass-03)
instance(y3,year)
instance(s3,since)
instance(s,see-01)
instance(i,i)
instance(a,anyone)
instance(y,yawn-01)
ARG1(p,y3)
time(p,s3)
op1(s3,s)
ARG0(s,i)
ARG1(s,a)
ARG0-of(a,y)

(c2 / curious-01
      :ARG0 (y2 / yawn-01)
      :ARG1 (i / i))

instance(c2,curious-01)
instance(y2,yawn-01)
instance(i,i)
ARG0(c2,y2)
ARG1(c2,i)

(c / come-01
  :ARG1 (y / you)
  :time (n / now)
  :mode imperative)

instance(c,come-01)
instance(y,you)
instance(n,now)
ARG1(c,y)
time(c,n)
mode(c,imperative)

(y / yawn-01 :mode imperative
      :ARG0 (y2 / you)
      :mod (a / again))

instance(y,yawn-01)
instance(y2,you)
instance(a,again)
mode(y,imperative)
ARG0(y,y2)
mod(y,a)

(o2 / order-01
      :ARG2 (i2 / it))

instance(o2,order-01)
instance(i2,it)
ARG2(o2,i2)

(f / frighten-01
  :ARG0 (t / that)
  :ARG1 (i / i))

instance(f,frighten-01)
instance(t,that)
instance(i,i)
ARG0(f,t)
ARG1(f,i)

(m / murmur-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG1-of (a2 / abash-01
                  :ARG1-of (c / complete-02)
                  :time (n / now)))
      :ARG1 (p2 / possible-01 :polarity -
            :time (a / anymore)))

instance(m,murmur-01)
instance(p,prince)
instance(l,little)
instance(a2,abash-01)
instance(c,complete-02)
instance(n,now)
instance(p2,possible-01)
instance(a,anymore)
ARG0(m,p)
mod(p,l)
ARG1-of(p,a2)
ARG1-of(a2,c)
time(a2,n)
ARG1(m,p2)
polarity(p2,-)
time(p2,a)

(h / hum :mode expressive)

instance(h,hum)
mode(h,expressive)

(r / reply-01
      :ARG0 (k / king)
      :ARG2 (h / hum :mode expressive))

instance(r,reply-01)
instance(k,king)
instance(h,hum)
ARG0(r,k)
ARG2(r,h)
mode(h,expressive)

(o / order-01
      :ARG0 (i / i)
      :ARG1 (y / you)
      :ARG2 (a / and
            :op1 (y2 / yawn-01
                  :ARG0 y
                  :frequency (s / sometimes))
            :op2 (d / do-02
                  :frequency (s2 / sometimes)))
      :mod (t2 / then))

instance(o,order-01)
instance(i,i)
instance(y,you)
instance(a,and)
instance(y2,yawn-01)
instance(s,sometimes)
instance(d,do-02)
instance(s2,sometimes)
instance(t2,then)
ARG0(o,i)
ARG1(o,y)
ARG2(o,a)
op1(a,y2)
ARG0(y2,y)
frequency(y2,s)
op2(a,d)
frequency(d,s2)
mod(o,t2)

(a / and
  :op1 (s / sputter-01
         :ARG0 (h / he)
         :degree (l / little))
  :op2 (s2 / seem-01
         :ARG1 (v / vex-01
                 :ARG1 h)))

instance(a,and)
instance(s,sputter-01)
instance(h,he)
instance(l,little)
instance(s2,seem-01)
instance(v,vex-01)
op1(a,s)
ARG0(s,h)
degree(s,l)
op2(a,s2)
ARG1(s2,v)
ARG1(v,h)

(i / insist-01
  :ARG0 (k / king)
  :ARG1 (r / respect-01
          :ARG1 (a / authority
                  :poss k))
  :mod (f / fundamental))

instance(i,insist-01)
instance(k,king)
instance(r,respect-01)
instance(a,authority)
instance(f,fundamental)
ARG0(i,k)
ARG1(i,r)
ARG1(r,a)
poss(a,k)
mod(i,f)

(t / tolerate-01
  :ARG0 (h / he)
  :ARG1 (d / disobey-01
          :ARG1 h)
  :polarity -)

instance(t,tolerate-01)
instance(h,he)
instance(d,disobey-01)
ARG0(t,h)
ARG1(t,d)
ARG1(d,h)
polarity(t,-)

(m / monarch
      :mod (a / absolute)
      :domain (h2 / he))

instance(m,monarch)
instance(a,absolute)
instance(h2,he)
mod(m,a)
domain(m,h2)

(h3 / have-concession-91
      :ARG1 (m / make-02
            :ARG0 (h / he)
            :ARG1 (r / reasonable-02
                  :ARG1 (t / thing
                        :ARG2-of (o / order-01)))
            :ARG1-of (c2 / cause-01
                  :ARG0 (m2 / man
                        :ARG1-of (g / good-02
                              :degree (v / very))
                        :domain h))))

instance(h3,have-concession-91)
instance(m,make-02)
instance(h,he)
instance(r,reasonable-02)
instance(t,thing)
instance(o,order-01)
instance(c2,cause-01)
instance(m2,man)
instance(g,good-02)
instance(v,very)
ARG1(h3,m)
ARG0(m,h)
ARG1(m,r)
ARG1(r,t)
ARG2-of(t,o)
ARG1-of(m,c2)
ARG0(c2,m2)
ARG1-of(m2,g)
degree(g,v)
domain(m2,h)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (o / order-01
            :ARG0 h
            :ARG1 (p / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (g / general)))
            :ARG2 (c / change-01
                  :ARG0 p
                  :ARG1 p
                  :ARG2 (b / bird
                        :mod (s2 / sea)))
            :ARG1-of (o2 / obey-01 :polarity -
                  :ARG0 p)
            :condition-of (f / fault-01 :polarity -
                  :ARG1 p))
      :ARG0-of (e / exemplify-01))

instance(s,say-01)
instance(h,he)
instance(o,order-01)
instance(p,person)
instance(h2,have-org-role-91)
instance(g,general)
instance(c,change-01)
instance(b,bird)
instance(s2,sea)
instance(o2,obey-01)
instance(f,fault-01)
instance(e,exemplify-01)
ARG0(s,h)
ARG1(s,o)
ARG0(o,h)
ARG1(o,p)
ARG0-of(p,h2)
ARG2(h2,g)
ARG2(o,c)
ARG0(c,p)
ARG1(c,p)
ARG2(c,b)
mod(b,s2)
ARG1-of(o,o2)
polarity(o2,-)
ARG0(o2,p)
condition-of(o,f)
polarity(f,-)
ARG1(f,p)
ARG0-of(s,e)

(f / fault-01
      :ARG1 (i2 / i))

instance(f,fault-01)
instance(i2,i)
ARG1(f,i2)

(i / inquire-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t2 / truth-value
            :polarity-of (p2 / permit-01
                  :ARG1 (s / sit-down-02
                        :ARG1 p)))
      :manner (t / timid)
      :time (n / now))

instance(i,inquire-01)
instance(p,prince)
instance(l,little)
instance(t2,truth-value)
instance(p2,permit-01)
instance(s,sit-down-02)
instance(t,timid)
instance(n,now)
ARG0(i,p)
mod(p,l)
ARG1(i,t2)
polarity-of(t2,p2)
ARG1(p2,s)
ARG1(s,p)
manner(i,t)
time(i,n)

(a / and
      :op1 (a2 / answer-01
            :ARG0 (k / king)
            :ARG1 (h / he)
            :ARG2 (o / order-01
                  :ARG0 k
                  :ARG1 h
                  :ARG2 (d / do-02
                        :ARG1 (s / so))))
      :op2 (g / gather-01
            :ARG0 k
            :ARG1 (f / fold
                  :part-of (m3 / mantle
                        :consist-of (e2 / ermine)))
            :manner (m / majesty)))

instance(a,and)
instance(a2,answer-01)
instance(k,king)
instance(h,he)
instance(o,order-01)
instance(d,do-02)
instance(s,so)
instance(g,gather-01)
instance(f,fold)
instance(m3,mantle)
instance(e2,ermine)
instance(m,majesty)
op1(a,a2)
ARG0(a2,k)
ARG1(a2,h)
ARG2(a2,o)
ARG0(o,k)
ARG1(o,h)
ARG2(o,d)
ARG1(d,s)
op2(a,g)
ARG0(g,k)
ARG1(g,f)
part-of(f,m3)
consist-of(m3,e2)
manner(g,m)

(w / wonder-01
  :ARG0 (p / prince
          :mod (l / little)))

instance(w,wonder-01)
instance(p,prince)
instance(l,little)
ARG0(w,p)
mod(p,l)

(t / tiny
  :domain (p / planet))

instance(t,tiny)
instance(p,planet)
domain(t,p)

(p / possible-01
      :ARG1 (r / rule-03
            :ARG0 (k / king)
            :ARG1 (a / amr-unknown)
            :ARG1-of (r2 / real-04)))

instance(p,possible-01)
instance(r,rule-03)
instance(k,king)
instance(a,amr-unknown)
instance(r2,real-04)
ARG1(p,r)
ARG0(r,k)
ARG1(r,a)
ARG1-of(r,r2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (b / beg-01
            :ARG0 h
            :ARG1 p
            :ARG2 (e / excuse-01
                  :ARG0 p
                  :ARG1 h
                  :ARG2 (a / ask-01
                        :ARG0 h
                        :ARG2 p)))
      :ARG2 (p / person
            :ARG1-of (t / title-01
                  :ARG2 (s2 / sire))))

instance(s,say-01)
instance(h,he)
instance(b,beg-01)
instance(e,excuse-01)
instance(a,ask-01)
instance(p,person)
instance(t,title-01)
instance(s2,sire)
ARG0(s,h)
ARG1(s,b)
ARG0(b,h)
ARG1(b,p)
ARG2(b,e)
ARG0(e,p)
ARG1(e,h)
ARG2(e,a)
ARG0(a,h)
ARG2(a,p)
ARG2(s,p)
ARG1-of(p,t)
ARG2(t,s2)

(h / hasten-01
      :ARG0 (k / king)
      :ARG1 (a / assure-01
            :ARG0 k
            :ARG1 (h2 / he)
            :ARG2 (o / order-01
                  :ARG0 k
                  :ARG1 h2
                  :ARG2 (a2 / ask-01
                        :ARG0 h2
                        :ARG2 k))))

instance(h,hasten-01)
instance(k,king)
instance(a,assure-01)
instance(h2,he)
instance(o,order-01)
instance(a2,ask-01)
ARG0(h,k)
ARG1(h,a)
ARG0(a,k)
ARG1(a,h2)
ARG2(a,o)
ARG0(o,k)
ARG1(o,h2)
ARG2(o,a2)
ARG0(a2,h2)
ARG2(a2,k)

(s / say-01
      :ARG1 (r / rule-03
            :ARG0 p
            :ARG1 (a / amr-unknown))
      :ARG2 (p / person
            :ARG1-of (t / title-01
                  :ARG2 (s2 / sire))))

instance(s,say-01)
instance(r,rule-03)
instance(a,amr-unknown)
instance(p,person)
instance(t,title-01)
instance(s2,sire)
ARG1(s,r)
ARG0(r,p)
ARG1(r,a)
ARG2(s,p)
ARG1-of(p,t)
ARG2(t,s2)

(s / say-01
      :ARG0 (k / king)
      :ARG1 (e / everything)
      :ARG1-of (s2 / simple-02
            :mod (m / magnificence)))

instance(s,say-01)
instance(k,king)
instance(e,everything)
instance(s2,simple-02)
instance(m,magnificence)
ARG0(s,k)
ARG1(s,e)
ARG1-of(s,s2)
mod(s2,m)

(o / over :polarity (a / amr-unknown)
      :op1 (e / everything))

instance(o,over)
instance(a,amr-unknown)
instance(e,everything)
polarity(o,a)
op1(o,e)

(g / gesture-01
      :ARG0 (k / king)
      :ARG0-of (t / take-in-23
            :ARG1 (a / and
                  :op1 (p / planet
                        :poss k)
                  :op2 (p2 / planet
                        :mod (o / other))
                  :op3 (s / star
                        :mod (a2 / all)))))

instance(g,gesture-01)
instance(k,king)
instance(t,take-in-23)
instance(a,and)
instance(p,planet)
instance(p2,planet)
instance(o,other)
instance(s,star)
instance(a2,all)
ARG0(g,k)
ARG0-of(g,t)
ARG1(t,a)
op1(a,p)
poss(p,k)
op2(a,p2)
mod(p2,o)
op3(a,s)
mod(s,a2)

(a / ask-01 :polarity (a2 / amr-unknown)
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (o / over
            :op1 (t / that
                  :mod (a3 / all))))

instance(a,ask-01)
instance(a2,amr-unknown)
instance(p,prince)
instance(l,little)
instance(o,over)
instance(t,that)
instance(a3,all)
polarity(a,a2)
ARG0(a,p)
mod(p,l)
ARG1(a,o)
op1(o,t)
mod(t,a3)

(a / answer-01
  :ARG0 (k / king)
  :ARG2 (o / over
          :op1 (t / that
                 :mod (a2 / all))))

instance(a,answer-01)
instance(k,king)
instance(o,over)
instance(t,that)
instance(a2,all)
ARG0(a,k)
ARG2(a,o)
op1(o,t)
mod(t,a2)

(a3 / and
      :op1 (a4 / absolute
            :domain (r / rule-03
                  :ARG0 (h / he)))
      :op2 (u2 / universal
            :domain r))

instance(a3,and)
instance(a4,absolute)
instance(r,rule-03)
instance(h,he)
instance(u2,universal)
op1(a3,a4)
domain(a4,r)
ARG0(r,h)
op2(a3,u2)
domain(u2,r)

(a / and
      :op2 (o / obey-01
            :ARG0 (s / star)
            :ARG1 (y / you)
            :ARG1-of (r / request-confirmation-91)))

instance(a,and)
instance(o,obey-01)
instance(s,star)
instance(y,you)
instance(r,request-confirmation-91)
op2(a,o)
ARG0(o,s)
ARG1(o,y)
ARG1-of(o,r)

(s / say-01
  :ARG0 (k / king)
  :ARG1 (d / do-02
          :ARG0 (t / they)
          :mod (c / certain)))

instance(s,say-01)
instance(k,king)
instance(d,do-02)
instance(t,they)
instance(c,certain)
ARG0(s,k)
ARG1(s,d)
ARG0(d,t)
mod(d,c)

(o / obey-01
  :ARG0 (t / they)
  :manner (i / instant))

instance(o,obey-01)
instance(t,they)
instance(i,instant)
ARG0(o,t)
manner(o,i)

(p / permit-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (i2 / insubordinate-00))

instance(p,permit-01)
instance(i,i)
instance(i2,insubordinate-00)
polarity(p,-)
ARG0(p,i)
ARG1(p,i2)

(m / marvel-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (p2 / power
            :degree (s / such)))

instance(m,marvel-01)
instance(p,prince)
instance(l,little)
instance(p2,power)
instance(s,such)
ARG0(m,p)
mod(p,l)
ARG1(m,p2)
degree(p2,s)

(p / possible-01
      :ARG1 (w / watch-01
            :ARG0 (h / he)
            :ARG1 (s / sunset
                  :ARG1-of (h3 / have-frequency-91 :polarity -
                        :ARG2 44
                        :range (t5 / temporal-quantity :quant 1
                              :unit (y / year)))
                  :ARG1-of (h4 / have-frequency-91
                        :ARG2 (o / or :op1 72 :op2 100 :op3 200)
                        :range t5))
            :manner (m2 / move-01 :polarity -
                  :ARG0 h
                  :ARG1 (c2 / chair
                        :poss h)
                  :time (e3 / ever)))
      :condition (m / master
            :poss-of (a / authority
                  :ARG1-of (c / complete-02)
                  :mod (s2 / such))
            :domain h))

instance(p,possible-01)
instance(w,watch-01)
instance(h,he)
instance(s,sunset)
instance(h3,have-frequency-91)
instance(t5,temporal-quantity)
instance(y,year)
instance(h4,have-frequency-91)
instance(o,or)
instance(m2,move-01)
instance(c2,chair)
instance(e3,ever)
instance(m,master)
instance(a,authority)
instance(c,complete-02)
instance(s2,such)
ARG1(p,w)
ARG0(w,h)
ARG1(w,s)
ARG1-of(s,h3)
polarity(h3,-)
ARG2(h3,44)
range(h3,t5)
quant(t5,1)
unit(t5,y)
ARG1-of(s,h4)
ARG2(h4,o)
op1(o,72)
op2(o,100)
op3(o,200)
range(h4,t5)
manner(w,m2)
polarity(m2,-)
ARG0(m2,h)
ARG1(m2,c2)
poss(c2,h)
time(m2,e3)
condition(p,m)
poss-of(m,a)
ARG1-of(a,c)
mod(a,s2)
domain(m,h)

(p / pluck-01
      :ARG0 (h / he)
      :ARG1 (c / courage
            :poss h)
      :mod (u / up)
      :ARG1-of (c2 / cause-01
            :ARG0 (f / feel-01
                  :ARG0 h
                  :ARG1 (s3 / sad-02
                        :ARG1 h
                        :degree (b / bit))
                  :ARG1-of (c3 / cause-01
                        :ARG0 (r / remember-01
                              :ARG0 h
                              :ARG1 (p2 / planet
                                    :poss h
                                    :mod (l2 / little)
                                    :ARG1-of (f2 / forsake-01
                                          :ARG0 h))))))
      :ARG0-of (c4 / cause-01
            :ARG1 (a / ask-02
                  :ARG0 h
                  :ARG1 (a2 / and
                        :op1 (l / like-02
                              :ARG0 (i / i)
                              :ARG1 (s / see-01
                                    :ARG0 i
                                    :ARG1 (s2 / sunset)))
                        :op2 (d / do-02 :mode imperative
                              :ARG0 k
                              :ARG1 (t / thing
                                    :ARG1-of (k2 / kind-01
                                          :ARG0 k
                                          :ARG2 h))
                              :ARG2 h))
                  :ARG2 (k / king))))

instance(p,pluck-01)
instance(h,he)
instance(c,courage)
instance(u,up)
instance(c2,cause-01)
instance(f,feel-01)
instance(s3,sad-02)
instance(b,bit)
instance(c3,cause-01)
instance(r,remember-01)
instance(p2,planet)
instance(l2,little)
instance(f2,forsake-01)
instance(c4,cause-01)
instance(a,ask-02)
instance(a2,and)
instance(l,like-02)
instance(i,i)
instance(s,see-01)
instance(s2,sunset)
instance(d,do-02)
instance(t,thing)
instance(k2,kind-01)
instance(k,king)
ARG0(p,h)
ARG1(p,c)
poss(c,h)
mod(p,u)
ARG1-of(p,c2)
ARG0(c2,f)
ARG0(f,h)
ARG1(f,s3)
ARG1(s3,h)
degree(s3,b)
ARG1-of(f,c3)
ARG0(c3,r)
ARG0(r,h)
ARG1(r,p2)
poss(p2,h)
mod(p2,l2)
ARG1-of(p2,f2)
ARG0(f2,h)
ARG0-of(p,c4)
ARG1(c4,a)
ARG0(a,h)
ARG1(a,a2)
op1(a2,l)
ARG0(l,i)
ARG1(l,s)
ARG0(s,i)
ARG1(s,s2)
op2(a2,d)
mode(d,imperative)
ARG0(d,k)
ARG1(d,t)
ARG1-of(t,k2)
ARG0(k2,k)
ARG2(k2,h)
ARG2(d,h)
ARG2(a,k)

(o / order-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / sun)
      :ARG2 (s2 / set-11
            :ARG1 s))

instance(o,order-01)
instance(y,you)
instance(s,sun)
instance(s2,set-11)
mode(o,imperative)
ARG0(o,y)
ARG1(o,s)
ARG2(o,s2)
ARG1(s2,s)

(d / demand-01
      :ARG0 (k / king)
      :ARG1 (w / wrong-04
            :ARG1 (a / amr-unknown
                  :ARG1-of (i2 / include-91
                        :ARG2 (w3 / we)))
            :condition (a2 / and
                  :op1 (o3 / order-01
                        :ARG0 k
                        :ARG1 (p / person
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (g / general)))
                        :ARG2 (o4 / or
                              :op1 (f / fly-01
                                    :ARG1 p
                                    :destination (a3 / another)
                                    :source (t / thing
                                          :ARG1-of (f2 / flower-01 :quant 1))
                                    :manner (b / butterfly))
                              :op2 (w2 / write-01
                                    :ARG0 p
                                    :ARG1 (d2 / drama
                                          :mod (t2 / tragedy)))
                              :op3 (c2 / change-01
                                    :ARG0 p
                                    :ARG1 p
                                    :ARG2 (b2 / bird
                                          :mod (s / sea)))))
                  :op2 (c / carry-out-03 :polarity -
                        :ARG0 p
                        :ARG1 (t3 / thing
                              :ARG2-of (o2 / order-01)
                              :ARG1-of (r / receive-01
                                    :ARG0 p
                                    :ARG2 k))))))

instance(d,demand-01)
instance(k,king)
instance(w,wrong-04)
instance(a,amr-unknown)
instance(i2,include-91)
instance(w3,we)
instance(a2,and)
instance(o3,order-01)
instance(p,person)
instance(h,have-org-role-91)
instance(g,general)
instance(o4,or)
instance(f,fly-01)
instance(a3,another)
instance(t,thing)
instance(f2,flower-01)
instance(b,butterfly)
instance(w2,write-01)
instance(d2,drama)
instance(t2,tragedy)
instance(c2,change-01)
instance(b2,bird)
instance(s,sea)
instance(c,carry-out-03)
instance(t3,thing)
instance(o2,order-01)
instance(r,receive-01)
ARG0(d,k)
ARG1(d,w)
ARG1(w,a)
ARG1-of(a,i2)
ARG2(i2,w3)
condition(w,a2)
op1(a2,o3)
ARG0(o3,k)
ARG1(o3,p)
ARG0-of(p,h)
ARG2(h,g)
ARG2(o3,o4)
op1(o4,f)
ARG1(f,p)
destination(f,a3)
source(f,t)
ARG1-of(t,f2)
quant(f2,1)
manner(f,b)
op2(o4,w2)
ARG0(w2,p)
ARG1(w2,d2)
mod(d2,t2)
op3(o4,c2)
ARG0(c2,p)
ARG1(c2,p)
ARG2(c2,b2)
mod(b2,s)
op2(a2,c)
polarity(c,-)
ARG0(c,p)
ARG1(c,t3)
ARG2-of(t3,o2)
ARG1-of(t3,r)
ARG0(r,p)
ARG2(r,k)

(a / amr-choice
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (g / general)))
      :op2 (i / i))

instance(a,amr-choice)
instance(p,person)
instance(h,have-org-role-91)
instance(g,general)
instance(i,i)
op1(a,p)
ARG0-of(p,h)
ARG2(h,g)
op2(a,i)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (y / you)
      :ARG1-of (f / firm-03))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(y,you)
instance(f,firm-03)
ARG0(s,p)
mod(p,l)
ARG1(s,y)
ARG1-of(s,f)

(e / exact)

instance(e,exact)

(g / go-on-25
      :ARG0 (k / king)
      :ARG1 (o / obligate-01
            :ARG1 (o2 / one)
            :ARG2 (r / require-01
                  :ARG0 o2
                  :ARG1 (d / duty
                        :ARG1-of (p / perform-02
                              :ARG0 o3
                              :ARG1-of (p2 / possible-01)))
                  :ARG2 (o3 / one
                        :mod (e / each)))))

instance(g,go-on-25)
instance(k,king)
instance(o,obligate-01)
instance(o2,one)
instance(r,require-01)
instance(d,duty)
instance(p,perform-02)
instance(p2,possible-01)
instance(o3,one)
instance(e,each)
ARG0(g,k)
ARG1(g,o)
ARG1(o,o2)
ARG2(o,r)
ARG0(r,o2)
ARG1(r,d)
ARG1-of(d,p)
ARG0(p,o3)
ARG1-of(p,p2)
ARG2(r,o3)
mod(o3,e)

(r / rest-02
      :ARG1 (a / authority
            :ARG1-of (a2 / accept-01))
      :ARG2 (r2 / reason-01)
      :mod (f / first-of-all))

instance(r,rest-02)
instance(a,authority)
instance(a2,accept-01)
instance(r2,reason-01)
instance(f,first-of-all)
ARG1(r,a)
ARG1-of(a,a2)
ARG2(r,r2)
mod(r,f)

(r / rise-up-03
      :ARG0 (p / person
            :poss y
            :ARG0-of (r2 / revolution-03))
      :ARG1 y
      :condition (o / order-01
            :ARG0 (y / you)
            :ARG1 p
            :ARG2 (t / throw-01
                  :ARG0 p
                  :ARG1 p
                  :ARG2 (s / sea))))

instance(r,rise-up-03)
instance(p,person)
instance(r2,revolution-03)
instance(o,order-01)
instance(y,you)
instance(t,throw-01)
instance(s,sea)
ARG0(r,p)
poss(p,y)
ARG0-of(p,r2)
ARG1(r,y)
condition(r,o)
ARG0(o,y)
ARG1(o,p)
ARG2(o,t)
ARG0(t,p)
ARG1(t,p)
ARG2(t,s)

(r / right-05
      :ARG1 i
      :ARG2 (r2 / require-01
            :ARG0 (i / i)
            :ARG1 (o / obey-01
                  :ARG1 i))
      :ARG1-of (c / cause-01
            :ARG0 (r3 / reasonable-02
                  :ARG1 (t / thing
                        :ARG2-of (o2 / order-01)))))

instance(r,right-05)
instance(r2,require-01)
instance(i,i)
instance(o,obey-01)
instance(c,cause-01)
instance(r3,reasonable-02)
instance(t,thing)
instance(o2,order-01)
ARG1(r,i)
ARG2(r,r2)
ARG0(r2,i)
ARG1(r2,o)
ARG1(o,i)
ARG1-of(r,c)
ARG0(c,r3)
ARG1(r3,t)
ARG2-of(t,o2)

(r / remind-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t2 / truth-value
            :polarity-of (s / sunset
                  :poss p))
      :ARG2 (h / he)
      :ARG1-of (c / cause-01
            :ARG0 (f / forget-01 :polarity -
                  :ARG0 p
                  :ARG1 (t / thing
                        :ARG1-of (q / question-01))
                  :condition (a / ask-01
                        :ARG0 p
                        :ARG1 t)
                  :time (e / ever))))

instance(r,remind-01)
instance(p,prince)
instance(l,little)
instance(t2,truth-value)
instance(s,sunset)
instance(h,he)
instance(c,cause-01)
instance(f,forget-01)
instance(t,thing)
instance(q,question-01)
instance(a,ask-01)
instance(e,ever)
ARG0(r,p)
mod(p,l)
ARG1(r,t2)
polarity-of(t2,s)
poss(s,p)
ARG2(r,h)
ARG1-of(r,c)
ARG0(c,f)
polarity(f,-)
ARG0(f,p)
ARG1(f,t)
ARG1-of(t,q)
condition(f,a)
ARG0(a,p)
ARG1(a,t)
time(f,e)

(h / have-03
  :ARG0 (y / you)
  :ARG1 (s / sunset
          :poss y))

instance(h,have-03)
instance(y,you)
instance(s,sunset)
ARG0(h,y)
ARG1(h,s)
poss(s,y)

(c / command-02
  :ARG0 (i / i)
  :ARG2 (i2 / it))

instance(c,command-02)
instance(i,i)
instance(i2,it)
ARG0(c,i)
ARG2(c,i2)

(c3 / contrast-01
      :ARG2 (w / wait-01
            :ARG1 (i / i)
            :ARG2 (c / condition
                  :mod (f2 / favorable))
            :ARG1-of (c2 / cause-01
                  :ARG0 (s2 / science
                        :domain (g / government-organization
                              :ARG0-of (g2 / govern-01))
                        :poss i))))

instance(c3,contrast-01)
instance(w,wait-01)
instance(i,i)
instance(c,condition)
instance(f2,favorable)
instance(c2,cause-01)
instance(s2,science)
instance(g,government-organization)
instance(g2,govern-01)
ARG2(c3,w)
ARG1(w,i)
ARG2(w,c)
mod(c,f2)
ARG1-of(w,c2)
ARG0(c2,s2)
domain(s2,g)
ARG0-of(g,g2)
poss(s2,i)

(i / inquire-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (b2 / be-temporally-at-91
            :ARG1 (t / that)
            :ARG2 (a / amr-unknown)))

instance(i,inquire-01)
instance(p,prince)
instance(l,little)
instance(b2,be-temporally-at-91)
instance(t,that)
instance(a,amr-unknown)
ARG0(i,p)
mod(p,l)
ARG1(i,b2)
ARG1(b2,t)
ARG2(b2,a)

(h / hum :mode expressive)

instance(h,hum)
mode(h,expressive)

(a / and
      :op1 (r / reply-01
            :ARG0 (k / king)
            :ARG2 (h / hum :mode expressive))
      :op2 (c / consult-01
            :ARG0 k
            :ARG1 (a2 / almanac
                  :ARG1-of (b / bulky-02))
            :time (b2 / before
                  :op1 (s / say-01
                        :ARG0 k
                        :ARG1 (a3 / anything
                              :mod (e / else))))))

instance(a,and)
instance(r,reply-01)
instance(k,king)
instance(h,hum)
instance(c,consult-01)
instance(a2,almanac)
instance(b,bulky-02)
instance(b2,before)
instance(s,say-01)
instance(a3,anything)
instance(e,else)
op1(a,r)
ARG0(r,k)
ARG2(r,h)
mode(h,expressive)
op2(a,c)
ARG0(c,k)
ARG1(c,a2)
ARG1-of(a2,b)
time(c,b2)
op1(b2,s)
ARG0(s,k)
ARG1(s,a3)
mod(a3,e)

(h / hum :mode expressive)

instance(h,hum)
mode(h,expressive)

(h / hum :mode expressive)

instance(h,hum)
mode(h,expressive)

(b / be-temporally-at-91
      :ARG1 (t3 / that)
      :ARG2 (a / about
            :op1 (d / date-entity :time "19:40"
                  :dayperiod (e / evening)
                  :mod (t / today))))

instance(b,be-temporally-at-91)
instance(t3,that)
instance(a,about)
instance(d,date-entity)
instance(e,evening)
instance(t,today)
ARG1(b,t3)
ARG2(b,a)
op1(a,d)
time(d,"19)
40"(d,dayperiod)
mod(dayperiod,t)

(s / see-01
      :ARG0 (y / you)
      :ARG1 (o / obey-01
            :ARG1 (i / i)
            :manner (w / well
                  :degree (s2 / so))))

instance(s,see-01)
instance(y,you)
instance(o,obey-01)
instance(i,i)
instance(w,well)
instance(s2,so)
ARG0(s,y)
ARG1(s,o)
ARG1(o,i)
manner(o,w)
degree(w,s2)

(y / yawn-01
  :ARG0 (p / prince
          :mod (l / little)))

instance(y,yawn-01)
instance(p,prince)
instance(l,little)
ARG0(y,p)
mod(p,l)

(r / regret-01
      :ARG0 (h / he)
      :ARG1 (l / lose-02
            :ARG0 h
            :ARG1 (s / sunset)))

instance(r,regret-01)
instance(h,he)
instance(l,lose-02)
instance(s,sunset)
ARG0(r,h)
ARG1(r,l)
ARG0(l,h)
ARG1(l,s)

(a2 / and
      :op2 (b / begin-01
            :ARG1 (b4 / bore-02
                  :ARG1 (h2 / he)
                  :degree (l / little))
            :time (a / already)))

instance(a2,and)
instance(b,begin-01)
instance(b4,bore-02)
instance(h2,he)
instance(l,little)
instance(a,already)
op2(a2,b)
ARG1(b,b4)
ARG1(b4,h2)
degree(b4,l)
time(b,a)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (r / remain-01 :polarity -
            :ARG1 (t / thing
                  :ARG1-of (d2 / do-02))
            :location (h2 / here))
      :ARG2 (k / king))

instance(s,say-01)
instance(h,he)
instance(r,remain-01)
instance(t,thing)
instance(d2,do-02)
instance(h2,here)
instance(k,king)
ARG0(s,h)
ARG1(s,r)
polarity(r,-)
ARG1(r,t)
ARG1-of(t,d2)
location(r,h2)
ARG2(s,k)

(c / cause-01
      :ARG1 (s / set-out-07
            :ARG0 (i / i)
            :ARG1 (w / way
                  :poss i)
            :mod (a / again)))

instance(c,cause-01)
instance(s,set-out-07)
instance(i,i)
instance(w,way)
instance(a,again)
ARG1(c,s)
ARG0(s,i)
ARG1(s,w)
poss(w,i)
mod(s,a)

(s / say-01
      :ARG0 (k / king
            :ARG0-of (p / pride-01
                  :ARG2 (h / have-03
                        :ARG0 k
                        :ARG1 (s2 / subject))
                  :degree (v / very)))
      :ARG1 (g / go-02 :polarity - :mode imperative
            :ARG0 (y / you)))

instance(s,say-01)
instance(k,king)
instance(p,pride-01)
instance(h,have-03)
instance(s2,subject)
instance(v,very)
instance(g,go-02)
instance(y,you)
ARG0(s,k)
ARG0-of(k,p)
ARG2(p,h)
ARG0(h,k)
ARG1(h,s2)
degree(p,v)
ARG1(s,g)
polarity(g,-)
mode(g,imperative)
ARG0(g,y)

(g / go-02 :polarity - :mode imperative
      :ARG0 (y / you))

instance(g,go-02)
instance(y,you)
polarity(g,-)
mode(g,imperative)
ARG0(g,y)

(m / make-02
      :ARG0 (i / i)
      :ARG1 (h / have-org-role-91
            :ARG0 (y / you)
            :ARG2 (m2 / minister)))

instance(m,make-02)
instance(i,i)
instance(h,have-org-role-91)
instance(y,you)
instance(m2,minister)
ARG0(m,i)
ARG1(m,h)
ARG0(h,y)
ARG2(h,m2)

(m / minister
      :topic (a / amr-unknown))

instance(m,minister)
instance(a,amr-unknown)
topic(m,a)

(m / minister
      :topic (j / justice))

instance(m,minister)
instance(j,justice)
topic(m,j)

(n / nobody
      :location (h / here)
      :ARG1-of (j / judge-01))

instance(n,nobody)
instance(h,here)
instance(j,judge-01)
location(n,h)
ARG1-of(n,j)

(s / say-01
  :ARG0 (k / king)
  :ARG1 (k2 / know-01
          :ARG0 (w / we)
          :ARG1 (t / that)
          :polarity -)
  :ARG2 (h / he))

instance(s,say-01)
instance(k,king)
instance(k2,know-01)
instance(w,we)
instance(t,that)
instance(h,he)
ARG0(s,k)
ARG1(s,k2)
ARG0(k2,w)
ARG1(k2,t)
polarity(k2,-)
ARG2(s,h)

(t / tour-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (k / kingdom
            :poss i)
      :ARG1-of (c / complete-02))

instance(t,tour-01)
instance(i,i)
instance(k,kingdom)
instance(c,complete-02)
polarity(t,-)
ARG0(t,i)
ARG1(t,k)
poss(k,i)
ARG1-of(t,c)

(o2 / old
      :domain (i / i)
      :degree (v / very))

instance(o2,old)
instance(i,i)
instance(v,very)
domain(o2,i)
degree(o2,v)

(r / room
  :polarity -
  :purpose (c / carriage)
  :location (h / here))

instance(r,room)
instance(c,carriage)
instance(h,here)
polarity(r,-)
purpose(r,c)
location(r,h)

(t / tire-01
  :ARG0 (w / walk-01
          :ARG0 (i / i))
  :ARG1 i)

instance(t,tire-01)
instance(w,walk-01)
instance(i,i)
ARG0(t,w)
ARG0(w,i)
ARG1(t,i)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (t / turn-01
                  :ARG1 p
                  :purpose (g / glance-01 :quant 1
                        :ARG0 p
                        :ARG1 (s2 / side
                              :mod (o / other)
                              :part-of (p2 / planet))
                        :mod (m / more))))
      :ARG1 (c / contrast-01
            :ARG2 (l2 / look-01
                  :ARG0 p
                  :time (a2 / already))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(t,turn-01)
instance(g,glance-01)
instance(s2,side)
instance(o,other)
instance(p2,planet)
instance(m,more)
instance(c,contrast-01)
instance(l2,look-01)
instance(a2,already)
ARG0(s,p)
mod(p,l)
ARG0-of(p,t)
ARG1(t,p)
purpose(t,g)
quant(g,1)
ARG0(g,p)
ARG1(g,s2)
mod(s2,o)
part-of(s2,p2)
mod(g,m)
ARG1(s,c)
ARG2(c,l2)
ARG0(l2,p)
time(l2,a2)

(n2 / nobody
  :location (s / side
              :mod (t / that)
              :ARG1-of (s2 / same-01
                         :ARG2 (t2 / this)))
  :mod (a / at-all))

instance(n2,nobody)
instance(s,side)
instance(t,that)
instance(s2,same-01)
instance(t2,this)
instance(a,at-all)
location(n2,s)
mod(s,t)
ARG1-of(s,s2)
ARG2(s2,t2)
mod(n2,a)

(a / answer-01
      :ARG0 (k / king)
      :ARG2 (h / have-condition-91
            :ARG1 (j / judge-01
                  :ARG0 (y / you)
                  :ARG1 y)))

instance(a,answer-01)
instance(k,king)
instance(h,have-condition-91)
instance(j,judge-01)
instance(y,you)
ARG0(a,k)
ARG2(a,h)
ARG1(h,j)
ARG0(j,y)
ARG1(j,y)

(h / have-degree-91
      :ARG1 (t / that)
      :ARG2 (d / difficult)
      :ARG3 (m / most)
      :ARG5 (a / all))

instance(h,have-degree-91)
instance(t,that)
instance(d,difficult)
instance(m,most)
instance(a,all)
ARG1(h,t)
ARG2(h,d)
ARG3(h,m)
ARG5(h,a)

(h / have-degree-91
      :ARG1 (j / judge-01
            :ARG0 (o / one)
            :ARG1 o)
      :ARG2 (d / difficult)
      :ARG3 (m / more
            :quant (m2 / much))
      :ARG4 (j2 / judge-01
            :ARG1 (o2 / other)))

instance(h,have-degree-91)
instance(j,judge-01)
instance(o,one)
instance(d,difficult)
instance(m,more)
instance(m2,much)
instance(j2,judge-01)
instance(o2,other)
ARG1(h,j)
ARG0(j,o)
ARG1(j,o)
ARG2(h,d)
ARG3(h,m)
quant(m,m2)
ARG4(h,j2)
ARG1(j2,o2)

(w2 / wise
      :domain (y / you)
      :condition (s / succeed-01
            :ARG0 y
            :ARG1 (j / judge-01
                  :ARG0 y
                  :ARG1 y
                  :ARG1-of (r / right-02)))
      :ARG1-of (t / true-01))

instance(w2,wise)
instance(y,you)
instance(s,succeed-01)
instance(j,judge-01)
instance(r,right-02)
instance(t,true-01)
domain(w2,y)
condition(w2,s)
ARG0(s,y)
ARG1(s,j)
ARG0(j,y)
ARG1(j,y)
ARG1-of(j,r)
ARG1-of(w2,t)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (y / yes
          :concession (p2 / possible-01
                        :ARG1 (j / judge-01
                                  :ARG0 p
                                  :ARG1 p
                                  :location (a / anywhere)))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(y,yes)
instance(p2,possible-01)
instance(j,judge-01)
instance(a,anywhere)
ARG0(s,p)
mod(p,l)
ARG1(s,y)
concession(y,p2)
ARG1(p2,j)
ARG0(j,p)
ARG1(j,p)
location(j,a)

(n / need-01
  :ARG0 (i / i)
  :ARG1 (l / live-01
          :ARG0 i
          :location (p / planet
                      :mod (t / this)))
  :polarity -)

instance(n,need-01)
instance(i,i)
instance(l,live-01)
instance(p,planet)
instance(t,this)
ARG0(n,i)
ARG1(n,l)
ARG0(l,i)
location(l,p)
mod(p,t)
polarity(n,-)

(h / hum :mode expressive)

instance(h,hum)
mode(h,expressive)

(s / say-01
      :ARG0 (k / king)
      :ARG1 (h / hum :mode expressive))

instance(s,say-01)
instance(k,king)
instance(h,hum)
ARG0(s,k)
ARG1(s,h)
mode(h,expressive)

(h2 / have-03
      :ARG0 (i / i)
      :ARG1 (r3 / reason
            :ARG1-of (g / good-02)
            :ARG0-of (c / cause-01
                  :ARG1 (b3 / believe-01
                        :ARG0 i
                        :ARG1 (r2 / rat
                              :location (s / somewhere
                                    :location (p / planet
                                          :poss i))
                              :mod (o / old))))))

instance(h2,have-03)
instance(i,i)
instance(r3,reason)
instance(g,good-02)
instance(c,cause-01)
instance(b3,believe-01)
instance(r2,rat)
instance(s,somewhere)
instance(p,planet)
instance(o,old)
ARG0(h2,i)
ARG1(h2,r3)
ARG1-of(r3,g)
ARG0-of(r3,c)
ARG1(c,b3)
ARG0(b3,i)
ARG1(b3,r2)
location(r2,s)
location(s,p)
poss(p,i)
mod(r2,o)

(h / hear-01
  :ARG0 (i / i)
  :ARG1 (h2 / he)
  :time (d / date-entity :dayperiod (n / night)))

instance(h,hear-01)
instance(i,i)
instance(h2,he)
instance(d,date-entity)
instance(n,night)
ARG0(h,i)
ARG1(h,h2)
time(h,d)
dayperiod(d,n)

(p / possible-01
      :ARG1 (j / judge-01
            :ARG0 (y / you)
            :ARG1 (r / rat
                  :mod (o / old)
                  :mod (t / this))))

instance(p,possible-01)
instance(j,judge-01)
instance(y,you)
instance(r,rat)
instance(o,old)
instance(t,this)
ARG1(p,j)
ARG0(j,y)
ARG1(j,r)
mod(r,o)
mod(r,t)

(c / condemn-01
  :ARG0 (y / you)
  :ARG1 (h / he)
  :ARG3 (d / die-01
          :ARG1 h)
  :frequency (t / time-to-time))

instance(c,condemn-01)
instance(y,you)
instance(h,he)
instance(d,die-01)
instance(t,time-to-time)
ARG0(c,y)
ARG1(c,h)
ARG3(c,d)
ARG1(d,h)
frequency(c,t)

(d / depend-01
      :ARG0 (l / live-01
            :ARG0 (h / he))
      :ARG1 (j / justice
            :poss (y / you)))

instance(d,depend-01)
instance(l,live-01)
instance(h,he)
instance(j,justice)
instance(y,you)
ARG0(d,l)
ARG0(l,h)
ARG1(d,j)
poss(j,y)

(p / pardon-01
      :ARG0 (y / you)
      :ARG1 (h / he)
      :frequency (o2 / occasion-02
            :quant (e / each))
      :ARG1-of (c / cause-01
            :ARG0 (o / obligate-01
                  :ARG2 (t / treat-04
                        :ARG1 h
                        :manner (t2 / thrift)))))

instance(p,pardon-01)
instance(y,you)
instance(h,he)
instance(o2,occasion-02)
instance(e,each)
instance(c,cause-01)
instance(o,obligate-01)
instance(t,treat-04)
instance(t2,thrift)
ARG0(p,y)
ARG1(p,h)
frequency(p,o2)
quant(o2,e)
ARG1-of(p,c)
ARG0(c,o)
ARG2(o,t)
ARG1(t,h)
manner(t,t2)

(o / one
      :mod (o2 / only)
      :domain (h2 / he)
      :ARG1-of (h / have-03
            :ARG0 (w / we)))

instance(o,one)
instance(o2,only)
instance(h2,he)
instance(h,have-03)
instance(w,we)
mod(o,o2)
domain(o,h2)
ARG1-of(o,h)
ARG0(h,w)

(r / reply-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (d2 / dislike-01
            :ARG0 p
            :ARG1 (c / condemn-01
                  :ARG0 p
                  :ARG1 (a / anyone)
                  :ARG3 (d / die-01
                        :ARG1 a))))

instance(r,reply-01)
instance(p,prince)
instance(l,little)
instance(d2,dislike-01)
instance(c,condemn-01)
instance(a,anyone)
instance(d,die-01)
ARG0(r,p)
mod(p,l)
ARG1(r,d2)
ARG0(d2,p)
ARG1(d2,c)
ARG0(c,p)
ARG1(c,a)
ARG3(c,d)
ARG1(d,a)

(t / think-01
      :ARG0 (i / i)
      :ARG1 (g / go-02
            :ARG0 i
            :ARG1 (w / way
                  :poss i))
      :time (n / now))

instance(t,think-01)
instance(i,i)
instance(g,go-02)
instance(w,way)
instance(n,now)
ARG0(t,i)
ARG1(t,g)
ARG0(g,i)
ARG1(g,w)
poss(w,i)
time(t,n)

(s / say-01
      :ARG0 (k / king)
      :ARG1 (n / no))

instance(s,say-01)
instance(k,king)
instance(n,no)
ARG0(s,k)
ARG1(s,n)

(w / wish-01 :polarity -
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (c / complete-01
                  :ARG1 (p2 / prepare-02
                        :ARG0 p
                        :ARG2 (d / depart-01
                              :ARG0 p))
                  :time (n / now)))
      :ARG1 (g / grieve-01
            :ARG0 p
            :ARG1 (m / monarch
                  :mod (o / old))))

instance(w,wish-01)
instance(p,prince)
instance(l,little)
instance(c,complete-01)
instance(p2,prepare-02)
instance(d,depart-01)
instance(n,now)
instance(g,grieve-01)
instance(m,monarch)
instance(o,old)
polarity(w,-)
ARG0(w,p)
mod(p,l)
ARG0-of(p,c)
ARG1(c,p2)
ARG0(p2,p)
ARG2(p2,d)
ARG0(d,p)
time(c,n)
ARG1(w,g)
ARG0(g,p)
ARG1(g,m)
mod(m,o)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (p / possible-01
            :ARG1 (o / order-01
                  :ARG0 (p2 / person
                        :ARG1-of (t2 / title-01
                              :ARG2 (m / majesty
                                    :poss p2)))
                  :ARG1 h
                  :ARG2 (t / thing
                        :ARG1-of (r / reasonable-02)))
            :condition (w / wish-01
                  :ARG0 p2
                  :ARG1 (o2 / obey-01
                        :ARG1 p2
                        :manner (p3 / prompt)))))

instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(o,order-01)
instance(p2,person)
instance(t2,title-01)
instance(m,majesty)
instance(t,thing)
instance(r,reasonable-02)
instance(w,wish-01)
instance(o2,obey-01)
instance(p3,prompt)
ARG0(s,h)
ARG1(s,p)
ARG1(p,o)
ARG0(o,p2)
ARG1-of(p2,t2)
ARG2(t2,m)
poss(m,p2)
ARG1(o,h)
ARG2(o,t)
ARG1-of(t,r)
condition(p,w)
ARG0(w,p2)
ARG1(w,o2)
ARG1(o2,p2)
manner(o2,p3)

(e2 / exemplify-01
      :ARG0 (p / possible-01
            :ARG1 (o / order-01
                  :ARG0 (h / he)
                  :ARG1 (i / i)
                  :ARG2 (g / go-02
                        :ARG0 i
                        :time (b / by
                              :op1 (e / end-01
                                    :ARG1 (t / temporal-quantity :quant 1
                                          :unit (m / minute))))))))

instance(e2,exemplify-01)
instance(p,possible-01)
instance(o,order-01)
instance(h,he)
instance(i,i)
instance(g,go-02)
instance(b,by)
instance(e,end-01)
instance(t,temporal-quantity)
instance(m,minute)
ARG0(e2,p)
ARG1(p,o)
ARG0(o,h)
ARG1(o,i)
ARG2(o,g)
ARG0(g,i)
time(g,b)
op1(b,e)
ARG1(e,t)
quant(t,1)
unit(t,m)

(s / seem-01
      :ARG1 (f / favorable
            :domain (c / condition))
      :ARG2 (i2 / i))

instance(s,seem-01)
instance(f,favorable)
instance(c,condition)
instance(i2,i)
ARG1(s,f)
domain(f,c)
ARG2(s,i2)

(h / hesitate-01
      :ARG0 (p / prince
            :mod (l / little))
      :duration (m / moment)
      :ARG1-of (c / cause-01
            :ARG0 (a / answer-01 :polarity -
                  :ARG0 (k / king))))

instance(h,hesitate-01)
instance(p,prince)
instance(l,little)
instance(m,moment)
instance(c,cause-01)
instance(a,answer-01)
instance(k,king)
ARG0(h,p)
mod(p,l)
duration(h,m)
ARG1-of(h,c)
ARG0(c,a)
polarity(a,-)
ARG0(a,k)

(t / take-01
      :ARG0 (h / he
            :ARG0-of (s / sigh-02))
      :ARG1 (l / leave-11
            :ARG0 h)
      :time (t2 / then))

instance(t,take-01)
instance(h,he)
instance(s,sigh-02)
instance(l,leave-11)
instance(t2,then)
ARG0(t,h)
ARG0-of(h,s)
ARG1(t,l)
ARG0(l,h)
time(t,t2)

(c / call-07
      :ARG0 (k / king)
      :ARG1 (m / make-02
            :ARG0 k
            :ARG1 (h2 / have-org-role-91
                  :ARG0 (y / you)
                  :ARG1 k
                  :ARG2 (a / ambassador)))
      :manner (h / hasty))

instance(c,call-07)
instance(k,king)
instance(m,make-02)
instance(h2,have-org-role-91)
instance(y,you)
instance(a,ambassador)
instance(h,hasty)
ARG0(c,k)
ARG1(c,m)
ARG0(m,k)
ARG1(m,h2)
ARG0(h2,y)
ARG1(h2,k)
ARG2(h2,a)
manner(c,h)

(h / have-03
      :ARG0 (h2 / he)
      :ARG1 (a / air
            :mod (m / magnificence)
            :domain (a2 / authority)))

instance(h,have-03)
instance(h2,he)
instance(a,air)
instance(m,magnificence)
instance(a2,authority)
ARG0(h,h2)
ARG1(h,a)
mod(a,m)
domain(a,a2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (s2 / strange
            :degree (v / very)
            :domain (g / grown-up))
      :ARG2 p
      :time (c / continue-01
            :ARG0 p
            :ARG1 (j / journey-01
                  :ARG0 p)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(s2,strange)
instance(v,very)
instance(g,grown-up)
instance(c,continue-01)
instance(j,journey-01)
ARG0(s,p)
mod(p,l)
ARG1(s,s2)
degree(s2,v)
domain(s2,g)
ARG2(s,p)
time(s,c)
ARG0(c,p)
ARG1(c,j)
ARG0(j,p)

(c / chapter :mod 11)

instance(c,chapter)
mod(c,11)

(i / inhabit-01
  :ARG0 (m / man
          :mod (c / conceit))
  :ARG1 (p / planet
          :ord (o / ordinal-entity :value 2)))

instance(i,inhabit-01)
instance(m,man)
instance(c,conceit)
instance(p,planet)
instance(o,ordinal-entity)
ARG0(i,m)
mod(m,c)
ARG1(i,p)
ord(p,o)
value(o,2)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(e / exclaim-01
      :ARG0 (h / he)
      :ARG1 (v / visit-01
            :ARG0 h
            :ARG1 (p / person
                  :ARG0-of (a / admire-01
                        :ARG1 h))
            :time (a3 / about-to))
      :time (s / see-01
            :ARG0 h
            :ARG1 (c / come-01
                  :ARG1 (p2 / prince
                        :mod (l / little)))
            :ord (o / ordinal-entity :value 1))
      :direction (f2 / from
            :op1 (a2 / afar)))

instance(e,exclaim-01)
instance(h,he)
instance(v,visit-01)
instance(p,person)
instance(a,admire-01)
instance(a3,about-to)
instance(s,see-01)
instance(c,come-01)
instance(p2,prince)
instance(l,little)
instance(o,ordinal-entity)
instance(f2,from)
instance(a2,afar)
ARG0(e,h)
ARG1(e,v)
ARG0(v,h)
ARG1(v,p)
ARG0-of(p,a)
ARG1(a,h)
time(v,a3)
time(e,s)
ARG0(s,h)
ARG1(s,c)
ARG1(c,p2)
mod(p2,l)
ord(s,o)
value(o,1)
direction(e,f2)
op1(f2,a2)

(o2 / opine-01
      :ARG0 (m2 / man
            :mod (c / conceit))
      :ARG1 (p2 / person
            :ARG0-of (a3 / admire-01)
            :domain (m / man
                  :mod (o / other)
                  :mod (a / all))))

instance(o2,opine-01)
instance(m2,man)
instance(c,conceit)
instance(p2,person)
instance(a3,admire-01)
instance(m,man)
instance(o,other)
instance(a,all)
ARG0(o2,m2)
mod(m2,c)
ARG1(o2,p2)
ARG0-of(p2,a3)
domain(p2,m)
mod(m,o)
mod(m,a)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m,morning)
instance(g,good-02)
ARG0(s,p)
mod(p,l)
ARG1(s,m)
ARG1-of(m,g)

(h2 / hat
      :mod (q2 / queer)
      :domain (t2 / that)
      :ARG1-of (w2 / wear-01))

instance(h2,hat)
instance(q2,queer)
instance(t2,that)
instance(w2,wear-01)
mod(h2,q2)
domain(h2,t2)
ARG1-of(h2,w2)

(r / reply-01
      :ARG0 (m / man
            :mod (c / conceit))
      :ARG1 (h2 / hat
            :purpose (s / salute-01
                  :instrument h2)
            :domain (i / it)))

instance(r,reply-01)
instance(m,man)
instance(c,conceit)
instance(h2,hat)
instance(s,salute-01)
instance(i,it)
ARG0(r,m)
mod(m,c)
ARG1(r,h2)
purpose(h2,s)
instrument(s,h2)
domain(h2,i)

(h / have-purpose-91
      :ARG1 (i / it)
      :ARG2 (r / raise-01
            :ARG1 i
            :subevent-of (s / salute-01
                  :time (a / acclaim-01
                        :ARG0 (p / person)
                        :ARG1 (i2 / i))
                  :instrument i)))

instance(h,have-purpose-91)
instance(i,it)
instance(r,raise-01)
instance(s,salute-01)
instance(a,acclaim-01)
instance(p,person)
instance(i2,i)
ARG1(h,i)
ARG2(h,r)
ARG1(r,i)
subevent-of(r,s)
time(s,a)
ARG0(a,p)
ARG1(a,i2)
instrument(s,i)

(p / pass-03
      :ARG1 (n / nobody
            :degree (a / at-all))
      :path (w / way
            :mod (t / this))
      :ARG2-of (f / fortunate-01 :polarity -)
      :time (e / ever))

instance(p,pass-03)
instance(n,nobody)
instance(a,at-all)
instance(w,way)
instance(t,this)
instance(f,fortunate-01)
instance(e,ever)
ARG1(p,n)
degree(n,a)
path(p,w)
mod(w,t)
ARG2-of(p,f)
polarity(f,-)
time(p,e)

(r / request-response-91
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (u / understand-01 :polarity -
                  :ARG1 (t2 / thing
                        :ARG1-of (t / talk-01
                              :ARG0 (m / man
                                    :mod (c / conceit)))))))

instance(r,request-response-91)
instance(p,prince)
instance(l,little)
instance(u,understand-01)
instance(t2,thing)
instance(t,talk-01)
instance(m,man)
instance(c,conceit)
ARG0(r,p)
mod(p,l)
ARG0-of(p,u)
polarity(u,-)
ARG1(u,t2)
ARG1-of(t2,t)
ARG0(t,m)
mod(m,c)

(d / direct-01
      :ARG0 (m / man
            :mod (c / conceit))
      :ARG1 (h / he)
      :ARG2 (c2 / clap-01 :mode imperative
            :ARG0 h
            :ARG1 (h2 / hand
                  :part-of h)
            :manner (c3 / clap-01
                  :ARG0 h
                  :ARG1 (h3 / hand :quant 1
                        :part-of h)
                  :ARG2 (h4 / hand
                        :part-of h
                        :ARG1-of (d2 / differ-02
                              :ARG2 h3))))
      :time (n / now))

instance(d,direct-01)
instance(m,man)
instance(c,conceit)
instance(h,he)
instance(c2,clap-01)
instance(h2,hand)
instance(c3,clap-01)
instance(h3,hand)
instance(h4,hand)
instance(d2,differ-02)
instance(n,now)
ARG0(d,m)
mod(m,c)
ARG1(d,h)
ARG2(d,c2)
mode(c2,imperative)
ARG0(c2,h)
ARG1(c2,h2)
part-of(h2,h)
manner(c2,c3)
ARG0(c3,h)
ARG1(c3,h3)
quant(h3,1)
part-of(h3,h)
ARG2(c3,h4)
part-of(h4,h)
ARG1-of(h4,d2)
ARG2(d2,h3)
time(d,n)

(c / clap-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (h / hand
          :part-of p))

instance(c,clap-01)
instance(p,prince)
instance(l,little)
instance(h,hand)
ARG0(c,p)
mod(p,l)
ARG1(c,h)
part-of(h,p)

(r / raise-01
      :ARG0 (m / man
            :mod (c / conceit))
      :ARG1 (h / hat
            :poss m)
      :subevent-of (s / salute-01
            :ARG0 m
            :manner (m2 / modest)
            :instrument h))

instance(r,raise-01)
instance(m,man)
instance(c,conceit)
instance(h,hat)
instance(s,salute-01)
instance(m2,modest)
ARG0(r,m)
mod(m,c)
ARG1(r,h)
poss(h,m)
subevent-of(r,s)
ARG0(s,m)
manner(s,m2)
instrument(s,h)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (h / have-degree-91
            :ARG1 (t / this)
            :ARG2 (e / entertain-01
                  :ARG0 t)
            :ARG3 (m / more)
            :ARG4 (v / visit-01
                  :ARG1 (k / king)))
      :ARG2 p)

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(h,have-degree-91)
instance(t,this)
instance(e,entertain-01)
instance(m,more)
instance(v,visit-01)
instance(k,king)
ARG0(s,p)
mod(p,l)
ARG1(s,h)
ARG1(h,t)
ARG2(h,e)
ARG0(e,t)
ARG3(h,m)
ARG4(h,v)
ARG1(v,k)
ARG2(s,p)

(b / begin-01
      :ARG0 (h / he)
      :ARG1 (c / clap-01
            :ARG0 h
            :ARG1 (h2 / hand
                  :part-of h)
            :manner (c2 / clap-01
                  :ARG0 h
                  :ARG1 (h3 / hand :quant 1
                        :part-of h)
                  :ARG2 (h4 / hand
                        :part-of h
                        :ARG1-of (d / differ-02
                              :ARG2 h3))))
      :mod (a / again))

instance(b,begin-01)
instance(h,he)
instance(c,clap-01)
instance(h2,hand)
instance(c2,clap-01)
instance(h3,hand)
instance(h4,hand)
instance(d,differ-02)
instance(a,again)
ARG0(b,h)
ARG1(b,c)
ARG0(c,h)
ARG1(c,h2)
part-of(h2,h)
manner(c,c2)
ARG0(c2,h)
ARG1(c2,h3)
quant(h3,1)
part-of(h3,h)
ARG2(c2,h4)
part-of(h4,h)
ARG1-of(h4,d)
ARG2(d,h3)
mod(b,a)

(r / raise-01
      :ARG0 (m / man
            :mod (c / conceit))
      :ARG1 (h2 / hat)
      :mod (a / again)
      :subevent-of (s / salute-01
            :ARG0 m
            :instrument h2))

instance(r,raise-01)
instance(m,man)
instance(c,conceit)
instance(h2,hat)
instance(a,again)
instance(s,salute-01)
ARG0(r,m)
mod(m,c)
ARG1(r,h2)
mod(r,a)
subevent-of(r,s)
ARG0(s,m)
instrument(s,h2)

(t / tire-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / monotony
            :poss (g2 / game))
      :time (a / after
            :op1 (e / exercise
                  :duration (t2 / temporal-quantity :quant 5
                        :unit (m2 / minute)))))

instance(t,tire-01)
instance(p,prince)
instance(l,little)
instance(m,monotony)
instance(g2,game)
instance(a,after)
instance(e,exercise)
instance(t2,temporal-quantity)
instance(m2,minute)
ARG0(t,p)
mod(p,l)
ARG1(t,m)
poss(m,g2)
time(t,a)
op1(a,e)
duration(e,t2)
quant(t2,5)
unit(t2,m2)

(a / ask-01
      :ARG0 (h / he)
      :ARG1 (d / do-02
            :ARG0 (o / one)
            :ARG1 (a2 / amr-unknown)
            :ARG2 (m / make-02
                  :ARG0 o
                  :ARG1 (c / come-01
                        :ARG1 (h3 / hat)
                        :direction (d3 / down)))))

instance(a,ask-01)
instance(h,he)
instance(d,do-02)
instance(o,one)
instance(a2,amr-unknown)
instance(m,make-02)
instance(c,come-01)
instance(h3,hat)
instance(d3,down)
ARG0(a,h)
ARG1(a,d)
ARG0(d,o)
ARG1(d,a2)
ARG2(d,m)
ARG0(m,o)
ARG1(m,c)
ARG1(c,h3)
direction(c,d3)

(h / hear-01
  :ARG0 (m / man
          :mod (c / conceit))
  :ARG2 (h2 / he)
  :polarity -)

instance(h,hear-01)
instance(m,man)
instance(c,conceit)
instance(h2,he)
ARG0(h,m)
mod(m,c)
ARG2(h,h2)
polarity(h,-)

(h / hear-01 :polarity -
      :ARG0 (p / person
            :mod (c / conceit))
      :ARG1 (a / anything
            :concession (p2 / praise-01))
      :time (e / ever))

instance(h,hear-01)
instance(p,person)
instance(c,conceit)
instance(a,anything)
instance(p2,praise-01)
instance(e,ever)
polarity(h,-)
ARG0(h,p)
mod(p,c)
ARG1(h,a)
concession(a,p2)
time(h,e)

(d / demand-01
      :ARG0 (h / he)
      :ARG1 (t / truth-value
            :polarity-of (a / admire-01
                  :ARG0 p
                  :ARG1 h
                  :degree (m / much
                        :degree (v / very))
                  :ARG1-of (r / real-04)))
      :ARG2 (p / prince
            :mod (l / little)))

instance(d,demand-01)
instance(h,he)
instance(t,truth-value)
instance(a,admire-01)
instance(m,much)
instance(v,very)
instance(r,real-04)
instance(p,prince)
instance(l,little)
ARG0(d,h)
ARG1(d,t)
polarity-of(t,a)
ARG0(a,p)
ARG1(a,h)
degree(a,m)
degree(m,v)
ARG1-of(a,r)
ARG2(d,p)
mod(p,l)

(m / mean-01
      :ARG1 (a / admire-01)
      :ARG2 (a2 / amr-unknown))

instance(m,mean-01)
instance(a,admire-01)
instance(a2,amr-unknown)
ARG1(m,a)
ARG2(m,a2)

(m / mean-01
      :ARG1 (a / admire-01)
      :ARG2 (r / regard-01
            :ARG0 (y / you)
            :ARG1 (i / i)
            :ARG2 (m6 / man
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (h / handsome)
                        :ARG3 (m2 / most)
                        :ARG5 (p2 / planet
                              :mod (t / this)))
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (w2 / well-09
                              :ARG1 (d / dress-01
                                    :ARG1 m6))
                        :ARG3 (m3 / most)
                        :ARG5 p2)
                  :ARG1-of (h4 / have-degree-91
                        :ARG2 (r2 / rich)
                        :ARG3 (m4 / most)
                        :ARG5 p2)
                  :ARG1-of (h5 / have-degree-91
                        :ARG2 (i2 / intelligent-01
                              :ARG1 m6)
                        :ARG3 (m5 / most)
                        :ARG5 p2))))

instance(m,mean-01)
instance(a,admire-01)
instance(r,regard-01)
instance(y,you)
instance(i,i)
instance(m6,man)
instance(h2,have-degree-91)
instance(h,handsome)
instance(m2,most)
instance(p2,planet)
instance(t,this)
instance(h3,have-degree-91)
instance(w2,well-09)
instance(d,dress-01)
instance(m3,most)
instance(h4,have-degree-91)
instance(r2,rich)
instance(m4,most)
instance(h5,have-degree-91)
instance(i2,intelligent-01)
instance(m5,most)
ARG1(m,a)
ARG2(m,r)
ARG0(r,y)
ARG1(r,i)
ARG2(r,m6)
ARG1-of(m6,h2)
ARG2(h2,h)
ARG3(h2,m2)
ARG5(h2,p2)
mod(p2,t)
ARG1-of(m6,h3)
ARG2(h3,w2)
ARG1(w2,d)
ARG1(d,m6)
ARG3(h3,m3)
ARG5(h3,p2)
ARG1-of(m6,h4)
ARG2(h4,r2)
ARG3(h4,m4)
ARG5(h4,p2)
ARG1-of(m6,h5)
ARG2(h5,i2)
ARG1(i2,m6)
ARG3(h5,m5)
ARG5(h5,p2)

(c / contrast-01
      :ARG2 (m / man
            :quant (o / only
                  :location (p / planet
                        :poss y))
            :domain (y / you)))

instance(c,contrast-01)
instance(m,man)
instance(o,only)
instance(p,planet)
instance(y,you)
ARG2(c,m)
quant(m,o)
location(o,p)
poss(p,y)
domain(m,y)

(k2 / kind-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / this)
      :ARG2 (i / i))

instance(k2,kind-01)
instance(y,you)
instance(t,this)
instance(i,i)
mode(k2,imperative)
ARG0(k2,y)
ARG1(k2,t)
ARG2(k2,i)

(a / admire-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :manner (s / same-01
            :degree (j / just)))

instance(a,admire-01)
instance(y,you)
instance(i,i)
instance(s,same-01)
instance(j,just)
mode(a,imperative)
ARG0(a,y)
ARG1(a,i)
manner(a,s)
degree(s,j)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (s2 / shrug-01
                  :ARG1 (s3 / shoulder
                        :part-of p)
                  :degree (s4 / slight)))
      :ARG1 (c2 / contrast-01
            :ARG1 (a / admire-01
                  :ARG0 (i / i)
                  :ARG1 (y / you))
            :ARG2 (i2 / interest-01
                  :ARG0 a
                  :ARG1 y
                  :degree (m / much
                        :degree (s6 / so))
                  :ARG1-of (c / cause-01
                        :ARG0 (a2 / amr-unknown)))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(s2,shrug-01)
instance(s3,shoulder)
instance(s4,slight)
instance(c2,contrast-01)
instance(a,admire-01)
instance(i,i)
instance(y,you)
instance(i2,interest-01)
instance(m,much)
instance(s6,so)
instance(c,cause-01)
instance(a2,amr-unknown)
ARG0(s,p)
mod(p,l)
ARG0-of(p,s2)
ARG1(s2,s3)
part-of(s3,p)
degree(s2,s4)
ARG1(s,c2)
ARG1(c2,a)
ARG0(a,i)
ARG1(a,y)
ARG2(c2,i2)
ARG0(i2,a)
ARG1(i2,y)
degree(i2,m)
degree(m,s6)
ARG1-of(i2,c)
ARG0(c,a2)

(a / and
      :op2 (g / go-02
            :ARG0 (p / prince
                  :mod (l / little))
            :direction (a2 / away)))

instance(a,and)
instance(g,go-02)
instance(p,prince)
instance(l,little)
instance(a2,away)
op2(a,g)
ARG0(g,p)
mod(p,l)
direction(g,a2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (o / odd
            :degree (v / very)
            :mod (c2 / certain)
            :domain (g / grown-up))
      :ARG2 h
      :time (c / continue-01
            :ARG0 h
            :ARG1 (j / journey-01
                  :ARG0 h)))

instance(s,say-01)
instance(h,he)
instance(o,odd)
instance(v,very)
instance(c2,certain)
instance(g,grown-up)
instance(c,continue-01)
instance(j,journey-01)
ARG0(s,h)
ARG1(s,o)
degree(o,v)
mod(o,c2)
domain(o,g)
ARG2(s,h)
time(s,c)
ARG0(c,h)
ARG1(c,j)
ARG0(j,h)

(c / chapter
  :mod 12)

instance(c,chapter)
mod(c,12)

(i / inhabit-01
      :ARG0 (p / person
            :ARG0-of (t / tipple-01))
      :ARG1 (p2 / planet
            :mod (n / next)))

instance(i,inhabit-01)
instance(p,person)
instance(t,tipple-01)
instance(p2,planet)
instance(n,next)
ARG0(i,p)
ARG0-of(p,t)
ARG1(i,p2)
mod(p2,n)

(h / have-concession-91
      :ARG1 (d / deject-01
            :ARG0 v
            :ARG1 (p2 / prince
                  :mod (l / little))
            :ARG1-of (d2 / deep-02))
      :ARG2 (v / visit-01
            :ARG1-of (s / short-07
                  :degree (v2 / very))
            :domain (t / this)))

instance(h,have-concession-91)
instance(d,deject-01)
instance(p2,prince)
instance(l,little)
instance(d2,deep-02)
instance(v,visit-01)
instance(s,short-07)
instance(v2,very)
instance(t,this)
ARG1(h,d)
ARG0(d,v)
ARG1(d,p2)
mod(p2,l)
ARG1-of(d,d2)
ARG2(h,v)
ARG1-of(v,s)
degree(s,v2)
domain(v,t)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (d / do-02
            :ARG0 p
            :ARG1 (a / amr-unknown)
            :location (t / there))
      :ARG2 (p / person
            :ARG0-of (t2 / tipple-01)
            :ARG1-of (f / find-01
                  :ARG0 h)
            :ARG1-of (s2 / settle-down-04
                  :manner (s3 / silent)
                  :location (b / before
                        :op1 (a2 / and
                              :op1 (b2 / bottle
                                    :ARG1-of (e / empty-02)
                                    :ARG1-of (c / collect-01))
                              :op2 (b3 / bottle
                                    :mod (f2 / full)
                                    :ARG1-of (c2 / collect-01)))))))

instance(s,say-01)
instance(h,he)
instance(d,do-02)
instance(a,amr-unknown)
instance(t,there)
instance(p,person)
instance(t2,tipple-01)
instance(f,find-01)
instance(s2,settle-down-04)
instance(s3,silent)
instance(b,before)
instance(a2,and)
instance(b2,bottle)
instance(e,empty-02)
instance(c,collect-01)
instance(b3,bottle)
instance(f2,full)
instance(c2,collect-01)
ARG0(s,h)
ARG1(s,d)
ARG0(d,p)
ARG1(d,a)
location(d,t)
ARG2(s,p)
ARG0-of(p,t2)
ARG1-of(p,f)
ARG0(f,h)
ARG1-of(p,s2)
manner(s2,s3)
location(s2,b)
op1(b,a2)
op1(a2,b2)
ARG1-of(b2,e)
ARG1-of(b2,c)
op2(a2,b3)
mod(b3,f2)
ARG1-of(b3,c2)

(r / reply-01
      :ARG0 (p / person
            :ARG0-of (t / tipple-01))
      :ARG2 (d / drink-01
            :ARG0 p)
      :manner (l / lugubrious))

instance(r,reply-01)
instance(p,person)
instance(t,tipple-01)
instance(d,drink-01)
instance(l,lugubrious)
ARG0(r,p)
ARG0-of(p,t)
ARG2(r,d)
ARG0(d,p)
manner(r,l)

(d / demand-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (c / cause-01
          :ARG0 (a / amr-unknown)
          :ARG1 (d2 / drink-01
                  :ARG0 (y / you))))

instance(d,demand-01)
instance(p,prince)
instance(l,little)
instance(c,cause-01)
instance(a,amr-unknown)
instance(d2,drink-01)
instance(y,you)
ARG0(d,p)
mod(p,l)
ARG1(d,c)
ARG0(c,a)
ARG1(c,d2)
ARG0(d2,y)

(r / reply-01
  :ARG0 (p / person
          :ARG0-of (t / tipple-01))
  :ARG2 (c / cause-01
          :ARG0 (p2 / possible-01
                  :ARG1 (f / forget-01
                            :ARG0 p))))

instance(r,reply-01)
instance(p,person)
instance(t,tipple-01)
instance(c,cause-01)
instance(p2,possible-01)
instance(f,forget-01)
ARG0(r,p)
ARG0-of(p,t)
ARG2(r,c)
ARG0(c,p2)
ARG1(p2,f)
ARG0(f,p)

(i / inquire-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG1-of (s / sorry-01
                  :ARG2 (h / he)
                  :time (a2 / already)))
      :ARG1 (f / forget-01
            :ARG0 h
            :ARG1 (a / amr-unknown))
      :ARG2 h)

instance(i,inquire-01)
instance(p,prince)
instance(l,little)
instance(s,sorry-01)
instance(h,he)
instance(a2,already)
instance(f,forget-01)
instance(a,amr-unknown)
ARG0(i,p)
mod(p,l)
ARG1-of(p,s)
ARG2(s,h)
time(s,a2)
ARG1(i,f)
ARG0(f,h)
ARG1(f,a)
ARG2(i,h)

(c / confess-01
  :ARG0 (p / person
          :ARG0-of (t / tipple-01)
          :ARG0-of (h / hang-01
                     :ARG1 (h2 / head
                             :part-of p)))
  :ARG1 (f / forget-01
          :ARG0 p
          :ARG1 (s / shame-01
                  :ARG1 p)))

instance(c,confess-01)
instance(p,person)
instance(t,tipple-01)
instance(h,hang-01)
instance(h2,head)
instance(f,forget-01)
instance(s,shame-01)
ARG0(c,p)
ARG0-of(p,t)
ARG0-of(p,h)
ARG1(h,h2)
part-of(h2,p)
ARG1(c,f)
ARG0(f,p)
ARG1(f,s)
ARG1(s,p)

(i / insist-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (w / want-01
                  :ARG1 (h / help-01
                        :ARG0 p
                        :ARG1 (h2 / he))))
      :ARG1 (a / amr-unknown
            :ARG0-of (s / shame-01)))

instance(i,insist-01)
instance(p,prince)
instance(l,little)
instance(w,want-01)
instance(h,help-01)
instance(h2,he)
instance(a,amr-unknown)
instance(s,shame-01)
ARG0(i,p)
mod(p,l)
ARG0-of(p,w)
ARG1(w,h)
ARG0(h,p)
ARG1(h,h2)
ARG1(i,a)
ARG0-of(a,s)

(s / shame-01
  :ARG0 (d / drink-01))

instance(s,shame-01)
instance(d,drink-01)
ARG0(s,d)

(a / and
      :op1 (e / end-01
            :ARG0 (p / person
                  :ARG0-of (t / tipple-01))
            :ARG1 (s / speak-01
                  :ARG0 p))
      :op2 (s2 / shut-up-06
            :ARG0 p
            :ARG1 p
            :manner (s3 / silent
                  :mod (p2 / pregnable :polarity -)
                  :domain p)))

instance(a,and)
instance(e,end-01)
instance(p,person)
instance(t,tipple-01)
instance(s,speak-01)
instance(s2,shut-up-06)
instance(s3,silent)
instance(p2,pregnable)
op1(a,e)
ARG0(e,p)
ARG0-of(p,t)
ARG1(e,s)
ARG0(s,p)
op2(a,s2)
ARG0(s2,p)
ARG1(s2,p)
manner(s2,s3)
mod(s3,p2)
polarity(p2,-)
domain(s3,p)

(a / and
      :op2 (g / go-02
            :ARG0 (p / prince
                  :mod (l / little)
                  :ARG1-of (p2 / puzzle-01))
            :direction (a2 / away)))

instance(a,and)
instance(g,go-02)
instance(p,prince)
instance(l,little)
instance(p2,puzzle-01)
instance(a2,away)
op2(a,g)
ARG0(g,p)
mod(p,l)
ARG1-of(p,p2)
direction(g,a2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (o / odd
            :degree (v / very
                  :degree (v2 / very))
            :domain (g / grown-up)
            :mod (c / certain))
      :ARG2 h
      :time (c2 / continue-01
            :ARG0 h
            :ARG1 (j / journey-01
                  :ARG0 h)))

instance(s,say-01)
instance(h,he)
instance(o,odd)
instance(v,very)
instance(v2,very)
instance(g,grown-up)
instance(c,certain)
instance(c2,continue-01)
instance(j,journey-01)
ARG0(s,h)
ARG1(s,o)
degree(o,v)
degree(v,v2)
domain(o,g)
mod(o,c)
ARG2(s,h)
time(s,c2)
ARG0(c2,h)
ARG1(c2,j)
ARG0(j,h)

(c / chapter
  :mod 13)

instance(c,chapter)
mod(c,13)

(b / belong-01
      :ARG0 (p / planet
            :ord (o / ordinal-entity :value 4))
      :ARG1 (b3 / businessman))

instance(b,belong-01)
instance(p,planet)
instance(o,ordinal-entity)
instance(b3,businessman)
ARG0(b,p)
ord(p,o)
value(o,4)
ARG1(b,b3)

(h2 / have-degree-91
      :ARG1 (m / man
            :mod (t / this))
      :ARG2 (o / occupy-01
            :ARG1 m)
      :ARG3 (s / so)
      :ARG6 (r / raise-01 :polarity -
            :ARG0 m
            :ARG1 (h / head
                  :part-of m)
            :time (a / arrive-01
                  :ARG1 (p / prince
                        :mod (l / little)))))

instance(h2,have-degree-91)
instance(m,man)
instance(t,this)
instance(o,occupy-01)
instance(s,so)
instance(r,raise-01)
instance(h,head)
instance(a,arrive-01)
instance(p,prince)
instance(l,little)
ARG1(h2,m)
mod(m,t)
ARG2(h2,o)
ARG1(o,m)
ARG3(h2,s)
ARG6(h2,r)
polarity(r,-)
ARG0(r,m)
ARG1(r,h)
part-of(h,m)
time(r,a)
ARG1(a,p)
mod(p,l)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / morning
            :ARG1-of (g / good-02))
      :ARG2 (h / he))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m,morning)
instance(g,good-02)
instance(h,he)
ARG0(s,p)
mod(p,l)
ARG1(s,m)
ARG1-of(m,g)
ARG2(s,h)

(g / go-out-18
  :ARG1 (c / cigarette
          :poss (y / you)))

instance(g,go-out-18)
instance(c,cigarette)
instance(y,you)
ARG1(g,c)
poss(c,y)

(e / equal-01
      :ARG1 (s / sum-of :op1 3 :op2 2)
      :ARG2 5)

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,s)
op1(s,3)
op2(s,2)
ARG2(e,5)

(e / equal-01
      :ARG1 (s / sum-of :op1 5 :op2 7)
      :ARG2 12)

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,s)
op1(s,5)
op2(s,7)
ARG2(e,12)

(e / equal-01
      :ARG1 (s / sum-of :op1 12 :op2 3)
      :ARG2 15)

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,s)
op1(s,12)
op2(s,3)
ARG2(e,15)

(m / morning
      :ARG1-of (g / good-02))

instance(m,morning)
instance(g,good-02)
ARG1-of(m,g)

(e / equal-01
  :ARG1 (s / sum-of
          :op1 15
          :op2 7)
  :ARG2 22)

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,s)
op1(s,15)
op2(s,7)
ARG2(e,22)

(e / equal-01
  :ARG1 (s / sum-of
          :op1 22
          :op2 6)
  :ARG2 28)

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,s)
op1(s,22)
op2(s,6)
ARG2(e,28)

(h / have-03
  :ARG0 (i / i)
  :ARG1 (t / time
          :purpose (l / light-04
                     :ARG0 i
                     :ARG1 (i2 / it)
                     :mod (a / again)))
  :polarity -)

instance(h,have-03)
instance(i,i)
instance(t,time)
instance(l,light-04)
instance(i2,it)
instance(a,again)
ARG0(h,i)
ARG1(h,t)
purpose(t,l)
ARG0(l,i)
ARG1(l,i2)
mod(l,a)
polarity(h,-)

(e / equal-01
  :ARG1 (s / sum-of
          :op1 26
          :op2 5)
  :ARG2 31)

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,s)
op1(s,26)
op2(s,5)
ARG2(e,31)

(p / phew :mode expressive)

instance(p,phew)
mode(p,expressive)

(e / equal-01
      :ARG1 501622731
      :ARG2 (t / that))

instance(e,equal-01)
instance(t,that)
ARG1(e,501622731)
ARG2(e,t)

(a / ask-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (a2 / amr-unknown
          :quant 500000000))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,a2)
quant(a2,500000000)

(e / eh :mode expressive :polarity (a / amr-unknown))

instance(e,eh)
instance(a,amr-unknown)
mode(e,expressive)
polarity(e,a)

(b / be-located-at-91
      :ARG1 (y / you)
      :ARG2 (t / there)
      :mod (s / still)
      :polarity (a / amr-unknown))

instance(b,be-located-at-91)
instance(y,you)
instance(t,there)
instance(s,still)
instance(a,amr-unknown)
ARG1(b,y)
ARG2(b,t)
mod(b,s)
polarity(b,a)

(a / and
  :op1 501000000
  :op2 (p / possible-01
         :ARG1 (s / stop-01
                   :ARG0 (i / i))
         :polarity -))

instance(a,and)
instance(p,possible-01)
instance(s,stop-01)
instance(i,i)
op1(a,501000000)
op2(a,p)
ARG1(p,s)
ARG0(s,i)
polarity(p,-)

(o / obligate-01
  :ARG1 (i / i)
  :ARG2 (d / do-02
          :ARG1 (m / much
                  :degree (s / so))))

instance(o,obligate-01)
instance(i,i)
instance(d,do-02)
instance(m,much)
instance(s,so)
ARG1(o,i)
ARG2(o,d)
ARG1(d,m)
degree(m,s)

(c / concern-01
      :ARG0 (m / matter
            :ARG1-of (c2 / consequential-01))
      :ARG1 (i / i))

instance(c,concern-01)
instance(m,matter)
instance(c2,consequential-01)
instance(i,i)
ARG0(c,m)
ARG1-of(m,c2)
ARG1(c,i)

(a / amuse-01
  :ARG0 (i / i)
  :ARG1 i
  :ARG2 (b / balderdash)
  :polarity -)

instance(a,amuse-01)
instance(i,i)
instance(b,balderdash)
ARG0(a,i)
ARG1(a,i)
ARG2(a,b)
polarity(a,-)

(e / equal-01
  :ARG1 7
  :ARG2 (s / sum-of
          :op1 2
          :op2 5))

instance(e,equal-01)
instance(s,sum-of)
ARG1(e,7)
ARG2(e,s)
op1(s,2)
op2(s,5)

(r / repeat-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (l2 / let-01 :polarity -
                  :ARG1 (g / go-02
                        :ARG0 (t / thing
                              :ARG1-of (q / question-01
                                    :ARG0 p)))
                  :time (l3 / live-01
                        :ARG0 p)
                  :time (a2 / ask-01
                        :ARG0 p
                        :ARG1 t)
                  :time (e / ever)))
      :ARG1 (a / amr-unknown :quant 501000000))

instance(r,repeat-01)
instance(p,prince)
instance(l,little)
instance(l2,let-01)
instance(g,go-02)
instance(t,thing)
instance(q,question-01)
instance(l3,live-01)
instance(a2,ask-01)
instance(e,ever)
instance(a,amr-unknown)
ARG0(r,p)
mod(p,l)
ARG0-of(p,l2)
polarity(l2,-)
ARG1(l2,g)
ARG0(g,t)
ARG1-of(t,q)
ARG0(q,p)
time(l2,l3)
ARG0(l3,p)
time(l2,a2)
ARG0(a2,p)
ARG1(a2,t)
time(l2,e)
ARG1(r,a)
quant(a,501000000)

(r / raise-01
      :ARG0 (b / businessman)
      :ARG1 (h / head
            :part-of b))

instance(r,raise-01)
instance(b,businessman)
instance(h,head)
ARG0(r,b)
ARG1(r,h)
part-of(h,b)

(d / disturb-01
      :ARG1 (i / i)
      :ARG1-of (h / have-frequency-91
            :ARG2 3
            :mod (o / only))
      :time (i2 / inhabit-01
            :ARG0 i
            :ARG1 (p / planet
                  :mod (t / this))
            :duration (t2 / temporal-quantity :quant 54
                  :unit (y / year))))

instance(d,disturb-01)
instance(i,i)
instance(h,have-frequency-91)
instance(o,only)
instance(i2,inhabit-01)
instance(p,planet)
instance(t,this)
instance(t2,temporal-quantity)
instance(y,year)
ARG1(d,i)
ARG1-of(d,h)
ARG2(h,3)
mod(h,o)
time(d,i2)
ARG0(i2,i)
ARG1(i2,p)
mod(p,t)
duration(i2,t2)
quant(t2,54)
unit(t2,y)

(b / be-temporally-at-91
      :ARG1 (d / disturb-01
            :ord (o / ordinal-entity :value 1))
      :ARG2 (b2 / before
            :op1 (n / now)
            :quant (t4 / temporal-quantity :quant 22
                  :unit (y2 / year))
            :time-of (f3 / fall-01
                  :ARG1 (g4 / goose
                        :mod (g5 / giddy)
                        :mod (s2 / some))
                  :ARG3 (l / location
                        :ARG1-of (k2 / know-01
                              :ARG0 (g6 / goodness))))))

instance(b,be-temporally-at-91)
instance(d,disturb-01)
instance(o,ordinal-entity)
instance(b2,before)
instance(n,now)
instance(t4,temporal-quantity)
instance(y2,year)
instance(f3,fall-01)
instance(g4,goose)
instance(g5,giddy)
instance(s2,some)
instance(l,location)
instance(k2,know-01)
instance(g6,goodness)
ARG1(b,d)
ord(d,o)
value(o,1)
ARG2(b,b2)
op1(b2,n)
quant(b2,t4)
quant(t4,22)
unit(t4,y2)
time-of(b2,f3)
ARG1(f3,g4)
mod(g4,g5)
mod(g4,s2)
ARG3(f3,l)
ARG1-of(l,k2)
ARG0(k2,g6)

(a / and
      :op1 (m / make-01
            :ARG0 (h / he)
            :ARG1 (n / noise
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (f2 / frighten-01
                              :ARG0 n)
                        :ARG3 (m2 / most))
                  :ARG1-of (r / resound-01
                        :ARG2 (a4 / all-over
                              :op1 (p / place)))))
      :op2 (m4 / mistake-02 :quant 4
            :ARG0 i
            :ARG1 (a3 / add-02
                  :ARG0 (i / i))))

instance(a,and)
instance(m,make-01)
instance(h,he)
instance(n,noise)
instance(h2,have-degree-91)
instance(f2,frighten-01)
instance(m2,most)
instance(r,resound-01)
instance(a4,all-over)
instance(p,place)
instance(m4,mistake-02)
instance(a3,add-02)
instance(i,i)
op1(a,m)
ARG0(m,h)
ARG1(m,n)
ARG1-of(n,h2)
ARG2(h2,f2)
ARG0(f2,n)
ARG3(h2,m2)
ARG1-of(n,r)
ARG2(r,a4)
op1(a4,p)
op2(a,m4)
quant(m4,4)
ARG0(m4,i)
ARG1(m4,a3)
ARG0(a3,i)

(d / disturb-01
      :ARG0 (a / attack-01
            :ARG0 (r / rheumatism)
            :ARG1 i)
      :ARG1 (i / i)
      :time (b / before
            :op1 (n / now)
            :quant (t2 / temporal-quantity :quant 11
                  :unit (y / year)))
      :domain (d2 / disturb-01
            :ord (o / ordinal-entity :value 2)))

instance(d,disturb-01)
instance(a,attack-01)
instance(r,rheumatism)
instance(i,i)
instance(b,before)
instance(n,now)
instance(t2,temporal-quantity)
instance(y,year)
instance(d2,disturb-01)
instance(o,ordinal-entity)
ARG0(d,a)
ARG0(a,r)
ARG1(a,i)
ARG1(d,i)
time(d,b)
op1(b,n)
quant(b,t2)
quant(t2,11)
unit(t2,y)
domain(d,d2)
ord(d2,o)
value(o,2)

(h / have-quant-91 :polarity -
      :ARG1 (e / exercise-02
            :ARG0 (i / i))
      :ARG3 (e2 / enough))

instance(h,have-quant-91)
instance(e,exercise-02)
instance(i,i)
instance(e2,enough)
polarity(h,-)
ARG1(h,e)
ARG0(e,i)
ARG3(h,e2)

(h / have-03
  :ARG0 (i / i)
  :ARG1 (t / time
          :purpose (l / loaf-01
                     :ARG0 i))
  :polarity -)

instance(h,have-03)
instance(i,i)
instance(t,time)
instance(l,loaf-01)
ARG0(h,i)
ARG1(h,t)
purpose(t,l)
ARG0(l,i)
polarity(h,-)

(d / disturb-01
      :ord (o / ordinal-entity :value 3)
      :domain (t / this))

instance(d,disturb-01)
instance(o,ordinal-entity)
instance(t,this)
ord(d,o)
value(o,3)
domain(d,t)

(s / say-01
  :ARG0 (i / i)
  :ARG1 501000000)

instance(s,say-01)
instance(i,i)
ARG0(s,i)
ARG1(s,501000000)

(a / amr-unknown
  :quant (m / multiple
           :op1 1000000))

instance(a,amr-unknown)
instance(m,multiple)
quant(a,m)
op1(m,1000000)

(r / realize-01
      :ARG0 (b / businessman)
      :ARG1 (h / hopeful-03 :polarity -
            :ARG1 (l / leave-14
                  :ARG1 (p / peace
                        :domain b))
            :time (u / until
                  :op1 (a / answer-01
                        :ARG0 b
                        :ARG1 (q / question-01
                              :ARG1 (t / this)))))
      :manner (s / sudden))

instance(r,realize-01)
instance(b,businessman)
instance(h,hopeful-03)
instance(l,leave-14)
instance(p,peace)
instance(u,until)
instance(a,answer-01)
instance(q,question-01)
instance(t,this)
instance(s,sudden)
ARG0(r,b)
ARG1(r,h)
polarity(h,-)
ARG1(h,l)
ARG1(l,p)
domain(p,b)
time(h,u)
op1(u,a)
ARG0(a,b)
ARG1(a,q)
ARG1(q,t)
manner(r,s)

(s / say-01
  :ARG0 (h / he)
  :ARG1 (o / object
          :ARG1-of (i / include-91
                     :ARG2 (o3 / object
                             :mod (l / little)
                             :mod (t2 / that)
                             :location (s4 / sky)
                             :ARG1-of (s2 / see-01
                                        :ARG0 (o2 / one)
                                        :frequency (s3 / sometimes))))
          :quant (m / multiple
                   :op1 1000000)))

instance(s,say-01)
instance(h,he)
instance(o,object)
instance(i,include-91)
instance(o3,object)
instance(l,little)
instance(t2,that)
instance(s4,sky)
instance(s2,see-01)
instance(o2,one)
instance(s3,sometimes)
instance(m,multiple)
ARG0(s,h)
ARG1(s,o)
ARG1-of(o,i)
ARG2(i,o3)
mod(o3,l)
mod(o3,t2)
location(o3,s4)
ARG1-of(o3,s2)
ARG0(s2,o2)
frequency(s2,s3)
quant(o,m)
op1(m,1000000)

(f / fly :polarity (a / amr-unknown))

instance(f,fly)
instance(a,amr-unknown)
polarity(f,a)

(n / no
  :mod (o / oh
         :mode expressive))

instance(n,no)
instance(o,oh)
mod(n,o)
mode(o,expressive)

(o / object
  :mod (l / little)
  :ARG0-of (g / glitter-01))

instance(o,object)
instance(l,little)
instance(g,glitter-01)
mod(o,l)
ARG0-of(o,g)

(b / bee
      :polarity (a / amr-unknown))

instance(b,bee)
instance(a,amr-unknown)
polarity(b,a)

(n / no
  :mod (o / oh
         :mode expressive))

instance(n,no)
instance(o,oh)
mod(n,o)
mode(o,expressive)

(c / cause-01
  :ARG0 (o / object
          :consist-of (g / gold)
          :mod (l / little))
  :ARG1 (d / dream-01
          :ARG0 (m / man
                  :mod (l2 / lazy))
          :manner (i / idle-01)))

instance(c,cause-01)
instance(o,object)
instance(g,gold)
instance(l,little)
instance(d,dream-01)
instance(m,man)
instance(l2,lazy)
instance(i,idle-01)
ARG0(c,o)
consist-of(o,g)
mod(o,l)
ARG1(c,d)
ARG0(d,m)
mod(m,l2)
manner(d,i)

(c / concern-01
      :ARG0 (m / matter
            :ARG1-of (c2 / consequential-01))
      :ARG1 (i / i))

instance(c,concern-01)
instance(m,matter)
instance(c2,consequential-01)
instance(i,i)
ARG0(c,m)
ARG1-of(m,c2)
ARG1(c,i)

(t2 / time :polarity -
      :purpose (d2 / dream-01
            :manner (i2 / idle))
      :time (l / live-01
            :ARG0 (i / i)))

instance(t2,time)
instance(d2,dream-01)
instance(i2,idle)
instance(l,live-01)
instance(i,i)
polarity(t2,-)
purpose(t2,d2)
manner(d2,i2)
time(t2,l)
ARG0(l,i)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(m / mean-01 :polarity (a / amr-unknown)
      :ARG0 (y / you)
      :ARG2 (s / star))

instance(m,mean-01)
instance(a,amr-unknown)
instance(y,you)
instance(s,star)
polarity(m,a)
ARG0(m,y)
ARG2(m,s)

(b / be-it-07
      :ARG1 (t2 / that))

instance(b,be-it-07)
instance(t2,that)
ARG1(b,t2)

(s / star)

instance(s,star)

(a / and
  :op2 (d / do-02
         :ARG0 (y / you)
         :ARG1 (a2 / amr-unknown)
         :ARG3 (s / star
                 :quant 500000000)))

instance(a,and)
instance(d,do-02)
instance(y,you)
instance(a2,amr-unknown)
instance(s,star)
op2(a,d)
ARG0(d,y)
ARG1(d,a2)
ARG3(d,s)
quant(s,500000000)

(h / have-quant-91
      :ARG2 501622731
      :ARG3 (e / equal))

instance(h,have-quant-91)
instance(e,equal)
ARG2(h,501622731)
ARG3(h,e)

(a / and
      :op1 (c / concern-01
            :ARG0 (m / matter
                  :ARG1-of (c2 / consequential-01))
            :ARG1 (i / i))
      :op2 (a2 / accurate
            :domain i))

instance(a,and)
instance(c,concern-01)
instance(m,matter)
instance(c2,consequential-01)
instance(i,i)
instance(a2,accurate)
op1(a,c)
ARG0(c,m)
ARG1-of(m,c2)
ARG1(c,i)
op2(a,a2)
domain(a2,i)

(a / and
      :op2 (d / do-02
            :ARG0 (y / you)
            :ARG1 (a2 / amr-unknown)
            :ARG3 (s / star
                  :mod (t / this))))

instance(a,and)
instance(d,do-02)
instance(y,you)
instance(a2,amr-unknown)
instance(s,star)
instance(t,this)
op2(a,d)
ARG0(d,y)
ARG1(d,a2)
ARG3(d,s)
mod(s,t)

(d / do-02
  :ARG0 (i / i)
  :ARG1 (a / amr-unknown)
  :ARG3 (t / they))

instance(d,do-02)
instance(i,i)
instance(a,amr-unknown)
instance(t,they)
ARG0(d,i)
ARG1(d,a)
ARG3(d,t)

(y / yes)

instance(y,yes)

(n / nothing)

instance(n,nothing)

(o / own-01
  :ARG0 (i / i)
  :ARG1 (t / they))

instance(o,own-01)
instance(i,i)
instance(t,they)
ARG0(o,i)
ARG1(o,t)

(o / own-01
      :ARG0 (y / you)
      :ARG1 (s / star)
      :polarity (a / amr-unknown))

instance(o,own-01)
instance(y,you)
instance(s,star)
instance(a,amr-unknown)
ARG0(o,y)
ARG1(o,s)
polarity(o,a)

(y / yes)

instance(y,yes)

(c / contrast-01
      :ARG2 (s / see-01
            :ARG0 (i / i)
            :ARG1 (k / king)
            :time (a / already)))

instance(c,contrast-01)
instance(s,see-01)
instance(i,i)
instance(k,king)
instance(a,already)
ARG2(c,s)
ARG0(s,i)
ARG1(s,k)
time(s,a)

(c / contrast-01
      :ARG1 (o / own-01 :polarity -
            :ARG0 (k / king))
      :ARG2 (r / reign-01
            :ARG0 k))

instance(c,contrast-01)
instance(o,own-01)
instance(k,king)
instance(r,reign-01)
ARG1(c,o)
polarity(o,-)
ARG0(o,k)
ARG2(c,r)
ARG0(r,k)

(m / matter
      :ARG1-of (d / differ-02
            :degree (v / very))
      :domain (i / it))

instance(m,matter)
instance(d,differ-02)
instance(v,very)
instance(i,it)
ARG1-of(m,d)
degree(d,v)
domain(m,i)

(a / and
      :op2 (c / cause-01
            :ARG0 (o / own-01
                  :ARG1 (s / star))
            :ARG1 (g / good-04
                  :ARG1 (a2 / amr-unknown)
                  :ARG2 (y / you))))

instance(a,and)
instance(c,cause-01)
instance(o,own-01)
instance(s,star)
instance(g,good-04)
instance(a2,amr-unknown)
instance(y,you)
op2(a,c)
ARG0(c,o)
ARG1(o,s)
ARG1(c,g)
ARG1(g,a2)
ARG2(g,y)

(c / cause-01
      :ARG0 (i2 / it)
      :ARG1 (g / good-04
            :ARG1 (m2 / make-02
                  :ARG1 (r / rich
                        :domain i))
            :ARG2 (i / i)))

instance(c,cause-01)
instance(i2,it)
instance(g,good-04)
instance(m2,make-02)
instance(r,rich)
instance(i,i)
ARG0(c,i2)
ARG1(c,g)
ARG1(g,m2)
ARG1(m2,r)
domain(r,i)
ARG2(g,i)

(a / and
      :op2 (c / cause-01
            :ARG0 (r / rich
                  :domain (y / you))
            :ARG1 (g / good-04
                  :ARG1 (a2 / amr-unknown)
                  :ARG2 y)))

instance(a,and)
instance(c,cause-01)
instance(r,rich)
instance(y,you)
instance(g,good-04)
instance(a2,amr-unknown)
op2(a,c)
ARG0(c,r)
domain(r,y)
ARG1(c,g)
ARG1(g,a2)
ARG2(g,y)

(p / possible-01
      :ARG1 (b / buy-01
            :ARG0 (i / i)
            :ARG1 (s / star
                  :mod (m / more)))
      :condition (d / discover-01
            :ARG1 s
            :time (e / ever)))

instance(p,possible-01)
instance(b,buy-01)
instance(i,i)
instance(s,star)
instance(m,more)
instance(d,discover-01)
instance(e,ever)
ARG1(p,b)
ARG0(b,i)
ARG1(b,s)
mod(s,m)
condition(p,d)
ARG1(d,s)
time(d,e)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (r / reason-01
            :ARG0 (m / man
                  :mod (t2 / this))
            :ARG1-of (r2 / resemble-01
                  :ARG2 (r3 / reason-01
                        :ARG0 (p2 / person
                              :ARG0-of (t / tipple-01)
                              :mod (p3 / poor)
                              :poss p))
                  :degree (l2 / little)))
      :ARG2 p)

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(r,reason-01)
instance(m,man)
instance(t2,this)
instance(r2,resemble-01)
instance(r3,reason-01)
instance(p2,person)
instance(t,tipple-01)
instance(p3,poor)
instance(l2,little)
ARG0(s,p)
mod(p,l)
ARG1(s,r)
ARG0(r,m)
mod(m,t2)
ARG1-of(r,r2)
ARG2(r2,r3)
ARG0(r3,p2)
ARG0-of(p2,t)
mod(p2,p3)
poss(p2,p)
degree(r2,l2)
ARG2(s,p)

(h3 / have-concession-91
      :ARG1 (h / have-03
            :ARG0 (h2 / he)
            :ARG1 (t / thing
                  :mod (m / more)
                  :mod (s / some)
                  :ARG1-of (q / question-01))
            :mod (s2 / still)))

instance(h3,have-concession-91)
instance(h,have-03)
instance(h2,he)
instance(t,thing)
instance(m,more)
instance(s,some)
instance(q,question-01)
instance(s2,still)
ARG1(h3,h)
ARG0(h,h2)
ARG1(h,t)
mod(t,m)
mod(t,s)
ARG1-of(t,q)
mod(h,s2)

(p / possible-01
      :ARG1 (o / own-01
            :ARG0 (o2 / one)
            :ARG1 (s / star))
      :manner (a / amr-unknown))

instance(p,possible-01)
instance(o,own-01)
instance(o2,one)
instance(s,star)
instance(a,amr-unknown)
ARG1(p,o)
ARG0(o,o2)
ARG1(o,s)
manner(p,a)

(r / retort-01
      :ARG0 (b3 / businessman)
      :ARG2 (b2 / belong-01
            :ARG0 (t / they)
            :ARG1 (a / amr-unknown))
      :manner (p / peeve-01
            :ARG1 b3))

instance(r,retort-01)
instance(b3,businessman)
instance(b2,belong-01)
instance(t,they)
instance(a,amr-unknown)
instance(p,peeve-01)
ARG0(r,b3)
ARG2(r,b2)
ARG0(b2,t)
ARG1(b2,a)
manner(r,p)
ARG1(p,b3)

(k / know-01
  :ARG0 (i / i)
  :polarity -)

instance(k,know-01)
instance(i,i)
ARG0(k,i)
polarity(k,-)

(b / belong-01
      :ARG1 (n / nobody))

instance(b,belong-01)
instance(n,nobody)
ARG1(b,n)

(b / belong-01
  :ARG0 (t / they)
  :ARG1 (i / i)
  :ARG1-of (c / cause-01
             :ARG0 (p / person
                     :ord (o / ordinal-entity :value 1)
                     :domain i
                     :ARG0-of (t2 / think-01
                                :ARG2 (i2 / it)))))

instance(b,belong-01)
instance(t,they)
instance(i,i)
instance(c,cause-01)
instance(p,person)
instance(o,ordinal-entity)
instance(t2,think-01)
instance(i2,it)
ARG0(b,t)
ARG1(b,i)
ARG1-of(b,c)
ARG0(c,p)
ord(p,o)
value(o,1)
domain(p,i)
ARG0-of(p,t2)
ARG2(t2,i2)

(a / all :polarity (a2 / amr-unknown)
      :domain (t2 / that)
      :ARG1-of (n / need-01))

instance(a,all)
instance(a2,amr-unknown)
instance(t2,that)
instance(n,need-01)
polarity(a,a2)
domain(a,t2)
ARG1-of(a,n)

(c / certain)

instance(c,certain)

(b / belong-01
      :ARG0 d
      :ARG1 (y / you)
      :condition (f / find-01
            :ARG0 y
            :ARG1 (d / diamond
                  :ARG0-of (b2 / belong-01
                        :ARG1 (n / nobody)))))

instance(b,belong-01)
instance(y,you)
instance(f,find-01)
instance(d,diamond)
instance(b2,belong-01)
instance(n,nobody)
ARG0(b,d)
ARG1(b,y)
condition(b,f)
ARG0(f,y)
ARG1(f,d)
ARG0-of(d,b2)
ARG1(b2,n)

(b / belong-01
  :ARG0 i
  :ARG1 (y / you)
  :condition (d / discover-01
               :ARG0 y
               :ARG1 (i / island
                       :ARG0-of (b2 / belong-01
                                  :ARG1 (n / nobody)))))

instance(b,belong-01)
instance(y,you)
instance(d,discover-01)
instance(i,island)
instance(b2,belong-01)
instance(n,nobody)
ARG0(b,i)
ARG1(b,y)
condition(b,d)
ARG0(d,y)
ARG1(d,i)
ARG0-of(i,b2)
ARG1(b2,n)

(a / and
  :op1 (p / patent-01
         :ARG0 y
         :ARG1 i)
  :op2 (b2 / belong-01
         :ARG0 i
         :ARG1 (y / you))
  :condition (g / get-01
               :ARG0 y
               :ARG1 (i / idea)
               :time (b / before
                       :op1 (a3 / anyone
                              :mod (e / else)))))

instance(a,and)
instance(p,patent-01)
instance(b2,belong-01)
instance(y,you)
instance(g,get-01)
instance(i,idea)
instance(b,before)
instance(a3,anyone)
instance(e,else)
op1(a,p)
ARG0(p,y)
ARG1(p,i)
op2(a,b2)
ARG0(b2,i)
ARG1(b2,y)
condition(a,g)
ARG0(g,y)
ARG1(g,i)
time(g,b)
op1(b,a3)
mod(a3,e)

(c / cause-01
      :ARG0 (t / think-01
            :ARG0 (n / nobody
                  :mod (e2 / else))
            :ARG1 (o / own-01
                  :ARG0 n
                  :ARG1 (s / star))
            :time (e / ever)
            :time (b / before
                  :op1 (i / i)))
      :ARG1 (o2 / own-01
            :ARG0 i
            :ARG1 s)
      :ARG1-of (r / resemble-01
            :beneficiary i))

instance(c,cause-01)
instance(t,think-01)
instance(n,nobody)
instance(e2,else)
instance(o,own-01)
instance(s,star)
instance(e,ever)
instance(b,before)
instance(i,i)
instance(o2,own-01)
instance(r,resemble-01)
ARG0(c,t)
ARG0(t,n)
mod(n,e2)
ARG1(t,o)
ARG0(o,n)
ARG1(o,s)
time(t,e)
time(t,b)
op1(b,i)
ARG1(c,o2)
ARG0(o2,i)
ARG1(o2,s)
ARG1-of(c,r)
beneficiary(r,i)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / true-01
            :ARG1 (t2 / that)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(t,true-01)
instance(t2,that)
ARG0(s,p)
mod(p,l)
ARG1(s,t)
ARG1(t,t2)

(a / and
  :op2 (d / do-02
         :ARG0 (y / you)
         :ARG1 (a2 / amr-unknown)
         :ARG2 (t / they)))

instance(a,and)
instance(d,do-02)
instance(y,you)
instance(a2,amr-unknown)
instance(t,they)
op2(a,d)
ARG0(d,y)
ARG1(d,a2)
ARG2(d,t)

(r / reply-01
      :ARG0 (b / businessman)
      :ARG2 (a / administer-01
            :ARG0 b
            :ARG1 (t / they)))

instance(r,reply-01)
instance(b,businessman)
instance(a,administer-01)
instance(t,they)
ARG0(r,b)
ARG2(r,a)
ARG0(a,b)
ARG1(a,t)

(a / and
  :op1 (c / count-01
         :ARG0 (i / i)
         :ARG1 (t / they))
  :op2 (r2 / recount-01
         :ARG0 i
         :ARG1 t))

instance(a,and)
instance(c,count-01)
instance(i,i)
instance(t,they)
instance(r2,recount-01)
op1(a,c)
ARG0(c,i)
ARG1(c,t)
op2(a,r2)
ARG0(r2,i)
ARG1(r2,t)

(d / difficult
  :domain (i / it))

instance(d,difficult)
instance(i,it)
domain(d,i)

(c / contrast-01
      :ARG2 (m / man
            :domain (i / i)
            :ARG1-of (i2 / interest-01
                  :ARG2 (m2 / matter
                        :ARG1-of (c2 / consequential-01))
                  :ARG1-of (n / natural-02
                        :ARG2 i))))

instance(c,contrast-01)
instance(m,man)
instance(i,i)
instance(i2,interest-01)
instance(m2,matter)
instance(c2,consequential-01)
instance(n,natural-02)
ARG2(c,m)
domain(m,i)
ARG1-of(m,i2)
ARG2(i2,m2)
ARG1-of(m2,c2)
ARG1-of(i2,n)
ARG2(n,i)

(s / satisfy-01
  :ARG1 (p / prince
          :mod (l / little))
  :mod (s2 / still)
  :polarity -)

instance(s,satisfy-01)
instance(p,prince)
instance(l,little)
instance(s2,still)
ARG1(s,p)
mod(p,l)
mod(s,s2)
polarity(s,-)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (p / possible-01
            :ARG1 (a2 / and
                  :op1 (p2 / put-01
                        :ARG0 h
                        :ARG1 (s2 / scarf
                              :consist-of (s3 / silk))
                        :ARG2 (a / around
                              :op1 (n / neck
                                    :part-of h)))
                  :op2 (t / take-away-05
                        :ARG0 h
                        :ARG1 s2
                        :accompanier h))
            :condition (o / own-01
                  :ARG0 h
                  :ARG1 s2)))

instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(a2,and)
instance(p2,put-01)
instance(s2,scarf)
instance(s3,silk)
instance(a,around)
instance(n,neck)
instance(t,take-away-05)
instance(o,own-01)
ARG0(s,h)
ARG1(s,p)
ARG1(p,a2)
op1(a2,p2)
ARG0(p2,h)
ARG1(p2,s2)
consist-of(s2,s3)
ARG2(p2,a)
op1(a,n)
part-of(n,h)
op2(a2,t)
ARG0(t,h)
ARG1(t,s2)
accompanier(t,h)
condition(p,o)
ARG0(o,h)
ARG1(o,s2)

(p / possible-01
      :ARG1 (a / and
            :op1 (p2 / pluck-01
                  :ARG0 (i / i)
                  :ARG1 (f2 / flower
                        :mod (t / that)))
            :op2 (t2 / take-away-05
                  :ARG0 i
                  :ARG1 f2
                  :accompanier i))
      :condition (o / own-01
            :ARG0 i
            :ARG1 f2))

instance(p,possible-01)
instance(a,and)
instance(p2,pluck-01)
instance(i,i)
instance(f2,flower)
instance(t,that)
instance(t2,take-away-05)
instance(o,own-01)
ARG1(p,a)
op1(a,p2)
ARG0(p2,i)
ARG1(p2,f2)
mod(f2,t)
op2(a,t2)
ARG0(t2,i)
ARG1(t2,f2)
accompanier(t2,i)
condition(p,o)
ARG0(o,i)
ARG1(o,f2)

(c / contrast-01
  :ARG2 (p2 / possible-01
          :polarity -
          :ARG1 (p / pluck-01
                    :ARG0 (y / you)
                    :ARG1 (s / star)
                    :ARG2 (h / heaven))))

instance(c,contrast-01)
instance(p2,possible-01)
instance(p,pluck-01)
instance(y,you)
instance(s,star)
instance(h,heaven)
ARG2(c,p2)
polarity(p2,-)
ARG1(p2,p)
ARG0(p,y)
ARG1(p,s)
ARG2(p,h)

(n / no)

instance(n,no)

(c / contrast-01
      :ARG2 (p2 / possible-01
            :ARG1 (p / put-01
                  :ARG0 (i / i)
                  :ARG1 (t / they)
                  :ARG2 (b / bank))))

instance(c,contrast-01)
instance(p2,possible-01)
instance(p,put-01)
instance(i,i)
instance(t,they)
instance(b,bank)
ARG2(c,p2)
ARG1(p2,p)
ARG0(p,i)
ARG1(p,t)
ARG2(p,b)

(m / mean-01
      :ARG1 (t / that)
      :ARG2 (a / amr-unknown))

instance(m,mean-01)
instance(t,that)
instance(a,amr-unknown)
ARG1(m,t)
ARG2(m,a)

(m / mean-01
      :ARG1 (t / that)
      :ARG2 (w / write-01
            :ARG0 (i / i)
            :ARG1 (n / number
                  :quant-of (s / star
                        :poss i))
            :location (p / paper
                  :mod (l / little))))

instance(m,mean-01)
instance(t,that)
instance(w,write-01)
instance(i,i)
instance(n,number)
instance(s,star)
instance(p,paper)
instance(l,little)
ARG1(m,t)
ARG2(m,w)
ARG0(w,i)
ARG1(w,n)
quant-of(n,s)
poss(s,i)
location(w,p)
mod(p,l)

(a / and
      :op2 (a2 / and
            :op1 (p / put-01
                  :ARG0 (i / i)
                  :ARG1 (p2 / paper
                        :mod (t2 / this))
                  :ARG2 (d / drawer))
            :op2 (l / lock-01
                  :ARG0 i
                  :ARG1 d
                  :ARG3 (k / key)))
      :time (t / then))

instance(a,and)
instance(a2,and)
instance(p,put-01)
instance(i,i)
instance(p2,paper)
instance(t2,this)
instance(d,drawer)
instance(l,lock-01)
instance(k,key)
instance(t,then)
op2(a,a2)
op1(a2,p)
ARG0(p,i)
ARG1(p,p2)
mod(p2,t2)
ARG2(p,d)
op2(a2,l)
ARG0(l,i)
ARG1(l,d)
ARG3(l,k)
time(a,t)

(a / and
      :op2 (a2 / all
            :domain (t / that)
            :polarity (a3 / amr-unknown)))

instance(a,and)
instance(a2,all)
instance(t,that)
instance(a3,amr-unknown)
op2(a,a2)
domain(a2,t)
polarity(a2,a3)

(s / say-01
      :ARG0 (b2 / businessman)
      :ARG1 (e / enough
            :domain (t / that)))

instance(s,say-01)
instance(b2,businessman)
instance(e,enough)
instance(t,that)
ARG0(s,b2)
ARG1(s,e)
domain(e,t)

(t / think-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (e / entertain-01
          :ARG0 (i / it)))

instance(t,think-01)
instance(p,prince)
instance(l,little)
instance(e,entertain-01)
instance(i,it)
ARG0(t,p)
mod(p,l)
ARG1(t,e)
ARG0(e,i)

(p / poetry
  :domain (i / it)
  :degree (r / rather))

instance(p,poetry)
instance(i,it)
instance(r,rather)
domain(p,i)
degree(p,r)

(c / contrast-01
      :ARG2 (c2 / consequential-01
            :ARG1 (i / it)
            :degree (g / great :polarity -)))

instance(c,contrast-01)
instance(c2,consequential-01)
instance(i,it)
instance(g,great)
ARG2(c,c2)
ARG1(c2,i)
degree(c2,g)
polarity(g,-)

(h / have-03
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (i / idea
            :topic (m / matter
                  :ARG1-of (c / consequential-01))
            :ARG1-of (d / differ-02
                  :ARG2 (i2 / idea
                        :poss (g / grown-up))
                  :degree (v / very))))

instance(h,have-03)
instance(p,prince)
instance(l,little)
instance(i,idea)
instance(m,matter)
instance(c,consequential-01)
instance(d,differ-02)
instance(i2,idea)
instance(g,grown-up)
instance(v,very)
ARG0(h,p)
mod(p,l)
ARG1(h,i)
topic(i,m)
ARG1-of(m,c)
ARG1-of(i,d)
ARG2(d,i2)
poss(i2,g)
degree(d,v)

(c / continue-02
      :ARG0 (h / he)
      :ARG1 (o / own-01
            :ARG0 h
            :ARG1 (f2 / flower
                  :ARG1-of (w / water-01
                        :ARG0 h
                        :frequency (r / rate-entity-91
                              :ARG3 (t / temporal-quantity :quant 1
                                    :unit (d / day))))))
      :ARG2 (b / businessman)
      :ARG3 (c2 / converse-01
            :ARG0 h
            :ARG2 b))

instance(c,continue-02)
instance(h,he)
instance(o,own-01)
instance(f2,flower)
instance(w,water-01)
instance(r,rate-entity-91)
instance(t,temporal-quantity)
instance(d,day)
instance(b,businessman)
instance(c2,converse-01)
ARG0(c,h)
ARG1(c,o)
ARG0(o,h)
ARG1(o,f2)
ARG1-of(f2,w)
ARG0(w,h)
frequency(w,r)
ARG3(r,t)
quant(t,1)
unit(t,d)
ARG2(c,b)
ARG3(c,c2)
ARG0(c2,h)
ARG2(c2,b)

(o / own-01
      :ARG0 (i / i)
      :ARG1 (v / volcano :quant 3
            :ARG1-of (c / clean-out-03
                  :ARG0 i
                  :frequency (r / rate-entity-91
                        :ARG3 (t / temporal-quantity :quant 1
                              :unit (w / week)))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (c3 / clean-out-03
                              :ARG0 i
                              :ARG1 (v2 / volcano
                                    :mod (e / extinct)
                                    :ARG1-of (i2 / include-91
                                          :ARG2 v))
                              :mod (a / also)
                              :ARG1-of (c4 / cause-01
                                    :ARG0 (k / know-01 :polarity -
                                          :ARG0 (o2 / one))))))))

instance(o,own-01)
instance(i,i)
instance(v,volcano)
instance(c,clean-out-03)
instance(r,rate-entity-91)
instance(t,temporal-quantity)
instance(w,week)
instance(c2,cause-01)
instance(c3,clean-out-03)
instance(v2,volcano)
instance(e,extinct)
instance(i2,include-91)
instance(a,also)
instance(c4,cause-01)
instance(k,know-01)
instance(o2,one)
ARG0(o,i)
ARG1(o,v)
quant(v,3)
ARG1-of(v,c)
ARG0(c,i)
frequency(c,r)
ARG3(r,t)
quant(t,1)
unit(t,w)
ARG1-of(c,c2)
ARG0(c2,c3)
ARG0(c3,i)
ARG1(c3,v2)
mod(v2,e)
ARG1-of(v2,i2)
ARG2(i2,v)
mod(c3,a)
ARG1-of(c3,c4)
ARG0(c4,k)
polarity(k,-)
ARG0(k,o2)

(c / cause-01
      :ARG0 (o / own-01
            :ARG0 (i / i)
            :ARG1 (a / and
                  :op1 v
                  :op2 f2))
      :ARG1 (u / use-01
            :beneficiary (a2 / and
                  :op1 (v / volcano
                        :poss i)
                  :op2 (f2 / flower
                        :poss i))
            :degree (s / some)))

instance(c,cause-01)
instance(o,own-01)
instance(i,i)
instance(a,and)
instance(u,use-01)
instance(a2,and)
instance(v,volcano)
instance(f2,flower)
instance(s,some)
ARG0(c,o)
ARG0(o,i)
ARG1(o,a)
op1(a,v)
op2(a,f2)
ARG1(c,u)
beneficiary(u,a2)
op1(a2,v)
poss(v,i)
op2(a2,f2)
poss(f2,i)
degree(u,s)

(c / contrast-01
      :ARG2 (u / use-01 :polarity -
            :ARG0 (s / star)
            :ARG1 (y / you)))

instance(c,contrast-01)
instance(u,use-01)
instance(s,star)
instance(y,you)
ARG2(c,u)
polarity(u,-)
ARG0(u,s)
ARG1(u,y)

(c / contrast-01
      :ARG1 (o / open-01
            :ARG0 (b / businessman)
            :ARG1 (m / mouth
                  :part-of b))
      :ARG2 (f / find-01
            :ARG0 b
            :ARG1 (a / answer-01 :polarity -)))

instance(c,contrast-01)
instance(o,open-01)
instance(b,businessman)
instance(m,mouth)
instance(f,find-01)
instance(a,answer-01)
ARG1(c,o)
ARG0(o,b)
ARG1(o,m)
part-of(m,b)
ARG2(c,f)
ARG0(f,b)
ARG1(f,a)
polarity(a,-)

(a / and
      :op2 (g / go-02
            :ARG0 (p / prince
                  :mod (l / little))
            :direction (a2 / away)))

instance(a,and)
instance(g,go-02)
instance(p,prince)
instance(l,little)
instance(a2,away)
op2(a,g)
ARG0(g,p)
mod(p,l)
direction(g,a2)

(s / say-01
      :ARG0 (h / he
            :ARG0-of (t / talk-01
                  :ARG2 h
                  :time (c2 / continue-01
                        :ARG0 h
                        :ARG1 (j / journey-01
                              :ARG0 h))))
      :ARG1 (e / extraordinary
            :domain (g2 / grown-up)
            :mod (c / certain)
            :degree (a / altogether))
      :ARG1-of (s2 / simple-02))

instance(s,say-01)
instance(h,he)
instance(t,talk-01)
instance(c2,continue-01)
instance(j,journey-01)
instance(e,extraordinary)
instance(g2,grown-up)
instance(c,certain)
instance(a,altogether)
instance(s2,simple-02)
ARG0(s,h)
ARG0-of(h,t)
ARG2(t,h)
time(t,c2)
ARG0(c2,h)
ARG1(c2,j)
ARG0(j,h)
ARG1(s,e)
domain(e,g2)
mod(e,c)
degree(e,a)
ARG1-of(s,s2)

(c / chapter
  :mod 14)

instance(c,chapter)
mod(c,14)

(s / strange
  :degree (v / very)
  :domain (p / planet
            :ord (o / ordinal-entity :value 5)))

instance(s,strange)
instance(v,very)
instance(p,planet)
instance(o,ordinal-entity)
degree(s,v)
domain(s,p)
ord(p,o)
value(o,5)

(h / have-degree-91
      :ARG1 (i2 / it)
      :ARG2 (s / small)
      :ARG3 (m / most)
      :ARG5 (a / all))

instance(h,have-degree-91)
instance(i2,it)
instance(s,small)
instance(m,most)
instance(a,all)
ARG1(h,i2)
ARG2(h,s)
ARG3(h,m)
ARG5(h,a)

(h / have-quant-91
      :ARG1 (r / room
            :location (i2 / it))
      :ARG3 (e / enough
            :mod (j / just))
      :ARG6 (a2 / accommodate-01
            :ARG0 r
            :ARG1 (a / and
                  :op1 (l / lamp
                        :mod (s / street))
                  :op2 (p / person
                        :ARG0-of (l2 / light-04
                              :ARG1 (l3 / lamp))))))

instance(h,have-quant-91)
instance(r,room)
instance(i2,it)
instance(e,enough)
instance(j,just)
instance(a2,accommodate-01)
instance(a,and)
instance(l,lamp)
instance(s,street)
instance(p,person)
instance(l2,light-04)
instance(l3,lamp)
ARG1(h,r)
location(r,i2)
ARG3(h,e)
mod(e,j)
ARG6(h,a2)
ARG0(a2,r)
ARG1(a2,a)
op1(a,l)
mod(l,s)
op2(a,p)
ARG0-of(p,l2)
ARG1(l2,l3)

(p / possible-01 :polarity -
      :ARG1 (e / explain-01
            :ARG0 (p2 / prince
                  :mod (l / little))
            :ARG1 (u / use-01
                  :ARG1 (a / and
                        :op1 (l2 / lamp
                              :mod (s / street))
                        :op2 (p3 / person
                              :ARG0-of (l3 / light-04
                                    :ARG1 (l4 / lamp)))
                        :location (r / relative-position
                              :op1 (h / heaven)
                              :location (p4 / planet
                                    :ARG0-of (h2 / have-03 :polarity -
                                          :ARG1 (a2 / and
                                                :op1 (p5 / person)
                                                :op2 (h3 / house)))))))))

instance(p,possible-01)
instance(e,explain-01)
instance(p2,prince)
instance(l,little)
instance(u,use-01)
instance(a,and)
instance(l2,lamp)
instance(s,street)
instance(p3,person)
instance(l3,light-04)
instance(l4,lamp)
instance(r,relative-position)
instance(h,heaven)
instance(p4,planet)
instance(h2,have-03)
instance(a2,and)
instance(p5,person)
instance(h3,house)
polarity(p,-)
ARG1(p,e)
ARG0(e,p2)
mod(p2,l)
ARG1(e,u)
ARG1(u,a)
op1(a,l2)
mod(l2,s)
op2(a,p3)
ARG0-of(p3,l3)
ARG1(l3,l4)
location(a,r)
op1(r,h)
location(r,p4)
ARG0-of(p4,h2)
polarity(h2,-)
ARG1(h2,a2)
op1(a2,p5)
op2(a2,h3)

(h2 / have-concession-91
  :ARG1 (s / say-01
          :ARG0 (h / he)
          :ARG1 (p / possible-01
                  :ARG1 (a / absurd
                            :domain (m / man
                                      :mod (t / this))))
          :ARG2 h))

instance(h2,have-concession-91)
instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(a,absurd)
instance(m,man)
instance(t,this)
ARG1(h2,s)
ARG0(s,h)
ARG1(s,p)
ARG1(p,a)
domain(a,m)
mod(m,t)
ARG2(s,h)

(c / contrast-01
      :ARG2 (h2 / have-degree-91 :polarity -
            :ARG1 (h / he)
            :ARG2 (a / absurd)
            :ARG3 (e / equal)
            :ARG4 (a2 / and
                  :op1 (k / king)
                  :op2 (m / man
                        :mod (c2 / conceit))
                  :op3 (b2 / businessman)
                  :op4 (p / person
                        :ARG0-of (t / tipple-01)))))

instance(c,contrast-01)
instance(h2,have-degree-91)
instance(h,he)
instance(a,absurd)
instance(e,equal)
instance(a2,and)
instance(k,king)
instance(m,man)
instance(c2,conceit)
instance(b2,businessman)
instance(p,person)
instance(t,tipple-01)
ARG2(c,h2)
polarity(h2,-)
ARG1(h2,h)
ARG2(h2,a)
ARG3(h2,e)
ARG4(h2,a2)
op1(a2,k)
op2(a2,m)
mod(m,c2)
op3(a2,b2)
op4(a2,p)
ARG0-of(p,t)

(c / cause-01
      :ARG0 (m / mean-01
            :ARG1 (w / work-01
                  :ARG0 (h / he))
            :degree (s / some)
            :mod (a / at-least)))

instance(c,cause-01)
instance(m,mean-01)
instance(w,work-01)
instance(h,he)
instance(s,some)
instance(a,at-least)
ARG0(c,m)
ARG1(m,w)
ARG0(w,h)
degree(m,s)
mod(m,a)

(l2 / light-04
      :ARG0 h
      :ARG1 (l3 / lamp
            :mod (s2 / street)
            :poss h)
      :ARG1-of (r / resemble-01
            :ARG2 (b / bring-01
                  :ARG0 (h / he)
                  :ARG1 (o / or
                        :op1 (s / star :quant 1
                              :mod (m / more))
                        :op2 (f2 / flower))
                  :ARG3 (l / live-01))))

instance(l2,light-04)
instance(l3,lamp)
instance(s2,street)
instance(r,resemble-01)
instance(b,bring-01)
instance(h,he)
instance(o,or)
instance(s,star)
instance(m,more)
instance(f2,flower)
instance(l,live-01)
ARG0(l2,h)
ARG1(l2,l3)
mod(l3,s2)
poss(l3,h)
ARG1-of(l2,r)
ARG2(r,b)
ARG0(b,h)
ARG1(b,o)
op1(o,s)
quant(s,1)
mod(s,m)
op2(o,f2)
ARG3(b,l)

(s / send-02
      :ARG0 (h / he)
      :ARG1 (o / or
            :op1 (f2 / flower)
            :op2 (s3 / star))
      :ARG2 (s2 / sleep-01
            :ARG0 o)
      :time (p / put-out-09
            :ARG0 h
            :ARG1 (l / lamp
                  :poss h)))

instance(s,send-02)
instance(h,he)
instance(o,or)
instance(f2,flower)
instance(s3,star)
instance(s2,sleep-01)
instance(p,put-out-09)
instance(l,lamp)
ARG0(s,h)
ARG1(s,o)
op1(o,f2)
op2(o,s3)
ARG2(s,s2)
ARG0(s2,o)
time(s,p)
ARG0(p,h)
ARG1(p,l)
poss(l,h)

(o / occupation
      :ARG1-of (b / beautiful-02)
      :domain (t / that))

instance(o,occupation)
instance(b,beautiful-02)
instance(t,that)
ARG1-of(o,b)
domain(o,t)

(a / and
      :op2 (c / cause-01
            :ARG0 (b / beautiful-02
                  :ARG1 (i / it))
            :ARG1 (u / useful-05
                  :ARG1 i
                  :degree (t / truly))))

instance(a,and)
instance(c,cause-01)
instance(b,beautiful-02)
instance(i,it)
instance(u,useful-05)
instance(t,truly)
op2(a,c)
ARG0(c,b)
ARG1(b,i)
ARG1(c,u)
ARG1(u,i)
degree(u,t)

(s / salute-01
  :ARG0 (h / he)
  :ARG1 (p / person
          :ARG0-of (l / light-04
                     :ARG1 (l2 / lamp)))
  :manner (r / respect-01)
  :time (a / arrive-01
          :ARG1 h
          :ARG4 (p2 / planet)))

instance(s,salute-01)
instance(h,he)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(r,respect-01)
instance(a,arrive-01)
instance(p2,planet)
ARG0(s,h)
ARG1(s,p)
ARG0-of(p,l)
ARG1(l,l2)
manner(s,r)
time(s,a)
ARG1(a,h)
ARG4(a,p2)

(m / morning
      :ARG1-of (g / good-02))

instance(m,morning)
instance(g,good-02)
ARG1-of(m,g)

(c / cause-01
  :ARG0 (a / amr-unknown)
  :ARG1 (p / put-out-09
          :ARG0 (y / you)
          :ARG1 (l / lamp
                  :poss y)
          :mod (j / just)))

instance(c,cause-01)
instance(a,amr-unknown)
instance(p,put-out-09)
instance(y,you)
instance(l,lamp)
instance(j,just)
ARG0(c,a)
ARG1(c,p)
ARG0(p,y)
ARG1(p,l)
poss(l,y)
mod(p,j)

(r / reply-01
  :ARG0 (p / person
          :ARG0-of (l / light-04
                     :ARG1 (l2 / lamp)))
  :ARG2 (o / order-01
          :ARG2 (t / that)))

instance(r,reply-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(o,order-01)
instance(t,that)
ARG0(r,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG2(r,o)
ARG2(o,t)

(m / morning
      :ARG1-of (g / good-02))

instance(m,morning)
instance(g,good-02)
ARG1-of(m,g)

(o / order-01
  :ARG2 (a / amr-unknown))

instance(o,order-01)
instance(a,amr-unknown)
ARG2(o,a)

(o / order-01
  :ARG2 (p / put-out-09
          :ARG0 (i / i)
          :ARG1 (l / lamp
                  :poss i)))

instance(o,order-01)
instance(p,put-out-09)
instance(i,i)
instance(l,lamp)
ARG2(o,p)
ARG0(p,i)
ARG1(p,l)
poss(l,i)

(e / evening
      :ARG1-of (g / good-02))

instance(e,evening)
instance(g,good-02)
ARG1-of(e,g)

(a / and
  :op2 (l / light-04
         :ARG0 (h / he)
         :ARG1 (l2 / lamp
                 :poss h)
         :mod (a2 / again)))

instance(a,and)
instance(l,light-04)
instance(h,he)
instance(l2,lamp)
instance(a2,again)
op2(a,l)
ARG0(l,h)
ARG1(l,l2)
poss(l2,h)
mod(l,a2)

(c / contrast-01
  :ARG2 (c2 / cause-01
          :ARG0 (a / amr-unknown)
          :ARG1 (l / light-04
                  :ARG0 (y / you)
                  :ARG1 (i / it)
                  :mod (a2 / again)
                  :mod (j / just))))

instance(c,contrast-01)
instance(c2,cause-01)
instance(a,amr-unknown)
instance(l,light-04)
instance(y,you)
instance(i,it)
instance(a2,again)
instance(j,just)
ARG2(c,c2)
ARG0(c2,a)
ARG1(c2,l)
ARG0(l,y)
ARG1(l,i)
mod(l,a2)
mod(l,j)

(r / reply-01
  :ARG0 (p / person
          :ARG0-of (l / light-04
                     :ARG1 (l2 / lamp)))
  :ARG2 (o / order-01
          :ARG2 (t / that)))

instance(r,reply-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(o,order-01)
instance(t,that)
ARG0(r,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG2(r,o)
ARG2(o,t)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (u / understand-01
          :ARG0 p
          :polarity -))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(u,understand-01)
ARG0(s,p)
mod(p,l)
ARG1(s,u)
ARG0(u,p)
polarity(u,-)

(s / say-01
      :ARG0 (p / person
            :ARG0-of (l / light-04
                  :ARG1 (l2 / lamp)))
      :ARG1 (n / nothing
            :ARG1-of (u / understand-01)))

instance(s,say-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(n,nothing)
instance(u,understand-01)
ARG0(s,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG1(s,n)
ARG1-of(n,u)

(o / order
  :domain (o2 / order))

instance(o,order)
instance(o2,order)
domain(o,o2)

(m / morning
      :ARG1-of (g / good-02))

instance(m,morning)
instance(g,good-02)
ARG1-of(m,g)

(a / and
  :op2 (p / put-out-09
         :ARG0 (h / he)
         :ARG1 (l / lamp
                 :poss h)))

instance(a,and)
instance(p,put-out-09)
instance(h,he)
instance(l,lamp)
op2(a,p)
ARG0(p,h)
ARG1(p,l)
poss(l,h)

(m / mop-01
      :ARG0 (h / he)
      :ARG1 (f / forehead
            :part-of h)
      :ARG2 (h2 / handkerchief
            :ARG1-of (d / decorate-01
                  :ARG2 (s / square
                        :ARG1-of (r / red-02))))
      :time (t / then))

instance(m,mop-01)
instance(h,he)
instance(f,forehead)
instance(h2,handkerchief)
instance(d,decorate-01)
instance(s,square)
instance(r,red-02)
instance(t,then)
ARG0(m,h)
ARG1(m,f)
part-of(f,h)
ARG2(m,h2)
ARG1-of(h2,d)
ARG2(d,s)
ARG1-of(s,r)
time(m,t)

(f / follow-02
      :ARG0 (i / i)
      :ARG1 (p / profession
            :ARG1-of (t / terrible-01)))

instance(f,follow-02)
instance(i,i)
instance(p,profession)
instance(t,terrible-01)
ARG0(f,i)
ARG1(f,p)
ARG1-of(p,t)

(r / reasonable-02
      :ARG1 (i / it)
      :time (d / day
            :mod (o / old)))

instance(r,reasonable-02)
instance(i,it)
instance(d,day)
instance(o,old)
ARG1(r,i)
time(r,d)
mod(d,o)

(a / and
  :op1 (p / put-out-09
         :ARG0 (i / i)
         :ARG1 (l / lamp)
         :time (d2 / date-entity :dayperiod (m / morning)))
  :op2 (l2 / light-04
         :ARG0 i
         :ARG1 l
         :time (d / date-entity :dayperiod (e / evening))
         :mod (a2 / again)))

instance(a,and)
instance(p,put-out-09)
instance(i,i)
instance(l,lamp)
instance(d2,date-entity)
instance(m,morning)
instance(l2,light-04)
instance(d,date-entity)
instance(e,evening)
instance(a2,again)
op1(a,p)
ARG0(p,i)
ARG1(p,l)
time(p,d2)
dayperiod(d2,m)
op2(a,l2)
ARG0(l2,i)
ARG1(l2,l)
time(l2,d)
dayperiod(d,e)
mod(l2,a2)

(h / have-03
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (r / rest
                  :purpose (r2 / relax-01)
                  :part-of (d / day))
            :op2 (r3 / rest
                  :purpose (s / sleep-01)
                  :part-of (n / night))))

instance(h,have-03)
instance(i,i)
instance(a,and)
instance(r,rest)
instance(r2,relax-01)
instance(d,day)
instance(r3,rest)
instance(s,sleep-01)
instance(n,night)
ARG0(h,i)
ARG1(h,a)
op1(a,r)
purpose(r,r2)
part-of(r,d)
op2(a,r3)
purpose(r3,s)
part-of(r3,n)

(a / and
      :op2 (c / change-01 :polarity (a2 / amr-unknown)
            :ARG1 (o / order-01)
            :time (s / since
                  :op1 (t / time
                        :mod (t2 / that)))))

instance(a,and)
instance(c,change-01)
instance(a2,amr-unknown)
instance(o,order-01)
instance(s,since)
instance(t,time)
instance(t2,that)
op2(a,c)
polarity(c,a2)
ARG1(c,o)
time(c,s)
op1(s,t)
mod(t,t2)

(s / say-01
  :ARG0 (p / person
          :ARG0-of (l / light-04
                     :ARG1 (l2 / lamp)))
  :ARG1 (c / change-01
          :ARG1 (o / order-01)
          :polarity -))

instance(s,say-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(c,change-01)
instance(o,order-01)
ARG0(s,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG1(s,c)
ARG1(c,o)
polarity(c,-)

(t / tragedy
      :domain (t2 / that))

instance(t,tragedy)
instance(t2,that)
domain(t,t2)

(a / and
      :op1 (h / have-degree-91
            :ARG1 (t / turn-01
                  :ARG1 (p / planet))
            :ARG2 (r / rapid)
            :ARG3 (m / more)
            :frequency (y / year))
      :op2 (c / change-01 :polarity -
            :ARG1 (o / order-01)))

instance(a,and)
instance(h,have-degree-91)
instance(t,turn-01)
instance(p,planet)
instance(r,rapid)
instance(m,more)
instance(y,year)
instance(c,change-01)
instance(o,order-01)
op1(a,h)
ARG1(h,t)
ARG1(t,p)
ARG2(h,r)
ARG3(h,m)
frequency(h,y)
op2(a,c)
polarity(c,-)
ARG1(c,o)

(a / ask-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (a2 / amr-unknown
          :time (t / then)))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(a2,amr-unknown)
instance(t,then)
ARG0(a,p)
mod(p,l)
ARG1(a,a2)
time(a2,t)

(a / and
      :op1 (t / turn-01
            :ARG1 (p / planet)
            :ARG1-of (c / complete-02)
            :time (n / now)
            :frequency (r2 / rate-entity-91
                  :ARG3 (t3 / temporal-quantity :quant 1
                        :unit (m / minute))))
      :op2 (h / have-03
            :ARG0 (i / i)
            :ARG1 (t2 / temporal-quantity :quant 1
                  :unit (s / second)
                  :purpose (r / repose-01))
            :time (n2 / no-longer))
      :time (t4 / then))

instance(a,and)
instance(t,turn-01)
instance(p,planet)
instance(c,complete-02)
instance(n,now)
instance(r2,rate-entity-91)
instance(t3,temporal-quantity)
instance(m,minute)
instance(h,have-03)
instance(i,i)
instance(t2,temporal-quantity)
instance(s,second)
instance(r,repose-01)
instance(n2,no-longer)
instance(t4,then)
op1(a,t)
ARG1(t,p)
ARG1-of(t,c)
time(t,n)
frequency(t,r2)
ARG3(r2,t3)
quant(t3,1)
unit(t3,m)
op2(a,h)
ARG0(h,i)
ARG1(h,t2)
quant(t2,1)
unit(t2,s)
purpose(t2,r)
time(h,n2)
time(a,t4)

(o / obligate-01
      :ARG1 (i / i)
      :ARG2 (a / and
            :op1 (l / light-04
                  :ARG0 i
                  :ARG1 (l2 / lamp
                        :poss i))
            :op2 (p / put-out-09
                  :ARG0 i
                  :ARG1 l2))
      :frequency (r / rate-entity-91
            :ARG2 (t / temporal-quantity :quant 1
                  :unit (m / minute))))

instance(o,obligate-01)
instance(i,i)
instance(a,and)
instance(l,light-04)
instance(l2,lamp)
instance(p,put-out-09)
instance(r,rate-entity-91)
instance(t,temporal-quantity)
instance(m,minute)
ARG1(o,i)
ARG2(o,a)
op1(a,l)
ARG0(l,i)
ARG1(l,l2)
poss(l2,i)
op2(a,p)
ARG0(p,i)
ARG1(p,l2)
frequency(o,r)
ARG2(r,t)
quant(t,1)
unit(t,m)

(f / funny
  :degree (v / very)
  :domain (t / that))

instance(f,funny)
instance(v,very)
instance(t,that)
degree(f,v)
domain(f,t)

(l / last-01
      :ARG1 (t / temporal-quantity :quant 1
            :unit (d / day))
      :ARG2 (t2 / temporal-quantity :quant 1
            :unit (m / minute))
      :mod (o / only)
      :location (l2 / live-01
            :ARG0 (y / you)))

instance(l,last-01)
instance(t,temporal-quantity)
instance(d,day)
instance(t2,temporal-quantity)
instance(m,minute)
instance(o,only)
instance(l2,live-01)
instance(y,you)
ARG1(l,t)
quant(t,1)
unit(t,d)
ARG2(l,t2)
quant(t2,1)
unit(t2,m)
mod(l,o)
location(l,l2)
ARG0(l2,y)

(s / say-01
      :ARG0 (p / person
            :ARG0-of (l / light-04
                  :ARG1 (l2 / lamp)))
      :ARG1 (f / funny :polarity -
            :domain (i / it)
            :degree (a / at-all)))

instance(s,say-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(f,funny)
instance(i,it)
instance(a,at-all)
ARG0(s,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG1(s,f)
polarity(f,-)
domain(f,i)
degree(f,a)

(p / pass-03
      :ARG1 (t / temporal-quantity :quant 1
            :unit (m / month))
      :duration-of (t2 / talk-01
            :ARG0 (w / we)
            :mod (t3 / together)))

instance(p,pass-03)
instance(t,temporal-quantity)
instance(m,month)
instance(t2,talk-01)
instance(w,we)
instance(t3,together)
ARG1(p,t)
quant(t,1)
unit(t,m)
duration-of(p,t2)
ARG0(t2,w)
mod(t2,t3)

(t / temporal-quantity :polarity (a / amr-unknown) :quant 1
      :unit (m / month))

instance(t,temporal-quantity)
instance(a,amr-unknown)
instance(m,month)
polarity(t,a)
quant(t,1)
unit(t,m)

(t / temporal-quantity
  :unit (m / month)
  :quant 1)

instance(t,temporal-quantity)
instance(m,month)
unit(t,m)
quant(t,1)

(t / temporal-quantity
  :unit (m / minute)
  :quant 30)

instance(t,temporal-quantity)
instance(m,minute)
unit(t,m)
quant(t,30)

(t / temporal-quantity
  :unit (d / day)
  :quant 30)

instance(t,temporal-quantity)
instance(d,day)
unit(t,d)
quant(t,30)

(e / evening
      :ARG1-of (g / good-02))

instance(e,evening)
instance(g,good-02)
ARG1-of(e,g)

(a / and
  :op2 (l / light-04
         :ARG0 (h / he)
         :ARG1 (l2 / lamp
                 :poss h)
         :mod (a2 / again)))

instance(a,and)
instance(l,light-04)
instance(h,he)
instance(l2,lamp)
instance(a2,again)
op2(a,l)
ARG0(l,h)
ARG1(l,l2)
poss(l2,h)
mod(l,a2)

(f / feel-01
      :ARG0 (p / prince
            :mod (l2 / little))
      :ARG1 (l / love-01
            :ARG0 p
            :ARG1 (p2 / person
                  :ARG0-of (l3 / light-04
                        :ARG1 (l4 / lamp))
                  :mod (t / this)
                  :ARG1-of (f2 / faithful-00
                        :ARG2 (t2 / thing
                              :ARG2-of (o / order-01
                                    :ARG1 p2)))))
      :time (w / watch-01
            :ARG0 p
            :ARG1 p2))

instance(f,feel-01)
instance(p,prince)
instance(l2,little)
instance(l,love-01)
instance(p2,person)
instance(l3,light-04)
instance(l4,lamp)
instance(t,this)
instance(f2,faithful-00)
instance(t2,thing)
instance(o,order-01)
instance(w,watch-01)
ARG0(f,p)
mod(p,l2)
ARG1(f,l)
ARG0(l,p)
ARG1(l,p2)
ARG0-of(p2,l3)
ARG1(l3,l4)
mod(p2,t)
ARG1-of(p2,f2)
ARG2(f2,t2)
ARG2-of(t2,o)
ARG1(o,p2)
time(f,w)
ARG0(w,p)
ARG1(w,p2)

(a / and
      :op1 (r / remember-01
            :ARG0 (h / he)
            :ARG1 (s3 / sunset
                  :ARG1-of (s / seek-01
                        :purpose-of (g / go-02
                              :ARG0 h
                              :manner (p / pull-01
                                    :ARG0 h
                                    :ARG1 (c / chair)
                                    :mod (m / mere)
                                    :direction (u / up))
                              :time (d / day
                                    :mod (o / other))))))
      :op2 (w / want-01
            :ARG0 h
            :ARG1 (h2 / help-01
                  :ARG0 h
                  :ARG1 (p2 / person
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 h
                              :ARG2 (f / friend))))))

instance(a,and)
instance(r,remember-01)
instance(h,he)
instance(s3,sunset)
instance(s,seek-01)
instance(g,go-02)
instance(p,pull-01)
instance(c,chair)
instance(m,mere)
instance(u,up)
instance(d,day)
instance(o,other)
instance(w,want-01)
instance(h2,help-01)
instance(p2,person)
instance(h3,have-rel-role-91)
instance(f,friend)
op1(a,r)
ARG0(r,h)
ARG1(r,s3)
ARG1-of(s3,s)
purpose-of(s,g)
ARG0(g,h)
manner(g,p)
ARG0(p,h)
ARG1(p,c)
mod(p,m)
direction(p,u)
time(g,d)
mod(d,o)
op2(a,w)
ARG0(w,h)
ARG1(w,h2)
ARG0(h2,h)
ARG1(h2,p2)
ARG0-of(p2,h3)
ARG1(h3,h)
ARG2(h3,f)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (p / possible-01
            :ARG1 (t / tell-01
                  :ARG0 h
                  :ARG1 (w / way
                        :purpose (p2 / possible-01
                              :ARG1 (r / rest-01
                                    :ARG1 (y / you)
                                    :time (w2 / want-01
                                          :ARG0 y
                                          :mod (a / any)))))
                  :ARG2 y)))

instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(t,tell-01)
instance(w,way)
instance(p2,possible-01)
instance(r,rest-01)
instance(y,you)
instance(w2,want-01)
instance(a,any)
ARG0(s,h)
ARG1(s,p)
ARG1(p,t)
ARG0(t,h)
ARG1(t,w)
purpose(w,p2)
ARG1(p2,r)
ARG1(r,y)
time(r,w2)
ARG0(w2,y)
mod(w2,a)
ARG2(t,y)

(s / say-01
      :ARG0 (p / person
            :ARG0-of (l / light-04
                  :ARG1 (l2 / lamp)))
      :ARG1 (w / want-01
            :ARG0 p
            :ARG1 (r / rest-01
                  :ARG1 p)
            :time (a / always)))

instance(s,say-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(w,want-01)
instance(r,rest-01)
instance(a,always)
ARG0(s,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG1(s,w)
ARG0(w,p)
ARG1(w,r)
ARG1(r,p)
time(w,a)

(c / cause-01
  :ARG0 (p / possible-01
          :ARG1 (a / and
                    :op1 (f / faithful)
                    :op2 (l / lazy)
                    :domain (m / man)
                    :time (s / same-01
                            :ARG1 (t / time)))))

instance(c,cause-01)
instance(p,possible-01)
instance(a,and)
instance(f,faithful)
instance(l,lazy)
instance(m,man)
instance(s,same-01)
instance(t,time)
ARG0(c,p)
ARG1(p,a)
op1(a,f)
op2(a,l)
domain(a,m)
time(a,s)
ARG1(s,t)

(g / go-on-25
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (e / explain-01
            :ARG0 p
            :ARG1 (c / cause-01
                  :ARG0 (h / have-degree-91
                        :ARG1 (p2 / planet
                              :poss (y / you))
                        :ARG2 (s / small)
                        :ARG3 (s2 / so)
                        :ARG6 (t / take-03
                              :ARG0 (s3 / stride-01 :quant 3)
                              :ARG1 y
                              :ARG2 (a / around
                                    :op1 p2
                                    :extent (a2 / all-the-way)))))))

instance(g,go-on-25)
instance(p,prince)
instance(l,little)
instance(e,explain-01)
instance(c,cause-01)
instance(h,have-degree-91)
instance(p2,planet)
instance(y,you)
instance(s,small)
instance(s2,so)
instance(t,take-03)
instance(s3,stride-01)
instance(a,around)
instance(a2,all-the-way)
ARG0(g,p)
mod(p,l)
ARG1(g,e)
ARG0(e,p)
ARG1(e,c)
ARG0(c,h)
ARG1(h,p2)
poss(p2,y)
ARG2(h,s)
ARG3(h,s2)
ARG6(h,t)
ARG0(t,s3)
quant(s3,3)
ARG1(t,y)
ARG2(t,a)
op1(a,p2)
extent(a,a2)

(n / need-01
      :ARG0 (y / you)
      :ARG1 (w / walk-01
            :ARG1-of (s / slow-05
                  :degree (r / rather))
            :mod (o / only))
      :purpose (b / be-located-at-91
            :ARG1 y
            :ARG2 (s2 / sunshine)
            :time (a / always)))

instance(n,need-01)
instance(y,you)
instance(w,walk-01)
instance(s,slow-05)
instance(r,rather)
instance(o,only)
instance(b,be-located-at-91)
instance(s2,sunshine)
instance(a,always)
ARG0(n,y)
ARG1(n,w)
ARG1-of(w,s)
degree(s,r)
mod(w,o)
purpose(n,b)
ARG1(b,y)
ARG2(b,s2)
time(b,a)

(w / walk-01
      :ARG0 (y / you)
      :time (w2 / want-01
            :ARG0 y
            :ARG1 (r / rest-01
                  :ARG1 y))
      :ARG0-of (c / cause-01
            :ARG1 (l / last-01
                  :ARG1 (d / day)
                  :ARG2 (t / temporal-quantity
                        :ARG1-of (h / have-quant-91
                              :ARG3 (e / equal)
                              :ARG4 (t2 / temporal-quantity
                                    :ARG1-of (l2 / like-02
                                          :ARG0 y)))))))

instance(w,walk-01)
instance(y,you)
instance(w2,want-01)
instance(r,rest-01)
instance(c,cause-01)
instance(l,last-01)
instance(d,day)
instance(t,temporal-quantity)
instance(h,have-quant-91)
instance(e,equal)
instance(t2,temporal-quantity)
instance(l2,like-02)
ARG0(w,y)
time(w,w2)
ARG0(w2,y)
ARG1(w2,r)
ARG1(r,y)
ARG0-of(w,c)
ARG1(c,l)
ARG1(l,d)
ARG2(l,t)
ARG1-of(t,h)
ARG3(h,e)
ARG4(h,t2)
ARG1-of(t2,l2)
ARG0(l2,y)

(s / say-01
      :ARG0 (p / person
            :ARG0-of (l / light-04
                  :ARG1 (l2 / lamp)))
      :ARG1 (d / do-02 :polarity -
            :ARG0 (t / that)
            :ARG1 (g / good-04
                  :ARG2 p
                  :degree (m / much))
            :ARG2 p))

instance(s,say-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(d,do-02)
instance(t,that)
instance(g,good-04)
instance(m,much)
ARG0(s,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG1(s,d)
polarity(d,-)
ARG0(d,t)
ARG1(d,g)
ARG2(g,p)
degree(g,m)
ARG2(d,p)

(l / love-01
      :ARG0 (i / i)
      :ARG1 (s / sleep-01
            :ARG0 i
            :mod (t / thing :quant 1))
      :time (l2 / live-01))

instance(l,love-01)
instance(i,i)
instance(s,sleep-01)
instance(t,thing)
instance(l2,live-01)
ARG0(l,i)
ARG1(l,s)
ARG0(s,i)
mod(s,t)
quant(t,1)
time(l,l2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (l2 / lucky :polarity -
            :domain (y / you)
            :time (t / then)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(l2,lucky)
instance(y,you)
instance(t,then)
ARG0(s,p)
mod(p,l)
ARG1(s,l2)
polarity(l2,-)
domain(l2,y)
time(l2,t)

(s / say-01
  :ARG0 (p / person
          :ARG0-of (l / light-04
                     :ARG1 (l2 / lamp)))
  :ARG1 (l3 / lucky
          :domain p
          :polarity -))

instance(s,say-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(l3,lucky)
ARG0(s,p)
ARG0-of(p,l)
ARG1(l,l2)
ARG1(s,l3)
domain(l3,p)
polarity(l3,-)

(m / morning
      :ARG1-of (g / good-02))

instance(m,morning)
instance(g,good-02)
ARG1-of(m,g)

(a / and
  :op2 (p / put-out-09
         :ARG0 (h / he)
         :ARG1 (l / lamp
                 :poss h)))

instance(a,and)
instance(p,put-out-09)
instance(h,he)
instance(l,lamp)
op2(a,p)
ARG0(p,h)
ARG1(p,l)
poss(l,h)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (s2 / scorn-01
            :ARG0 (o / other
                  :mod (a / all)
                  :domain (a2 / and
                        :op1 (k / king)
                        :op2 (m / man
                              :mod (c / conceit))
                        :op3 (p2 / person
                              :ARG0-of (t / tipple-01))
                        :op4 (b / businessman)))
            :ARG1 (m2 / man
                  :mod (t2 / that)))
      :ARG2 p
      :time (c2 / continue-01
            :ARG0 p
            :ARG1 (j / journey-01
                  :ARG0 p)
            :extent (f / far
                  :ARG2-of (h / have-degree-91
                        :ARG1 j
                        :ARG3 (m3 / more)))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(s2,scorn-01)
instance(o,other)
instance(a,all)
instance(a2,and)
instance(k,king)
instance(m,man)
instance(c,conceit)
instance(p2,person)
instance(t,tipple-01)
instance(b,businessman)
instance(m2,man)
instance(t2,that)
instance(c2,continue-01)
instance(j,journey-01)
instance(f,far)
instance(h,have-degree-91)
instance(m3,more)
ARG0(s,p)
mod(p,l)
ARG1(s,s2)
ARG0(s2,o)
mod(o,a)
domain(o,a2)
op1(a2,k)
op2(a2,m)
mod(m,c)
op3(a2,p2)
ARG0-of(p2,t)
op4(a2,b)
ARG1(s2,m2)
mod(m2,t2)
ARG2(s,p)
time(s,c2)
ARG0(c2,p)
ARG1(c2,j)
ARG0(j,p)
extent(c2,f)
ARG2-of(f,h)
ARG1(h,j)
ARG3(h,m3)

(h2 / have-concession-91
      :ARG1 (s / seem-01 :polarity -
            :ARG1 (r / ridiculous-02
                  :ARG1 (p / person
                        :mod (o2 / only)
                        :ARG1-of (i2 / include-91
                              :ARG2 (t / they
                                    :mod (a / all)))
                        :domain (h / he)))
            :ARG2 (i / i)))

instance(h2,have-concession-91)
instance(s,seem-01)
instance(r,ridiculous-02)
instance(p,person)
instance(o2,only)
instance(i2,include-91)
instance(t,they)
instance(a,all)
instance(h,he)
instance(i,i)
ARG1(h2,s)
polarity(s,-)
ARG1(s,r)
ARG1(r,p)
mod(p,o2)
ARG1-of(p,i2)
ARG2(i2,t)
mod(t,a)
domain(p,h)
ARG2(s,i)

(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (t / think-01
                  :ARG0 (h / he)
                  :ARG2 (s / something
                        :mod (e / else)
                        :ARG1-of (d / differ-02
                              :ARG2 h)))))

instance(p,possible-01)
instance(c,cause-01)
instance(t,think-01)
instance(h,he)
instance(s,something)
instance(e,else)
instance(d,differ-02)
ARG1(p,c)
ARG0(c,t)
ARG0(t,h)
ARG2(t,s)
mod(s,e)
ARG1-of(s,d)
ARG2(d,h)

(a / and
      :op1 (b / breathe-02
            :ARG0 (h / he)
            :ARG1 (s / sigh-02
                  :manner (r / regret-01)))
      :op2 (s2 / say-01
            :ARG0 h
            :ARG1 (p / person
                  :mod (o2 / only)
                  :ARG1-of (i / include-91
                        :ARG2 (t / they
                              :mod (a2 / all)))
                  :domain (m2 / man
                        :mod (t2 / that))
                  :ARG2-of (m / make-01
                        :ARG0 h
                        :ARG1 (h2 / have-rel-role-91
                              :ARG0 p
                              :ARG1 h
                              :ARG2 (f / friend))
                        :ARG1-of (p2 / possible-01)))
            :ARG2 h
            :mod (a3 / again)))

instance(a,and)
instance(b,breathe-02)
instance(h,he)
instance(s,sigh-02)
instance(r,regret-01)
instance(s2,say-01)
instance(p,person)
instance(o2,only)
instance(i,include-91)
instance(t,they)
instance(a2,all)
instance(m2,man)
instance(t2,that)
instance(m,make-01)
instance(h2,have-rel-role-91)
instance(f,friend)
instance(p2,possible-01)
instance(a3,again)
op1(a,b)
ARG0(b,h)
ARG1(b,s)
manner(s,r)
op2(a,s2)
ARG0(s2,h)
ARG1(s2,p)
mod(p,o2)
ARG1-of(p,i)
ARG2(i,t)
mod(t,a2)
domain(p,m2)
mod(m2,t2)
ARG2-of(p,m)
ARG0(m,h)
ARG1(m,h2)
ARG0(h2,p)
ARG1(h2,h)
ARG2(h2,f)
ARG1-of(m,p2)
ARG2(s2,h)
mod(s2,a3)

(c / contrast-01
      :ARG2 (h2 / have-degree-91
            :ARG1 (p / planet
                  :poss (h / he))
            :ARG2 (s / small)
            :ARG3 (t / too)
            :mod (i2 / indeed)))

instance(c,contrast-01)
instance(h2,have-degree-91)
instance(p,planet)
instance(h,he)
instance(s,small)
instance(t,too)
instance(i2,indeed)
ARG2(c,h2)
ARG1(h2,p)
poss(p,h)
ARG2(h2,s)
ARG3(h2,t)
mod(h2,i2)

(r / room
  :poss (i / it)
  :beneficiary (p / person
                 :quant 2)
  :polarity -)

instance(r,room)
instance(i,it)
instance(p,person)
poss(r,i)
beneficiary(r,p)
quant(p,2)
polarity(r,-)

(d / dare-01 :polarity -
      :ARG0 (p / prince
            :mod (l / little))
      :ARG2 (c / confess-01
            :ARG0 p
            :ARG1 (h / have-degree-91
                  :ARG1 p
                  :ARG2 (s2 / sorry-01
                        :ARG1 p
                        :ARG2 (l2 / leave-11
                              :ARG0 p
                              :ARG1 p2))
                  :ARG3 (m / most)
                  :ARG1-of (c2 / cause-01
                        :ARG0 (b / bless-01
                              :ARG1 (p2 / planet
                                    :mod (t / this))
                              :ARG2 (s / sunset :quant 1440)
                              :frequency (r / rate-entity-91
                                    :ARG3 (t2 / temporal-quantity :quant 1
                                          :unit (d2 / day))))))))

instance(d,dare-01)
instance(p,prince)
instance(l,little)
instance(c,confess-01)
instance(h,have-degree-91)
instance(s2,sorry-01)
instance(l2,leave-11)
instance(m,most)
instance(c2,cause-01)
instance(b,bless-01)
instance(p2,planet)
instance(t,this)
instance(s,sunset)
instance(r,rate-entity-91)
instance(t2,temporal-quantity)
instance(d2,day)
polarity(d,-)
ARG0(d,p)
mod(p,l)
ARG2(d,c)
ARG0(c,p)
ARG1(c,h)
ARG1(h,p)
ARG2(h,s2)
ARG1(s2,p)
ARG2(s2,l2)
ARG0(l2,p)
ARG1(l2,p2)
ARG3(h,m)
ARG1-of(h,c2)
ARG0(c2,b)
ARG1(b,p2)
mod(p2,t)
ARG2(b,s)
quant(s,1440)
frequency(b,r)
ARG3(r,t2)
quant(t2,1)
unit(t2,d2)

(c / chapter
  :mod 15)

instance(c,chapter)
mod(c,15)

(h / have-degree-91
      :ARG1 (p / planet
            :ord (o / ordinal-entity :value 6))
      :ARG2 (l / large)
      :ARG3 (t / times :quant 10)
      :ARG4 (p2 / planet
            :mod (l2 / last)))

instance(h,have-degree-91)
instance(p,planet)
instance(o,ordinal-entity)
instance(l,large)
instance(t,times)
instance(p2,planet)
instance(l2,last)
ARG1(h,p)
ord(p,o)
value(o,6)
ARG2(h,l)
ARG3(h,t)
quant(t,10)
ARG4(h,p2)
mod(p2,l2)

(i / inhabit-01
  :ARG0 (g / gentleman
          :mod (o / old)
          :ARG0-of (w / write-01
                     :ARG1 (b / book
                             :mod (v / volume))))
  :ARG1 (i2 / it))

instance(i,inhabit-01)
instance(g,gentleman)
instance(o,old)
instance(w,write-01)
instance(b,book)
instance(v,volume)
instance(i2,it)
ARG0(i,g)
mod(g,o)
ARG0-of(g,w)
ARG1(w,b)
mod(b,v)
ARG1(i,i2)

(a / and
      :op1 (o / oh :mode expressive)
      :op2 (l / look-01 :mode imperative
            :ARG0 (y / you)))

instance(a,and)
instance(o,oh)
instance(l,look-01)
instance(y,you)
op1(a,o)
mode(o,expressive)
op2(a,l)
mode(l,imperative)
ARG0(l,y)

(e / exclaim-01
  :ARG0 (h / he)
  :ARG1 (p / person
          :ARG0-of (e2 / explore-01))
  :ARG2 h
  :time (s / see-01
          :ARG0 h
          :ARG1 (c / come-01
                  :ARG1 (p2 / prince
                          :mod (l / little)))))

instance(e,exclaim-01)
instance(h,he)
instance(p,person)
instance(e2,explore-01)
instance(s,see-01)
instance(c,come-01)
instance(p2,prince)
instance(l,little)
ARG0(e,h)
ARG1(e,p)
ARG0-of(p,e2)
ARG2(e,h)
time(e,s)
ARG0(s,h)
ARG1(s,c)
ARG1(c,p2)
mod(p2,l)

(a / and
  :op1 (s / sit-down-02
         :ARG1 (p2 / prince
                 :mod (l / little))
         :location (t / table))
  :op2 (p / pant-01
         :ARG0 p2
         :duration (l2 / little)))

instance(a,and)
instance(s,sit-down-02)
instance(p2,prince)
instance(l,little)
instance(t,table)
instance(p,pant-01)
instance(l2,little)
op1(a,s)
ARG1(s,p2)
mod(p2,l)
location(s,t)
op2(a,p)
ARG0(p,p2)
duration(p,l2)

(a2 / and
      :op1 (t / travel-01
            :ARG0 (h / he)
            :quant (m / much
                  :mod (s / so)))
      :op2 (t2 / travel-01
            :ARG0 h
            :ARG1 (f / far
                  :mod (s2 / so)))
      :time (a / already))

instance(a2,and)
instance(t,travel-01)
instance(h,he)
instance(m,much)
instance(s,so)
instance(t2,travel-01)
instance(f,far)
instance(s2,so)
instance(a,already)
op1(a2,t)
ARG0(t,h)
quant(t,m)
mod(m,s)
op2(a2,t2)
ARG0(t2,h)
ARG1(t2,f)
mod(f,s2)
time(a2,a)

(s / say-01
  :ARG0 (g / gentleman
          :mod (o / old))
  :ARG1 (c / come-01
          :ARG1 h
          :ARG3 (a / amr-unknown))
  :ARG2 (h / he))

instance(s,say-01)
instance(g,gentleman)
instance(o,old)
instance(c,come-01)
instance(a,amr-unknown)
instance(h,he)
ARG0(s,g)
mod(g,o)
ARG1(s,c)
ARG1(c,h)
ARG3(c,a)
ARG2(s,h)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (b / book
          :domain (a / amr-unknown)
          :mod (b2 / big)
          :mod (t / that)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(b,book)
instance(a,amr-unknown)
instance(b2,big)
instance(t,that)
ARG0(s,p)
mod(p,l)
ARG1(s,b)
domain(b,a)
mod(b,b2)
mod(b,t)

(d2 / do-02
  :ARG0 (y / you)
  :ARG1 (a / amr-unknown))

instance(d2,do-02)
instance(y,you)
instance(a,amr-unknown)
ARG0(d2,y)
ARG1(d2,a)

(s / say-01
  :ARG0 (g / gentleman
          :mod (o / old))
  :ARG1 (g2 / geographer
          :domain g)
  :ARG2 (h / he))

instance(s,say-01)
instance(g,gentleman)
instance(o,old)
instance(g2,geographer)
instance(h,he)
ARG0(s,g)
mod(g,o)
ARG1(s,g2)
domain(g2,g)
ARG2(s,h)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (g / geographer
            :domain (a2 / amr-unknown)))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(g,geographer)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,g)
domain(g,a2)

(s4 / scholar
      :domain (g / geographer)
      :ARG0-of (k / know-01
            :ARG1 (l / location
                  :location-of (a / and
                        :op1 (s2 / sea)
                        :op2 (r / river)
                        :op3 (t / town)
                        :op4 (m / mountain)
                        :op5 (d / desert)
                        :mod (a2 / all)))))

instance(s4,scholar)
instance(g,geographer)
instance(k,know-01)
instance(l,location)
instance(a,and)
instance(s2,sea)
instance(r,river)
instance(t,town)
instance(m,mountain)
instance(d,desert)
instance(a2,all)
domain(s4,g)
ARG0-of(s4,k)
ARG1(k,l)
location-of(l,a)
op1(a,s2)
op2(a,r)
op3(a,t)
op4(a,m)
op5(a,d)
mod(a,a2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (i / interest-01
            :ARG0 (t2 / that)
            :ARG1 p
            :degree (v / very)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(i,interest-01)
instance(t2,that)
instance(v,very)
ARG0(s,p)
mod(p,l)
ARG1(s,i)
ARG0(i,t2)
ARG1(i,p)
degree(i,v)

(m2 / man
      :ARG0-of (h2 / have-03
            :ARG1 (p2 / profession
                  :ARG1-of (r / real-04)))
      :time (a / at-last))

instance(m2,man)
instance(h2,have-03)
instance(p2,profession)
instance(r,real-04)
instance(a,at-last)
ARG0-of(m2,h2)
ARG1(h2,p2)
ARG1-of(p2,r)
time(m2,a)

(a / and
      :op2 (l / look-01
            :ARG0 (h / he)
            :ARG1 (p / planet
                  :poss (g / geographer))
            :direction (a2 / around
                  :op1 h)))

instance(a,and)
instance(l,look-01)
instance(h,he)
instance(p,planet)
instance(g,geographer)
instance(a2,around)
op2(a,l)
ARG0(l,h)
ARG1(l,p)
poss(p,g)
direction(l,a2)
op1(a2,h)

(h2 / have-degree-91
      :ARG1 (i / it)
      :ARG2 (a / and
            :op1 (m2 / magnificent)
            :op2 (s / stately))
      :ARG3 (m / most)
      :ARG5 (p / planet
            :ARG1-of (s2 / see-01
                  :ARG0 (h / he)
                  :time (e / ever))))

instance(h2,have-degree-91)
instance(i,it)
instance(a,and)
instance(m2,magnificent)
instance(s,stately)
instance(m,most)
instance(p,planet)
instance(s2,see-01)
instance(h,he)
instance(e,ever)
ARG1(h2,i)
ARG2(h2,a)
op1(a,m2)
op2(a,s)
ARG3(h2,m)
ARG5(h2,p)
ARG1-of(p,s2)
ARG0(s2,h)
time(s2,e)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (b / beautiful-02
            :ARG1 (p / planet
                  :poss (y / you))
            :degree (v / very)))

instance(s,say-01)
instance(h,he)
instance(b,beautiful-02)
instance(p,planet)
instance(y,you)
instance(v,very)
ARG0(s,h)
ARG1(s,b)
ARG1(b,p)
poss(p,y)
degree(b,v)

(h / have-03
      :ARG0 (i / it)
      :ARG1 (o / ocean
            :mod (a / any))
      :polarity (a2 / amr-unknown))

instance(h,have-03)
instance(i,it)
instance(o,ocean)
instance(a,any)
instance(a2,amr-unknown)
ARG0(h,i)
ARG1(h,o)
mod(o,a)
polarity(h,a2)

(s / say-01
  :ARG0 (g / geographer)
  :ARG1 (p / possible-01
          :ARG1 (t / tell-01
                    :ARG0 g
                    :ARG2 (y / you))
          :polarity -))

instance(s,say-01)
instance(g,geographer)
instance(p,possible-01)
instance(t,tell-01)
instance(y,you)
ARG0(s,g)
ARG1(s,p)
ARG1(p,t)
ARG0(t,g)
ARG2(t,y)
polarity(p,-)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(d / disappoint-01
      :ARG1 (p / prince
            :mod (l / little)))

instance(d,disappoint-01)
instance(p,prince)
instance(l,little)
ARG1(d,p)
mod(p,l)

(h2 / have-03 :polarity (a2 / amr-unknown)
      :ARG0 (i / it)
      :ARG1 (m / mountain
            :mod (a / any)))

instance(h2,have-03)
instance(a2,amr-unknown)
instance(i,it)
instance(m,mountain)
instance(a,any)
polarity(h2,a2)
ARG0(h2,i)
ARG1(h2,m)
mod(m,a)

(s / say-01
  :ARG0 (g / geographer)
  :ARG1 (p / possible-01
          :ARG1 (t / tell-01
                    :ARG0 g
                    :ARG2 (y / you))
          :polarity -))

instance(s,say-01)
instance(g,geographer)
instance(p,possible-01)
instance(t,tell-01)
instance(y,you)
ARG0(s,g)
ARG1(s,p)
ARG1(p,t)
ARG0(t,g)
ARG2(t,y)
polarity(p,-)

(a3 / and
      :op2 (a4 / and
            :op1 (t2 / town)
            :op2 (r2 / river)
            :op3 (d2 / desert)
            :polarity (a / amr-unknown)))

instance(a3,and)
instance(a4,and)
instance(t2,town)
instance(r2,river)
instance(d2,desert)
instance(a,amr-unknown)
op2(a3,a4)
op1(a4,t2)
op2(a4,r2)
op3(a4,d2)
polarity(a4,a)

(p2 / possible-01 :polarity -
      :ARG1 (t / tell-01
            :ARG0 (i / i)
            :ARG1 (t2 / that)
            :ARG2 (y / you))
      :mod (e / either))

instance(p2,possible-01)
instance(t,tell-01)
instance(i,i)
instance(t2,that)
instance(y,you)
instance(e,either)
polarity(p2,-)
ARG1(p2,t)
ARG0(t,i)
ARG1(t,t2)
ARG2(t,y)
mod(p2,e)

(c / contrast-01 :mode expressive
      :ARG2 (g2 / geographer
            :domain (y2 / you)))

instance(c,contrast-01)
instance(g2,geographer)
instance(y2,you)
mode(c,expressive)
ARG2(c,g2)
domain(g2,y2)

(s / say-01
      :ARG0 (g / geographer)
      :ARG1 (e / exact))

instance(s,say-01)
instance(g,geographer)
instance(e,exact)
ARG0(s,g)
ARG1(s,e)

(c / contrast-01
      :ARG2 (p / person :polarity -
            :domain (i / i)
            :ARG0-of (e / explore-01)))

instance(c,contrast-01)
instance(p,person)
instance(i,i)
instance(e,explore-01)
ARG2(c,p)
polarity(p,-)
domain(p,i)
ARG0-of(p,e)

(h2 / have-03 :polarity -
      :ARG0 (i / i)
      :ARG1 (p2 / person
            :ARG1-of (s / single-02)
            :ARG0-of (e / explore-01)
            :location (p3 / planet
                  :poss i)))

instance(h2,have-03)
instance(i,i)
instance(p2,person)
instance(s,single-02)
instance(e,explore-01)
instance(p3,planet)
polarity(h2,-)
ARG0(h2,i)
ARG1(h2,p2)
ARG1-of(p2,s)
ARG0-of(p2,e)
location(p2,p3)
poss(p3,i)

(p2 / person
      :domain (g / geographer :polarity -)
      :ARG0-of (g2 / go-02
            :purpose (c / count-01
                  :ARG0 g
                  :ARG1 (a / and
                        :op1 (t / town)
                        :op2 (r / river)
                        :op3 (m / mountain)
                        :op4 (o2 / ocean)
                        :op5 (d / desert)
                        :op6 (s2 / sea)))))

instance(p2,person)
instance(g,geographer)
instance(g2,go-02)
instance(c,count-01)
instance(a,and)
instance(t,town)
instance(r,river)
instance(m,mountain)
instance(o2,ocean)
instance(d,desert)
instance(s2,sea)
domain(p2,g)
polarity(g,-)
ARG0-of(p2,g2)
purpose(g2,c)
ARG0(c,g)
ARG1(c,a)
op1(a,t)
op2(a,r)
op3(a,m)
op4(a,o2)
op5(a,d)
op6(a,s2)

(h / have-degree-91
      :ARG1 (g / geographer)
      :ARG2 (i2 / important-01
            :ARG1 g)
      :ARG3 (t / too
            :quant (m / much))
      :ARG6 (g2 / go-01
            :ARG1 g
            :purpose (l / loaf-01
                  :ARG0 g
                  :path (a / about))))

instance(h,have-degree-91)
instance(g,geographer)
instance(i2,important-01)
instance(t,too)
instance(m,much)
instance(g2,go-01)
instance(l,loaf-01)
instance(a,about)
ARG1(h,g)
ARG2(h,i2)
ARG1(i2,g)
ARG3(h,t)
quant(t,m)
ARG6(h,g2)
ARG1(g2,g)
purpose(g2,l)
ARG0(l,g)
path(l,a)

(l / leave-11 :polarity -
      :ARG0 (h / he)
      :ARG1 (d / desk
            :poss h))

instance(l,leave-11)
instance(h,he)
instance(d,desk)
polarity(l,-)
ARG0(l,h)
ARG1(l,d)
poss(d,h)

(c / contrast-01
      :ARG2 (r / receive-01
            :ARG0 (h / he)
            :ARG1 (p / person
                  :ARG0-of (e / explore-01))
            :location (s / study
                  :poss h)))

instance(c,contrast-01)
instance(r,receive-01)
instance(h,he)
instance(p,person)
instance(e,explore-01)
instance(s,study)
ARG2(c,r)
ARG0(r,h)
ARG1(r,p)
ARG0-of(p,e)
location(r,s)
poss(s,h)

(a3 / and
      :op1 (q2 / question-01
            :ARG0 (h / he)
            :ARG2 (t / they))
      :op2 (n / note-02
            :ARG0 h
            :ARG1 (t3 / thing
                  :ARG1-of (r / recall-02)
                  :source (t2 / travel-01
                        :ARG0 t))))

instance(a3,and)
instance(q2,question-01)
instance(h,he)
instance(t,they)
instance(n,note-02)
instance(t3,thing)
instance(r,recall-02)
instance(t2,travel-01)
op1(a3,q2)
ARG0(q2,h)
ARG2(q2,t)
op2(a3,n)
ARG0(n,h)
ARG1(n,t3)
ARG1-of(t3,r)
source(t3,t2)
ARG0(t2,t)

(a3 / and
      :op2 (o / order-02
            :ARG0 (g / geographer)
            :ARG1 (i / inquire-01
                  :ARG1 (c / character
                        :ARG1-of (m / moral-02)
                        :poss (p / person
                              :ARG0-of (e / explore-01)
                              :mod (t2 / that))))
            :condition (i4 / interest-01
                  :ARG1 g
                  :ARG2 (t4 / thing
                        :ARG1-of (r2 / recall-02)
                        :poss (p2 / person
                              :ARG0-of (e2 / explore-01)
                              :mod (a / any)
                              :ARG1-of (i5 / include-91
                                    :ARG2 (t5 / they)))))))

instance(a3,and)
instance(o,order-02)
instance(g,geographer)
instance(i,inquire-01)
instance(c,character)
instance(m,moral-02)
instance(p,person)
instance(e,explore-01)
instance(t2,that)
instance(i4,interest-01)
instance(t4,thing)
instance(r2,recall-02)
instance(p2,person)
instance(e2,explore-01)
instance(a,any)
instance(i5,include-91)
instance(t5,they)
op2(a3,o)
ARG0(o,g)
ARG1(o,i)
ARG1(i,c)
ARG1-of(c,m)
poss(c,p)
ARG0-of(p,e)
mod(p,t2)
condition(o,i4)
ARG1(i4,g)
ARG2(i4,t4)
ARG1-of(t4,r2)
poss(t4,p2)
ARG0-of(p2,e2)
mod(p2,a)
ARG1-of(p2,i5)
ARG2(i5,t5)

(t2 / that
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown)))

instance(t2,that)
instance(c,cause-01)
instance(a,amr-unknown)
ARG1-of(t2,c)
ARG0(c,a)

(c / cause-01
      :ARG1 (l / lie-08
            :ARG0 (p2 / person
                  :ARG0-of (e2 / explore-01))
            :condition-of (b3 / bring-01
                  :ARG1 (d2 / disaster)
                  :ARG2 (b4 / book
                        :poss (g2 / geographer)))))

instance(c,cause-01)
instance(l,lie-08)
instance(p2,person)
instance(e2,explore-01)
instance(b3,bring-01)
instance(d2,disaster)
instance(b4,book)
instance(g2,geographer)
ARG1(c,l)
ARG0(l,p2)
ARG0-of(p2,e2)
condition-of(l,b3)
ARG1(b3,d2)
ARG2(b3,b4)
poss(b4,g2)

(c / cause-01
      :ARG0 (p / person
            :ARG0-of (e / explore-01)
            :ARG0-of (d / drink-01
                  :ARG1-of (h / have-quant-91
                        :ARG2 (m / much)
                        :ARG3 (t2 / too))))
      :ARG1 (t / thing
            :ARG1-of (s / same-01)))

instance(c,cause-01)
instance(p,person)
instance(e,explore-01)
instance(d,drink-01)
instance(h,have-quant-91)
instance(m,much)
instance(t2,too)
instance(t,thing)
instance(s,same-01)
ARG0(c,p)
ARG0-of(p,e)
ARG0-of(p,d)
ARG1-of(d,h)
ARG2(h,m)
ARG3(h,t2)
ARG1(c,t)
ARG1-of(t,s)

(a / ask-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (t / that
          :ARG1-of (c / cause-01
                     :ARG0 (a2 / amr-unknown))))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(t,that)
instance(c,cause-01)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,t)
ARG1-of(t,c)
ARG0(c,a2)

(s3 / see-01
      :ARG0 (m2 / man
            :ARG1-of (i2 / intoxicate-01))
      :ARG2 (d / double)
      :ARG0-of (c2 / cause-01
            :ARG1 (t2 / thing)))

instance(s3,see-01)
instance(m2,man)
instance(i2,intoxicate-01)
instance(d,double)
instance(c2,cause-01)
instance(t2,thing)
ARG0(s3,m2)
ARG1-of(m2,i2)
ARG2(s3,d)
ARG0-of(s3,c2)
ARG1(c2,t2)

(t / thing
      :ARG0-of (c / cause-01
            :ARG1 (n2 / note-02
                  :ARG0 (g / geographer)
                  :ARG1 (m / mountain :quant 2
                        :location (p / place
                              :location-of (m2 / mountain :quant 1
                                    :mod (o2 / only))))
                  :time (t2 / then))))

instance(t,thing)
instance(c,cause-01)
instance(n2,note-02)
instance(g,geographer)
instance(m,mountain)
instance(p,place)
instance(m2,mountain)
instance(o2,only)
instance(t2,then)
ARG0-of(t,c)
ARG1(c,n2)
ARG0(n2,g)
ARG1(n2,m)
quant(m,2)
location(m,p)
location-of(p,m2)
quant(m2,1)
mod(m2,o2)
time(n2,t2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (k / know-02
            :ARG0 p
            :ARG1 (s2 / someone
                  :ARG1-of (m / make-06
                        :ARG2 (p2 / person
                              :ARG0-of (e / explore-01)
                              :ARG1-of (b / bad-02
                                    :ARG2 e))))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(k,know-02)
instance(s2,someone)
instance(m,make-06)
instance(p2,person)
instance(e,explore-01)
instance(b,bad-02)
ARG0(s,p)
mod(p,l)
ARG1(s,k)
ARG0(k,p)
ARG1(k,s2)
ARG1-of(s2,m)
ARG2(m,p2)
ARG0-of(p2,e)
ARG1-of(p2,b)
ARG2(b,e)

(p2 / possible-01
      :ARG1 (t / that))

instance(p2,possible-01)
instance(t,that)
ARG1(p2,t)

(o2 / order-01
      :ARG1 (i / inquire-01
            :ARG1 (t / thing
                  :ARG1-of (d / discover-01
                        :ARG0 p)))
      :time (s3 / show-01
            :ARG1 (g / good-02
                  :ARG1 (c / character
                        :poss (p / person
                              :ARG0-of (e / explore-01))
                        :ARG1-of (m / moral-02))))
      :time (t3 / then))

instance(o2,order-01)
instance(i,inquire-01)
instance(t,thing)
instance(d,discover-01)
instance(s3,show-01)
instance(g,good-02)
instance(c,character)
instance(p,person)
instance(e,explore-01)
instance(m,moral-02)
instance(t3,then)
ARG1(o2,i)
ARG1(i,t)
ARG1-of(t,d)
ARG0(d,p)
time(o2,s3)
ARG1(s3,g)
ARG1(g,c)
poss(c,p)
ARG0-of(p,e)
ARG1-of(c,m)
time(o2,t3)

(g / go-02 :polarity (a / amr-unknown)
      :ARG0 (o / one)
      :purpose (s2 / see-01
            :ARG0 o
            :ARG1 (i / it)))

instance(g,go-02)
instance(a,amr-unknown)
instance(o,one)
instance(s2,see-01)
instance(i,it)
polarity(g,a)
ARG0(g,o)
purpose(g,s2)
ARG0(s2,o)
ARG1(s2,i)

(n / no)

instance(n,no)

(h / have-degree-91
      :ARG1 (t / that)
      :ARG2 (c2 / complicate-01
            :ARG1 t)
      :ARG3 (t2 / too))

instance(h,have-degree-91)
instance(t,that)
instance(c2,complicate-01)
instance(t2,too)
ARG1(h,t)
ARG2(h,c2)
ARG1(c2,t)
ARG3(h,t2)

(c / contrast-01
      :ARG2 (r / require-01
            :ARG0 (o / one)
            :ARG1 (f / furnish-01
                  :ARG0 p
                  :ARG1 (p2 / prove-01))
            :ARG2 (p / person
                  :ARG0-of (e / explore-01))))

instance(c,contrast-01)
instance(r,require-01)
instance(o,one)
instance(f,furnish-01)
instance(p2,prove-01)
instance(p,person)
instance(e,explore-01)
ARG2(c,r)
ARG0(r,o)
ARG1(r,f)
ARG0(f,p)
ARG1(f,p2)
ARG2(r,p)
ARG0-of(p,e)

(e2 / exemplify-01
      :ARG0 (r / require-01
            :ARG0 (o / one)
            :ARG1 (b / bring-01
                  :ARG1 (s2 / stone
                        :mod (l2 / large))
                  :direction (b2 / back)
                  :source m)
            :condition (d / discover-01
                  :ARG1 (m / mountain
                        :mod (l / large))
                  :ARG1-of (q / question-01))))

instance(e2,exemplify-01)
instance(r,require-01)
instance(o,one)
instance(b,bring-01)
instance(s2,stone)
instance(l2,large)
instance(b2,back)
instance(d,discover-01)
instance(m,mountain)
instance(l,large)
instance(q,question-01)
ARG0(e2,r)
ARG0(r,o)
ARG1(r,b)
ARG1(b,s2)
mod(s2,l2)
direction(b,b2)
source(b,m)
condition(r,d)
ARG1(d,m)
mod(m,l)
ARG1-of(d,q)

(s / stir-02
  :ARG1 (g / geographer)
  :ARG3 (e / excite-01)
  :manner (s2 / sudden))

instance(s,stir-02)
instance(g,geographer)
instance(e,excite-01)
instance(s2,sudden)
ARG1(s,g)
ARG3(s,e)
manner(s,s2)

(c3 / contrast-01
      :ARG2 (c / come-01
            :ARG1 (y / you)
            :ARG3 (a / away
                  :extent (f / far))))

instance(c3,contrast-01)
instance(c,come-01)
instance(y,you)
instance(a,away)
instance(f,far)
ARG2(c3,c)
ARG1(c,y)
ARG3(c,a)
extent(a,f)

(p2 / person
      :ARG0-of (e / explore-01)
      :domain (y / you))

instance(p2,person)
instance(e,explore-01)
instance(y,you)
ARG0-of(p2,e)
domain(p2,y)

(d2 / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / planet
            :source-of y)
      :beneficiary (i / i))

instance(d2,describe-01)
instance(y,you)
instance(p,planet)
instance(i,i)
mode(d2,imperative)
ARG0(d2,y)
ARG1(d2,p)
source-of(p,y)
beneficiary(d2,i)

(a / and
      :op2 (s / sharpen-01
            :ARG0 g
            :ARG1 (p / pencil
                  :poss g)
            :time (a3 / after
                  :op1 (o / open-01
                        :ARG0 (g / geographer)
                        :ARG1 (r / register-02
                              :ARG0 g
                              :mod (b / big))))))

instance(a,and)
instance(s,sharpen-01)
instance(p,pencil)
instance(a3,after)
instance(o,open-01)
instance(g,geographer)
instance(r,register-02)
instance(b,big)
op2(a,s)
ARG0(s,g)
ARG1(s,p)
poss(p,g)
time(s,a3)
op1(a3,o)
ARG0(o,g)
ARG1(o,r)
ARG0(r,g)
mod(r,b)

(p / put-01
      :ARG1 (t / thing
            :ARG1-of (r / recite-01
                  :ARG0 (p2 / person
                        :ARG0-of (e / explore-01))))
      :direction (d / down)
      :time (f / first)
      :instrument (p3 / pencil))

instance(p,put-01)
instance(t,thing)
instance(r,recite-01)
instance(p2,person)
instance(e,explore-01)
instance(d,down)
instance(f,first)
instance(p3,pencil)
ARG1(p,t)
ARG1-of(t,r)
ARG0(r,p2)
ARG0-of(p2,e)
direction(p,d)
time(p,f)
instrument(p,p3)

(w / wait-01
      :ARG1 (o / one)
      :time (u / until
            :op1 (f / furnish-01
                  :ARG0 (p2 / person
                        :ARG0-of (e / explore-01))
                  :ARG1 (p / prove-01)))
      :time (b / before
            :op1 (p3 / put-01
                  :ARG0 o
                  :ARG1 (t / they)
                  :direction (d / down)
                  :instrument (i / ink))))

instance(w,wait-01)
instance(o,one)
instance(u,until)
instance(f,furnish-01)
instance(p2,person)
instance(e,explore-01)
instance(p,prove-01)
instance(b,before)
instance(p3,put-01)
instance(t,they)
instance(d,down)
instance(i,ink)
ARG1(w,o)
time(w,u)
op1(u,f)
ARG0(f,p2)
ARG0-of(p2,e)
ARG1(f,p)
time(w,b)
op1(b,p3)
ARG0(p3,o)
ARG1(p3,t)
direction(p3,d)
instrument(p3,i)

(r / request-response-91
      :ARG0 (g / geographer)
      :manner (e / expect-01
            :ARG0 g))

instance(r,request-response-91)
instance(g,geographer)
instance(e,expect-01)
ARG0(r,g)
manner(r,e)
ARG0(e,g)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (a / and
            :op1 (o / oh
                  :mode expressive)
            :op2 (i2 / interest-01
                  :ARG0 (l2 / location
                        :location-of (l3 / live-01
                              :ARG0 p))
                  :ARG1 p
                  :degree (v / very)
                  :polarity -)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(a,and)
instance(o,oh)
instance(i2,interest-01)
instance(l2,location)
instance(l3,live-01)
instance(v,very)
ARG0(s,p)
mod(p,l)
ARG1(s,a)
op1(a,o)
mode(o,expressive)
op2(a,i2)
ARG0(i2,l2)
location-of(l2,l3)
ARG0(l3,p)
ARG1(i2,p)
degree(i2,v)
polarity(i2,-)

(s3 / small
      :domain (i / it
            :mod (a / all))
      :degree (s / so))

instance(s3,small)
instance(i,it)
instance(a,all)
instance(s,so)
domain(s3,i)
mod(i,a)
degree(s3,s)

(h2 / have-03
      :ARG0 (i / i)
      :ARG1 (v / volcano
            :quant 3))

instance(h2,have-03)
instance(i,i)
instance(v,volcano)
ARG0(h2,i)
ARG1(h2,v)
quant(v,3)

(a3 / and
      :op1 (a / activity-06
            :ARG0 (v / volcano :quant 2))
      :op2 (e / extinct
            :domain (o / other)))

instance(a3,and)
instance(a,activity-06)
instance(v,volcano)
instance(e,extinct)
instance(o,other)
op1(a3,a)
ARG0(a,v)
quant(v,2)
op2(a3,e)
domain(e,o)

(c / contrast-01
      :ARG2 (k / know-01
            :ARG0 (o / one)
            :polarity -
            :time (e / ever)))

instance(c,contrast-01)
instance(k,know-01)
instance(o,one)
instance(e,ever)
ARG2(c,k)
ARG0(k,o)
polarity(k,-)
time(k,e)

(s / say-01
      :ARG0 (g / geographer)
      :ARG1 (k / know-01 :polarity -
            :ARG0 (o / one)
            :time (e / ever)))

instance(s,say-01)
instance(g,geographer)
instance(k,know-01)
instance(o,one)
instance(e,ever)
ARG0(s,g)
ARG1(s,k)
polarity(k,-)
ARG0(k,o)
time(k,e)

(h2 / have-03
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG1-of (f / flower-01))
      :mod (a2 / also))

instance(h2,have-03)
instance(i,i)
instance(t,thing)
instance(f,flower-01)
instance(a2,also)
ARG0(h2,i)
ARG1(h2,t)
ARG1-of(t,f)
mod(h2,a2)

(s / say-01
  :ARG0 (g / geographer)
  :ARG1 (r / record-01
          :ARG0 (w / we)
          :ARG1 (t / thing
                  :ARG1-of (f / flower-01))
          :polarity -))

instance(s,say-01)
instance(g,geographer)
instance(r,record-01)
instance(w,we)
instance(t,thing)
instance(f,flower-01)
ARG0(s,g)
ARG1(s,r)
ARG0(r,w)
ARG1(r,t)
ARG1-of(t,f)
polarity(r,-)

(t2 / that
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown)))

instance(t2,that)
instance(c,cause-01)
instance(a,amr-unknown)
ARG1-of(t2,c)
ARG0(c,a)

(h / have-degree-91
      :ARG1 (t / thing
            :ARG1-of (f / flower-01))
      :ARG2 (b / beautiful-02
            :ARG1 t)
      :ARG3 (m / most)
      :ARG5 (t2 / thing
            :location (p / planet
                  :source-of (i / i))))

instance(h,have-degree-91)
instance(t,thing)
instance(f,flower-01)
instance(b,beautiful-02)
instance(m,most)
instance(t2,thing)
instance(p,planet)
instance(i,i)
ARG1(h,t)
ARG1-of(t,f)
ARG2(h,b)
ARG1(b,t)
ARG3(h,m)
ARG5(h,t2)
location(t2,p)
source-of(p,i)

(s / say-01
      :ARG0 (g / geographer)
      :ARG1 (r / record-01 :polarity -
            :ARG0 (w / we)
            :ARG1 (t / they)
            :ARG1-of (c / cause-01
                  :ARG0 (e / ephemeral
                        :domain t))))

instance(s,say-01)
instance(g,geographer)
instance(r,record-01)
instance(w,we)
instance(t,they)
instance(c,cause-01)
instance(e,ephemeral)
ARG0(s,g)
ARG1(s,r)
polarity(r,-)
ARG0(r,w)
ARG1(r,t)
ARG1-of(r,c)
ARG0(c,e)
domain(e,t)

(m2 / mean-01
      :ARG1 (e / ephemeral)
      :ARG2 (a / amr-unknown))

instance(m2,mean-01)
instance(e,ephemeral)
instance(a,amr-unknown)
ARG1(m2,e)
ARG2(m2,a)

(s / say-01
      :ARG0 (g / geographer)
      :ARG1 (b / book
            :ARG1-of (h / have-degree-91
                  :ARG2 (c / concern-02
                        :ARG1 (m2 / matter
                              :ARG1-of (c2 / consequential-01)))
                  :ARG3 (m / most)
                  :ARG5 (b2 / book
                        :mod (a / all)))
            :domain (g2 / geography)))

instance(s,say-01)
instance(g,geographer)
instance(b,book)
instance(h,have-degree-91)
instance(c,concern-02)
instance(m2,matter)
instance(c2,consequential-01)
instance(m,most)
instance(b2,book)
instance(a,all)
instance(g2,geography)
ARG0(s,g)
ARG1(s,b)
ARG1-of(b,h)
ARG2(h,c)
ARG1(c,m2)
ARG1-of(m2,c2)
ARG3(h,m)
ARG5(h,b2)
mod(b2,a)
domain(b,g2)

(b / become-01
      :ARG1 (t / they)
      :ARG2 (f / fashion
            :mod (o / old))
      :time (e / ever)
      :polarity -)

instance(b,become-01)
instance(t,they)
instance(f,fashion)
instance(o,old)
instance(e,ever)
ARG1(b,t)
ARG2(b,f)
mod(f,o)
time(b,e)
polarity(b,-)

(c / change-01
      :ARG0 (m / mountain)
      :ARG1 (l / location
            :ARG2-of (p / position-01
                  :ARG1 m))
      :ARG1-of (r / rare-02
            :degree (v / very)))

instance(c,change-01)
instance(m,mountain)
instance(l,location)
instance(p,position-01)
instance(r,rare-02)
instance(v,very)
ARG0(c,m)
ARG1(c,l)
ARG2-of(l,p)
ARG1(p,m)
ARG1-of(c,r)
degree(r,v)

(e / empty-01
      :ARG0 (o / ocean)
      :ARG1 o
      :ARG2 (w / water
            :poss o)
      :ARG1-of (r / rare-02
            :degree (v / very)))

instance(e,empty-01)
instance(o,ocean)
instance(w,water)
instance(r,rare-02)
instance(v,very)
ARG0(e,o)
ARG1(e,o)
ARG2(e,w)
poss(w,o)
ARG1-of(e,r)
degree(r,v)

(w3 / write-01
      :ARG0 (w2 / we)
      :ARG1 (t / thing
            :mod (e / eternal)))

instance(w3,write-01)
instance(w2,we)
instance(t,thing)
instance(e,eternal)
ARG0(w3,w2)
ARG1(w3,t)
mod(t,e)

(i / interrupt-01
      :ARG0 (p2 / prince
            :mod (l / little))
      :ARG2 (c / contrast-01
            :ARG2 (p / possible-01
                  :ARG1 (c2 / come-04
                        :ARG1 (v / volcano
                              :mod (e / extinct))
                        :ARG2 (t / thing
                              :ARG1-of (l3 / live-01))
                        :mod (a / again)))))

instance(i,interrupt-01)
instance(p2,prince)
instance(l,little)
instance(c,contrast-01)
instance(p,possible-01)
instance(c2,come-04)
instance(v,volcano)
instance(e,extinct)
instance(t,thing)
instance(l3,live-01)
instance(a,again)
ARG0(i,p2)
mod(p2,l)
ARG2(i,c)
ARG2(c,p)
ARG1(p,c2)
ARG1(c2,v)
mod(v,e)
ARG2(c2,t)
ARG1-of(t,l3)
mod(c2,a)

(m2 / mean-01
      :ARG1 (e / ephemeral)
      :ARG2 (a / amr-unknown))

instance(m2,mean-01)
instance(e,ephemeral)
instance(a,amr-unknown)
ARG1(m2,e)
ARG2(m2,a)

(s / say-01
      :ARG0 (g / geographer)
      :ARG1 (s2 / same-01
            :ARG1 (e2 / extinct
                  :domain (v / volcano))
            :ARG2 (l2 / live-01
                  :ARG0 v)
            :ARG3 (w / we)))

instance(s,say-01)
instance(g,geographer)
instance(s2,same-01)
instance(e2,extinct)
instance(v,volcano)
instance(l2,live-01)
instance(w,we)
ARG0(s,g)
ARG1(s,s2)
ARG1(s2,e2)
domain(e2,v)
ARG2(s2,l2)
ARG0(l2,v)
ARG3(s2,w)

(m3 / mountain
      :domain (t / thing
            :ARG1-of (m2 / matter-01
                  :ARG2 (w / we))))

instance(m3,mountain)
instance(t,thing)
instance(m2,matter-01)
instance(w,we)
domain(m3,t)
ARG1-of(t,m2)
ARG2(m2,w)

(c2 / change-01
      :ARG1 (i / it)
      :polarity -)

instance(c2,change-01)
instance(i,it)
ARG1(c2,i)
polarity(c2,-)

(r / repeat-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG0-of (l2 / let-01 :polarity -
                  :ARG1 (g / go-02
                        :ARG0 (t / thing
                              :ARG1-of (q / question-01
                                    :ARG0 p)))
                  :time (o / once
                        :op1 (a2 / ask-01
                              :ARG1 t))
                  :time (e2 / ever
                        :duration (t2 / thing
                              :ARG1-of (l3 / live-01
                                    :ARG0 p)))))
      :ARG1 (c / contrast-01
            :ARG2 (m / mean-01
                  :ARG1 (e / ephemeral)
                  :ARG2 (a / amr-unknown))))

instance(r,repeat-01)
instance(p,prince)
instance(l,little)
instance(l2,let-01)
instance(g,go-02)
instance(t,thing)
instance(q,question-01)
instance(o,once)
instance(a2,ask-01)
instance(e2,ever)
instance(t2,thing)
instance(l3,live-01)
instance(c,contrast-01)
instance(m,mean-01)
instance(e,ephemeral)
instance(a,amr-unknown)
ARG0(r,p)
mod(p,l)
ARG0-of(p,l2)
polarity(l2,-)
ARG1(l2,g)
ARG0(g,t)
ARG1-of(t,q)
ARG0(q,p)
time(l2,o)
op1(o,a2)
ARG1(a2,t)
time(l2,e2)
duration(e2,t2)
ARG1-of(t2,l3)
ARG0(l3,p)
ARG1(r,c)
ARG2(c,m)
ARG1(m,e)
ARG2(m,a)

(m2 / mean-01
      :ARG1 (i / it)
      :ARG2 (t / thing
            :ARG1-of (e / endanger-01
                  :ARG1-of (c / cause-01
                        :ARG0 (d / disappear-01
                              :ARG1-of (s / speedy-03))))))

instance(m2,mean-01)
instance(i,it)
instance(t,thing)
instance(e,endanger-01)
instance(c,cause-01)
instance(d,disappear-01)
instance(s,speedy-03)
ARG1(m2,i)
ARG2(m2,t)
ARG1-of(t,e)
ARG1-of(e,c)
ARG0(c,d)
ARG1-of(d,s)

(e2 / endanger-01 :polarity (a / amr-unknown)
      :ARG1 (f2 / flower
            :poss (i / i))
      :ARG1-of (c / cause-01
            :ARG0 (d / disappear-01
                  :ARG1-of (s / speedy-03))))

instance(e2,endanger-01)
instance(a,amr-unknown)
instance(f2,flower)
instance(i,i)
instance(c,cause-01)
instance(d,disappear-01)
instance(s,speedy-03)
polarity(e2,a)
ARG1(e2,f2)
poss(f2,i)
ARG1-of(e2,c)
ARG0(c,d)
ARG1-of(d,s)

(c2 / certain
      :domain (i2 / it))

instance(c2,certain)
instance(i2,it)
domain(c2,i2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (a / and
            :op1 (e / ephemeral
                  :domain (f2 / flower
                        :poss p))
            :op2 (h / have-03
                  :ARG0 f2
                  :ARG1 (t2 / thorn
                        :ARG2-of (d / defend-01
                              :ARG0 f2
                              :ARG1 f2
                              :ARG3 (w / world))
                        :quant (o / only :op1 4))))
      :ARG2 p)

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(a,and)
instance(e,ephemeral)
instance(f2,flower)
instance(h,have-03)
instance(t2,thorn)
instance(d,defend-01)
instance(w,world)
instance(o,only)
ARG0(s,p)
mod(p,l)
ARG1(s,a)
op1(a,e)
domain(e,f2)
poss(f2,p)
op2(a,h)
ARG0(h,f2)
ARG1(h,t2)
ARG2-of(t2,d)
ARG0(d,f2)
ARG1(d,f2)
ARG3(d,w)
quant(t2,o)
op1(o,4)
ARG2(s,p)

(a4 / and
      :op2 (l / leave-12
            :ARG0 (i / i)
            :ARG1 (s / she)
            :ARG2 (p / planet
                  :source-of i)
            :ARG0-of (c / cause-01
                  :ARG1 (a2 / alone
                        :degree (a3 / all)
                        :domain s))))

instance(a4,and)
instance(l,leave-12)
instance(i,i)
instance(s,she)
instance(p,planet)
instance(c,cause-01)
instance(a2,alone)
instance(a3,all)
op2(a4,l)
ARG0(l,i)
ARG1(l,s)
ARG2(l,p)
source-of(p,i)
ARG0-of(l,c)
ARG1(c,a2)
degree(a2,a3)
domain(a2,s)

(m / moment
  :domain (t / that)
  :mod (r / regret-01)
  :ord (o / ordinal-entity :value 1)
  :poss (h / he))

instance(m,moment)
instance(t,that)
instance(r,regret-01)
instance(o,ordinal-entity)
instance(h,he)
domain(m,t)
mod(m,r)
ord(m,o)
value(o,1)
poss(m,h)

(c / contrast-01
      :ARG2 (t / take-01
            :ARG0 (h / he)
            :ARG1 (c2 / courage)
            :mod (a / again
                  :mod (o / once))))

instance(c,contrast-01)
instance(t,take-01)
instance(h,he)
instance(c2,courage)
instance(a,again)
instance(o,once)
ARG2(c,t)
ARG0(t,h)
ARG1(t,c2)
mod(t,a)
mod(a,o)

(a / ask-01
      :ARG0 (h / he)
      :ARG1 (a2 / advise-01
            :ARG0 (y / you)
            :ARG1 h
            :ARG2 (v / visit-01
                  :ARG0 h
                  :ARG1 (p / place
                        :domain (a3 / amr-unknown))
                  :time (n / now))))

instance(a,ask-01)
instance(h,he)
instance(a2,advise-01)
instance(y,you)
instance(v,visit-01)
instance(p,place)
instance(a3,amr-unknown)
instance(n,now)
ARG0(a,h)
ARG1(a,a2)
ARG0(a2,y)
ARG1(a2,h)
ARG2(a2,v)
ARG0(v,h)
ARG1(v,p)
domain(p,a3)
time(v,n)

(r / reply-01
      :ARG0 (g / geographer)
      :ARG2 (p2 / planet :wiki "Earth"
            :name (n / name :op1 "Earth")))

instance(r,reply-01)
instance(g,geographer)
instance(p2,planet)
instance(n,name)
ARG0(r,g)
ARG2(r,p2)
wiki(p2,"Earth")
name(p2,n)
op1(n,"Earth")

(h2 / have-03
      :ARG0 (i / it)
      :ARG1 (r / reputation
            :ARG1-of (g / good-02)))

instance(h2,have-03)
instance(i,it)
instance(r,reputation)
instance(g,good-02)
ARG0(h2,i)
ARG1(h2,r)
ARG1-of(r,g)

(a / and
      :op2 (a2 / and
            :op1 (g / go-02
                  :ARG0 (p / prince
                        :mod (l / little))
                  :direction (a3 / away))
            :op2 (t / think-01
                  :ARG0 p
                  :ARG1 (f2 / flower
                        :poss p))))

instance(a,and)
instance(a2,and)
instance(g,go-02)
instance(p,prince)
instance(l,little)
instance(a3,away)
instance(t,think-01)
instance(f2,flower)
op2(a,a2)
op1(a2,g)
ARG0(g,p)
mod(p,l)
direction(g,a3)
op2(a2,t)
ARG0(t,p)
ARG1(t,f2)
poss(f2,p)

(c / chapter
      :mod 16)

instance(c,chapter)
mod(c,16)

(p2 / planet
      :ord (o / ordinal-entity :value 7)
      :domain (p / planet :wiki "Earth"
            :name (n / name :op1 "Earth"))
      :ARG1-of (c / cause-01))

instance(p2,planet)
instance(o,ordinal-entity)
instance(p,planet)
instance(n,name)
instance(c,cause-01)
ord(p2,o)
value(o,7)
domain(p2,p)
wiki(p,"Earth")
name(p,n)
op1(n,"Earth")
ARG1-of(p2,c)

(p / planet
      :mod (o / ordinary
            :mod (j / just :polarity -))
      :domain (p2 / planet :wiki "Earth"
            :name (n / name :op1 "Earth")))

instance(p,planet)
instance(o,ordinary)
instance(j,just)
instance(p2,planet)
instance(n,name)
mod(p,o)
mod(o,j)
polarity(j,-)
domain(p,p2)
wiki(p2,"Earth")
name(p2,n)
op1(n,"Earth")

(p / possible-01
      :ARG1 (a3 / and
            :op1 (c / count-01
                  :ARG0 (o / one)
                  :ARG1 (a / and
                        :op1 (p5 / person :quant 111
                              :ARG0-of (h2 / have-org-role-91
                                    :ARG2 (k / king)))
                        :op2 (g2 / geographer :quant 7000)
                        :op3 (b / businessman :quant 900000)
                        :op4 (p4 / person :quant 7500000
                              :ARG0-of (t2 / tipple-01))
                        :op5 (m / man :quant 311000000
                              :mod (c2 / conceited))
                        :mod (g3 / grown-up
                              :quant (a2 / about :op1 2000000000)))
                  :location (t / there))
            :op2 (f / forget-01 :polarity -
                  :ARG0 o
                  :ARG1 (n / negro
                        :ARG1-of (i2 / include-91
                              :ARG2 p5)
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (k2 / king)))
                  :mod (t3 / to-be-sure))))

instance(p,possible-01)
instance(a3,and)
instance(c,count-01)
instance(o,one)
instance(a,and)
instance(p5,person)
instance(h2,have-org-role-91)
instance(k,king)
instance(g2,geographer)
instance(b,businessman)
instance(p4,person)
instance(t2,tipple-01)
instance(m,man)
instance(c2,conceited)
instance(g3,grown-up)
instance(a2,about)
instance(t,there)
instance(f,forget-01)
instance(n,negro)
instance(i2,include-91)
instance(h,have-org-role-91)
instance(k2,king)
instance(t3,to-be-sure)
ARG1(p,a3)
op1(a3,c)
ARG0(c,o)
ARG1(c,a)
op1(a,p5)
quant(p5,111)
ARG0-of(p5,h2)
ARG2(h2,k)
op2(a,g2)
quant(g2,7000)
op3(a,b)
quant(b,900000)
op4(a,p4)
quant(p4,7500000)
ARG0-of(p4,t2)
op5(a,m)
quant(m,311000000)
mod(m,c2)
mod(a,g3)
quant(g3,a2)
op1(a2,2000000000)
location(c,t)
op2(a3,f)
polarity(f,-)
ARG0(f,o)
ARG1(f,n)
ARG1-of(n,i2)
ARG2(i2,p5)
ARG0-of(n,h)
ARG2(h,k2)
mod(f,t3)

(t / tell-01
      :ARG0 (i3 / i)
      :ARG1 (o / obligate-01
            :ARG2 (m / maintain-01
                  :ARG1 (a / army
                        :consist-of (p2 / person :quant 462511
                              :ARG0-of (l2 / light-04
                                    :ARG1 (l3 / lamp)))
                        :mod (v / veritable))
                  :location (o2 / over
                        :op1 (c / continent
                              :quant (w / whole :op1 6)))
                  :purpose (l / lamp
                        :location (s2 / street)))
            :time (b / before
                  :op1 (i2 / invent-01
                        :ARG1 (e / electricity))))
      :ARG2 y
      :purpose (g / give-01
            :ARG1 (i / idea
                  :topic (s / size-01
                        :ARG1 (p3 / planet :wiki "Earth"
                              :name (n / name :op1 "Earth"))))
            :ARG2 (y / you)))

instance(t,tell-01)
instance(i3,i)
instance(o,obligate-01)
instance(m,maintain-01)
instance(a,army)
instance(p2,person)
instance(l2,light-04)
instance(l3,lamp)
instance(v,veritable)
instance(o2,over)
instance(c,continent)
instance(w,whole)
instance(l,lamp)
instance(s2,street)
instance(b,before)
instance(i2,invent-01)
instance(e,electricity)
instance(g,give-01)
instance(i,idea)
instance(s,size-01)
instance(p3,planet)
instance(n,name)
instance(y,you)
ARG0(t,i3)
ARG1(t,o)
ARG2(o,m)
ARG1(m,a)
consist-of(a,p2)
quant(p2,462511)
ARG0-of(p2,l2)
ARG1(l2,l3)
mod(a,v)
location(m,o2)
op1(o2,c)
quant(c,w)
op1(w,6)
purpose(m,l)
location(l,s2)
time(o,b)
op1(b,i2)
ARG1(i2,e)
ARG2(t,y)
purpose(t,g)
ARG1(g,i)
topic(i,s)
ARG1(s,p3)
wiki(p3,"Earth")
name(p3,n)
op1(n,"Earth")
ARG2(g,y)

(m / make-01
      :ARG0 (t / that)
      :ARG1 (s / spectacle
            :mod (s2 / splendid))
      :condition (s3 / see-01
            :ARG1 t
            :manner (d / distance-01
                  :ARG2 t
                  :degree (s4 / slight))))

instance(m,make-01)
instance(t,that)
instance(s,spectacle)
instance(s2,splendid)
instance(s3,see-01)
instance(d,distance-01)
instance(s4,slight)
ARG0(m,t)
ARG1(m,s)
mod(s,s2)
condition(m,s3)
ARG1(s3,t)
manner(s3,d)
ARG2(d,t)
degree(d,s4)

(r / regulate-01
      :ARG1 (m / move-01
            :ARG0 (a / army
                  :mod (t / this))
            :ARG1-of (r3 / resemble-01
                  :ARG2 (m2 / move-01
                        :ARG0 (b / ballet
                              :subevent-of (o / opera))))))

instance(r,regulate-01)
instance(m,move-01)
instance(a,army)
instance(t,this)
instance(r3,resemble-01)
instance(m2,move-01)
instance(b,ballet)
instance(o,opera)
ARG1(r,m)
ARG0(m,a)
mod(a,t)
ARG1-of(m,r3)
ARG2(r3,m2)
ARG0(m2,b)
subevent-of(b,o)

(c / come-03
      :ARG1 (t / turn-01
            :ARG1 (p / person
                  :source (a / and
                        :op1 (c2 / country :wiki "New_Zealand"
                              :name (n / name :op1 "New" :op2 "Zealand"))
                        :op2 (c3 / country :wiki "Australia"
                              :name (n2 / name :op1 "Australia")))
                  :ARG0-of (l / light-04
                        :ARG1 (l2 / lamp))))
      :time (f / first))

instance(c,come-03)
instance(t,turn-01)
instance(p,person)
instance(a,and)
instance(c2,country)
instance(n,name)
instance(c3,country)
instance(n2,name)
instance(l,light-04)
instance(l2,lamp)
instance(f,first)
ARG1(c,t)
ARG1(t,p)
source(p,a)
op1(a,c2)
wiki(c2,"New_Zealand")
name(c2,n)
op1(n,"New")
op2(n,"Zealand")
op2(a,c3)
wiki(c3,"Australia")
name(c3,n2)
op1(n2,"Australia")
ARG0-of(p,l)
ARG1(l,l2)
time(c,f)

(g / go-02
      :ARG0 (t / they)
      :purpose (s / sleep-01
            :ARG0 t)
      :time (a / after
            :op1 (l2 / light-04
                  :ARG0 t
                  :ARG1 (l / lamp
                        :poss t))))

instance(g,go-02)
instance(t,they)
instance(s,sleep-01)
instance(a,after)
instance(l2,light-04)
instance(l,lamp)
ARG0(g,t)
purpose(g,s)
ARG0(s,t)
time(g,a)
op1(a,l2)
ARG0(l2,t)
ARG1(l2,l)
poss(l,t)

(a / and
      :op1 (e / enter-01
            :ARG0 (p / person
                  :ARG0-of (l / light-04
                        :ARG1 (l2 / lamp))
                  :source (a2 / and
                        :op1 (c / country :wiki "China" :name (n2 / name :op1 "China"))
                        :op2 (c2 / country-region :wiki "Siberia" :name (n3 / name :op1 "Siberia"))))
            :time (n / next)
            :purpose (s / step
                  :poss p
                  :part-of (d2 / dance-01)))
      :op2 (w / wave-02
            :ARG1 p
            :ARG2 (b / back
                  :direction (i / into
                        :op1 (w2 / wing)))
            :time (t / then)
            :mod (t2 / too)))

instance(a,and)
instance(e,enter-01)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(a2,and)
instance(c,country)
instance(n2,name)
instance(c2,country-region)
instance(n3,name)
instance(n,next)
instance(s,step)
instance(d2,dance-01)
instance(w,wave-02)
instance(b,back)
instance(i,into)
instance(w2,wing)
instance(t,then)
instance(t2,too)
op1(a,e)
ARG0(e,p)
ARG0-of(p,l)
ARG1(l,l2)
source(p,a2)
op1(a2,c)
wiki(c,"China")
name(c,n2)
op1(n2,"China")
op2(a2,c2)
wiki(c2,"Siberia")
name(c2,n3)
op1(n3,"Siberia")
time(e,n)
purpose(e,s)
poss(s,p)
part-of(s,d2)
op2(a,w)
ARG1(w,p)
ARG2(w,b)
direction(b,i)
op1(i,w2)
time(w,t)
mod(w,t2)

(c8 / come-03
      :ARG1 (t2 / turn
            :poss (p / person
                  :ARG0-of (l / light-04
                        :ARG1 (l2 / lamp))
                  :location (c3 / continent :wiki "North_America" :name (n2 / name :op1 "North" :op2 "America")))
            :time (a / after
                  :op1 (t / turn
                        :poss (p3 / person
                              :ARG0-of l
                              :location (c2 / continent :wiki "South_America" :name (n / name :op1 "South" :op2 "America")))
                        :time (a6 / after
                              :op1 (t3 / turn
                                    :poss (p2 / person
                                          :ARG0-of l
                                          :location (a4 / and
                                                :op1 (c4 / continent :wiki "Africa" :name (n5 / name :op1 "Africa"))
                                                :op2 (c5 / continent :wiki "Europe" :name (n6 / name :op1 "Europe"))))
                                    :time (a3 / after
                                          :op1 (t4 / turn
                                                :poss (p4 / person
                                                      :ARG0-of l
                                                      :location (a2 / and
                                                            :op1 (c / country :wiki "Russia" :name (n3 / name :op1 "Russia"))
                                                            :op2 (w / world-region :wiki "East_Indies" :name (n4 / name :op1 "Indies"))))))))))))

instance(c8,come-03)
instance(t2,turn)
instance(p,person)
instance(l,light-04)
instance(l2,lamp)
instance(c3,continent)
instance(n2,name)
instance(a,after)
instance(t,turn)
instance(p3,person)
instance(c2,continent)
instance(n,name)
instance(a6,after)
instance(t3,turn)
instance(p2,person)
instance(a4,and)
instance(c4,continent)
instance(n5,name)
instance(c5,continent)
instance(n6,name)
instance(a3,after)
instance(t4,turn)
instance(p4,person)
instance(a2,and)
instance(c,country)
instance(n3,name)
instance(w,world-region)
instance(n4,name)
ARG1(c8,t2)
poss(t2,p)
ARG0-of(p,l)
ARG1(l,l2)
location(p,c3)
wiki(c3,"North_America")
name(c3,n2)
op1(n2,"North")
op2(n2,"America")
time(t2,a)
op1(a,t)
poss(t,p3)
ARG0-of(p3,l)
location(p3,c2)
wiki(c2,"South_America")
name(c2,n)
op1(n,"South")
op2(n,"America")
time(t,a6)
op1(a6,t3)
poss(t3,p2)
ARG0-of(p2,l)
location(p2,a4)
op1(a4,c4)
wiki(c4,"Africa")
name(c4,n5)
op1(n5,"Africa")
op2(a4,c5)
wiki(c5,"Europe")
name(c5,n6)
op1(n6,"Europe")
time(t3,a3)
op1(a3,t4)
poss(t4,p4)
ARG0-of(p4,l)
location(p4,a2)
op1(a2,c)
wiki(c,"Russia")
name(c,n3)
op1(n3,"Russia")
op2(a2,w)
wiki(w,"East_Indies")
name(w,n4)
op1(n4,"Indies")

(a / and
      :op2 (m2 / mistake-02 :polarity -
            :ARG0 (t / they)
            :ARG1 (o / order-03
                  :ARG1 (e / enter-01
                        :ARG0 t
                        :ARG1 (s / stage)))
            :time (e2 / ever)))

instance(a,and)
instance(m2,mistake-02)
instance(t,they)
instance(o,order-03)
instance(e,enter-01)
instance(s,stage)
instance(e2,ever)
op2(a,m2)
polarity(m2,-)
ARG0(m2,t)
ARG1(m2,o)
ARG1(o,e)
ARG0(e,t)
ARG1(e,s)
time(m2,e2)

(m / magnificent
  :domain (i / it))

instance(m,magnificent)
instance(i,it)
domain(m,i)

(l / live-01
      :ARG0 (a2 / and
            :op1 (m / man
                  :ARG1-of (c4 / charge-05
                        :ARG2 (l2 / lamp
                              :ARG1-of (s / single-02)
                              :location (w / world-region :wiki "North_Pole" :name (n3 / name :op1 "North" :op2 "Pole"))))
                  :mod (o / only))
            :op2 (c3 / colleague
                  :poss m
                  :ARG0-of (r / responsible-03
                        :ARG1 (l4 / lamp
                              :ARG1-of (s2 / single-02))
                        :location (w2 / world-region :wiki "South_Pole" :name (n / name :op1 "South" :op2 "Pole"))))
            :mod (p / person :quant 2
                  :mod (t4 / this)
                  :mod (o2 / only)))
      :ARG3-of (f / free-04
            :ARG1 a2
            :ARG2 (a / and
                  :op1 (t / toil-01)
                  :op2 (c / care-01)))
      :ARG1-of (c2 / cause-01
            :ARG0 (b / busy-01
                  :ARG1 a2
                  :frequency (r2 / rate-entity-91
                        :ARG1 2
                        :ARG2 (t3 / temporal-quantity :quant 1
                              :unit (y / year))))))

instance(l,live-01)
instance(a2,and)
instance(m,man)
instance(c4,charge-05)
instance(l2,lamp)
instance(s,single-02)
instance(w,world-region)
instance(n3,name)
instance(o,only)
instance(c3,colleague)
instance(r,responsible-03)
instance(l4,lamp)
instance(s2,single-02)
instance(w2,world-region)
instance(n,name)
instance(p,person)
instance(t4,this)
instance(o2,only)
instance(f,free-04)
instance(a,and)
instance(t,toil-01)
instance(c,care-01)
instance(c2,cause-01)
instance(b,busy-01)
instance(r2,rate-entity-91)
instance(t3,temporal-quantity)
instance(y,year)
ARG0(l,a2)
op1(a2,m)
ARG1-of(m,c4)
ARG2(c4,l2)
ARG1-of(l2,s)
location(l2,w)
wiki(w,"North_Pole")
name(w,n3)
op1(n3,"North")
op2(n3,"Pole")
mod(m,o)
op2(a2,c3)
poss(c3,m)
ARG0-of(c3,r)
ARG1(r,l4)
ARG1-of(l4,s2)
location(r,w2)
wiki(w2,"South_Pole")
name(w2,n)
op1(n,"South")
op2(n,"Pole")
mod(a2,p)
quant(p,2)
mod(p,t4)
mod(p,o2)
ARG3-of(l,f)
ARG1(f,a2)
ARG2(f,a)
op1(a,t)
op2(a,c)
ARG1-of(l,c2)
ARG0(c2,b)
ARG1(b,a2)
frequency(b,r2)
ARG1(r2,2)
ARG2(r2,t3)
quant(t3,1)
unit(t3,y)

(c / chapter
      :mod 17)

instance(c,chapter)
mod(c,17)

(w / wander-01
      :ARG0 o
      :ARG1 (f / from
            :op1 (t / truth))
      :time (w2 / wish-01
            :ARG0 (o / one)
            :ARG1 (p / play-02
                  :ARG0 o
                  :ARG1 (w3 / wit)))
      :degree (l / little)
      :frequency (s / sometimes))

instance(w,wander-01)
instance(f,from)
instance(t,truth)
instance(w2,wish-01)
instance(o,one)
instance(p,play-02)
instance(w3,wit)
instance(l,little)
instance(s,sometimes)
ARG0(w,o)
ARG1(w,f)
op1(f,t)
time(w,w2)
ARG0(w2,o)
ARG1(w2,p)
ARG0(p,o)
ARG1(p,w3)
degree(w,l)
frequency(w,s)

(h / honest-01
      :ARG0 (i / i)
      :ARG1 (t2 / thing
            :ARG1-of (t / tell-01
                  :ARG0 i
                  :ARG2 (y / you)
                  :topic (p2 / person
                        :ARG0-of (l / light-04
                              :ARG1 (l2 / lamp)))))
      :degree (a / altogether :polarity -))

instance(h,honest-01)
instance(i,i)
instance(t2,thing)
instance(t,tell-01)
instance(y,you)
instance(p2,person)
instance(l,light-04)
instance(l2,lamp)
instance(a,altogether)
ARG0(h,i)
ARG1(h,t2)
ARG1-of(t2,t)
ARG0(t,i)
ARG2(t,y)
topic(t,p2)
ARG0-of(p2,l)
ARG1(l,l2)
degree(h,a)
polarity(a,-)

(a / and
      :op2 (r / realize-01
            :ARG0 (i / i)
            :ARG1 (r2 / risk-01
                  :ARG0 i
                  :ARG2 (g / give-01
                        :ARG0 i
                        :ARG1 (i2 / idea
                              :mod (f / false)
                              :topic (p2 / planet
                                    :source (w / we)))
                        :ARG2 (p / person
                              :ARG0-of (k / know-02 :polarity -
                                    :ARG1 p2))))))

instance(a,and)
instance(r,realize-01)
instance(i,i)
instance(r2,risk-01)
instance(g,give-01)
instance(i2,idea)
instance(f,false)
instance(p2,planet)
instance(w,we)
instance(p,person)
instance(k,know-02)
op2(a,r)
ARG0(r,i)
ARG1(r,r2)
ARG0(r2,i)
ARG2(r2,g)
ARG0(g,i)
ARG1(g,i2)
mod(i2,f)
topic(i2,p2)
source(p2,w)
ARG2(g,p)
ARG0-of(p,k)
polarity(k,-)
ARG1(k,p2)

(o / occupy-01
      :ARG0 (m / man)
      :ARG1 (p2 / place
            :mod (s / small
                  :degree (v / very))
            :location (p / planet :wiki "Earth"
                  :name (n / name :op1 "Earth"))))

instance(o,occupy-01)
instance(m,man)
instance(p2,place)
instance(s,small)
instance(v,very)
instance(p,planet)
instance(n,name)
ARG0(o,m)
ARG1(o,p2)
mod(p2,s)
degree(s,v)
location(p2,p)
wiki(p,"Earth")
name(p,n)
op1(n,"Earth")

(p / possible-01
      :ARG1 (p2 / put-01
            :ARG1 p3
            :ARG2 (s5 / square
                  :ARG1-of (p6 / public-02)
                  :ARG1-of (l / long-03
                        :ARG2 (d2 / distance-quantity :quant 20
                              :unit (m / mile)))
                  :ARG1-of (w / wide-02
                        :mod (d3 / distance-quantity :quant 20
                              :unit (m2 / mile))))
            :ARG1-of (e / easy-05))
      :condition (s / stand-01
            :ARG0 (p3 / person :quant 2000000000
                  :ARG0-of (i / inhabit-01)
                  :ARG2-of (p4 / people-01
                        :ARG1 (s2 / surface
                              :poss (i2 / it)))
                  :mod (a / all))
            :ARG1-of (r / resemble-01
                  :ARG2 (d / do-02
                        :ARG0 p3
                        :purpose (a3 / assemble-02
                              :mod (p5 / public)
                              :mod (b / big)
                              :mod (s4 / some))))
            :manner (a2 / and
                  :op1 (u / upright)
                  :op2 (c / crowd-02
                        :manner (t / together)
                        :degree (s3 / somewhat)))))

instance(p,possible-01)
instance(p2,put-01)
instance(s5,square)
instance(p6,public-02)
instance(l,long-03)
instance(d2,distance-quantity)
instance(m,mile)
instance(w,wide-02)
instance(d3,distance-quantity)
instance(m2,mile)
instance(e,easy-05)
instance(s,stand-01)
instance(p3,person)
instance(i,inhabit-01)
instance(p4,people-01)
instance(s2,surface)
instance(i2,it)
instance(a,all)
instance(r,resemble-01)
instance(d,do-02)
instance(a3,assemble-02)
instance(p5,public)
instance(b,big)
instance(s4,some)
instance(a2,and)
instance(u,upright)
instance(c,crowd-02)
instance(t,together)
instance(s3,somewhat)
ARG1(p,p2)
ARG1(p2,p3)
ARG2(p2,s5)
ARG1-of(s5,p6)
ARG1-of(s5,l)
ARG2(l,d2)
quant(d2,20)
unit(d2,m)
ARG1-of(s5,w)
mod(w,d3)
quant(d3,20)
unit(d3,m2)
ARG1-of(p2,e)
condition(p,s)
ARG0(s,p3)
quant(p3,2000000000)
ARG0-of(p3,i)
ARG2-of(p3,p4)
ARG1(p4,s2)
poss(s2,i2)
mod(p3,a)
ARG1-of(s,r)
ARG2(r,d)
ARG0(d,p3)
purpose(d,a3)
mod(a3,p5)
mod(a3,b)
mod(a3,s4)
manner(s,a2)
op1(a2,u)
op2(a2,c)
manner(c,t)
degree(c,s3)

(p / possible-01
      :ARG1 (p2 / pile-01
            :ARG1 (h / humanity
                  :mod (a / all))
            :ARG2 (i / islet
                  :mod (s / small)
                  :location (o2 / ocean :wiki "Pacific_Ocean"
                        :name (n / name :op1 "Pacific")))))

instance(p,possible-01)
instance(p2,pile-01)
instance(h,humanity)
instance(a,all)
instance(i,islet)
instance(s,small)
instance(o2,ocean)
instance(n,name)
ARG1(p,p2)
ARG1(p2,h)
mod(h,a)
ARG2(p2,i)
mod(i,s)
location(i,o2)
wiki(o2,"Pacific_Ocean")
name(o2,n)
op1(n,"Pacific")

(b / believe-01 :polarity -
      :ARG0 (g2 / grown-up)
      :ARG1 (y / you)
      :time (t / tell-01
            :ARG0 y
            :ARG1 (t2 / that)
            :ARG2 g2)
      :mod (t3 / to-be-sure))

instance(b,believe-01)
instance(g2,grown-up)
instance(y,you)
instance(t,tell-01)
instance(t2,that)
instance(t3,to-be-sure)
polarity(b,-)
ARG0(b,g2)
ARG1(b,y)
time(b,t)
ARG0(t,y)
ARG1(t,t2)
ARG2(t,g2)
mod(b,t3)

(i / imagine-01
  :ARG0 (t / they)
  :ARG1 (f / fill-01
          :ARG1 (s / space
                  :quant (d / deal
                           :mod (g / great)))
          :ARG2 t))

instance(i,imagine-01)
instance(t,they)
instance(f,fill-01)
instance(s,space)
instance(d,deal)
instance(g,great)
ARG0(i,t)
ARG1(i,f)
ARG1(f,s)
quant(s,d)
mod(d,g)
ARG2(f,t)

(f / fancy-01
      :ARG0 (t / they)
      :ARG1 (h / have-degree-91
            :ARG1 t
            :ARG2 (i2 / important-01
                  :ARG1 t)
            :ARG3 (e / equal)
            :ARG4 (b / baobab)))

instance(f,fancy-01)
instance(t,they)
instance(h,have-degree-91)
instance(i2,important-01)
instance(e,equal)
instance(b,baobab)
ARG0(f,t)
ARG1(f,h)
ARG1(h,t)
ARG2(h,i2)
ARG1(i2,t)
ARG3(h,e)
ARG4(h,b)

(r / recommend-01
      :ARG1 (a / advise-01
            :ARG0 (y / you)
            :ARG1 (t / they)
            :ARG2 (c / calculate-01
                  :ARG0 t))
      :ARG2 y)

instance(r,recommend-01)
instance(a,advise-01)
instance(y,you)
instance(t,they)
instance(c,calculate-01)
ARG1(r,a)
ARG0(a,y)
ARG1(a,t)
ARG2(a,c)
ARG0(c,t)
ARG2(r,y)

(a / and
  :op1 (a2 / adore-01
         :ARG0 (t / they)
         :ARG1 (f / figure))
  :op2 (p / please-01
         :ARG1 t
         :ARG2 (t2 / that)))

instance(a,and)
instance(a2,adore-01)
instance(t,they)
instance(f,figure)
instance(p,please-01)
instance(t2,that)
op1(a,a2)
ARG0(a2,t)
ARG1(a2,f)
op2(a,p)
ARG1(p,t)
ARG2(p,t2)

(c / contrast-01
      :ARG2 (w / waste-01 :mode imperative :polarity -
            :ARG0 (y / you)
            :ARG1 (t / time
                  :poss y)
            :ARG2 (t2 / task-01
                  :mod (e / extra)
                  :mod (t3 / this))))

instance(c,contrast-01)
instance(w,waste-01)
instance(y,you)
instance(t,time)
instance(t2,task-01)
instance(e,extra)
instance(t3,this)
ARG2(c,w)
mode(w,imperative)
polarity(w,-)
ARG0(w,y)
ARG1(w,t)
poss(t,y)
ARG2(w,t2)
mod(t2,e)
mod(t2,t3)

(n / need-01
  :ARG1 (i / it)
  :polarity -)

instance(n,need-01)
instance(i,it)
ARG1(n,i)
polarity(n,-)

(t / trust-01
      :ARG0 (y / you)
      :ARG2 (i / i)
      :ARG1-of (k / know-01
            :ARG0 i))

instance(t,trust-01)
instance(y,you)
instance(i,i)
instance(k,know-01)
ARG0(t,y)
ARG2(t,i)
ARG1-of(t,k)
ARG0(k,i)

(s / surprise-01
      :ARG0 (s2 / see-01 :polarity -
            :ARG0 p
            :ARG1 (p2 / person
                  :quant (a / any)))
      :ARG1 (p / prince
            :mod (l / little))
      :degree (m / much
            :degree (v / very))
      :time (a2 / arrive-01
            :ARG1 p
            :ARG4 (p3 / planet :wiki "Earth"
                  :name (n / name :op1 "Earth"))))

instance(s,surprise-01)
instance(s2,see-01)
instance(p2,person)
instance(a,any)
instance(p,prince)
instance(l,little)
instance(m,much)
instance(v,very)
instance(a2,arrive-01)
instance(p3,planet)
instance(n,name)
ARG0(s,s2)
polarity(s2,-)
ARG0(s2,p)
ARG1(s2,p2)
quant(p2,a)
ARG1(s,p)
mod(p,l)
degree(s,m)
degree(m,v)
time(s,a2)
ARG1(a2,p)
ARG4(a2,p3)
wiki(p3,"Earth")
name(p3,n)
op1(n,"Earth")

(b / begin-01
      :ARG0 (h / he)
      :ARG1 (f / fear-01
            :ARG0 h
            :ARG1 (c / come-01
                  :ARG1 h
                  :ARG4 (p / planet
                        :ARG2-of (w / wrong-04))))
      :time (f2 / flash-02
            :ARG1 (c2 / coil
                  :mod (g / gold
                        :mod (c3 / color
                              :poss (t / thing
                                    :ARG2-of (l / light-04
                                          :ARG0 (m / moon))))))
            :path (a / across
                  :op1 (s / sand))))

instance(b,begin-01)
instance(h,he)
instance(f,fear-01)
instance(c,come-01)
instance(p,planet)
instance(w,wrong-04)
instance(f2,flash-02)
instance(c2,coil)
instance(g,gold)
instance(c3,color)
instance(t,thing)
instance(l,light-04)
instance(m,moon)
instance(a,across)
instance(s,sand)
ARG0(b,h)
ARG1(b,f)
ARG0(f,h)
ARG1(f,c)
ARG1(c,h)
ARG4(c,p)
ARG2-of(p,w)
time(b,f2)
ARG1(f2,c2)
mod(c2,g)
mod(g,c3)
poss(c3,t)
ARG2-of(t,l)
ARG0(l,m)
path(f2,a)
op1(a,s)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (e2 / evening
            :ARG1-of (g / good-02))
      :manner (c / courteous))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(e2,evening)
instance(g,good-02)
instance(c,courteous)
ARG0(s,p)
mod(p,l)
ARG1(s,e2)
ARG1-of(e2,g)
manner(s,c)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (d / date-entity
            :dayperiod (e / evening)
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(s2,snake)
instance(d,date-entity)
instance(e,evening)
instance(g,good-02)
ARG0(s,s2)
ARG1(s,d)
dayperiod(d,e)
ARG1-of(d,g)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (p2 / planet
            :ARG4-of (c / come-01
                  :ARG1 p
                  :direction (d / down))
            :domain (a2 / amr-unknown)))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(p2,planet)
instance(c,come-01)
instance(d,down)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,p2)
ARG4-of(p2,c)
ARG1(c,p)
direction(c,d)
domain(p2,a2)

(a / answer-01
      :ARG0 (s / snake)
      :ARG2 (a2 / and
            :op1 (p / planet :wiki "Earth"
                  :name (n / name :op1 "Earth")
                  :domain (t / this))
            :op2 (c / continent :wiki "Africa"
                  :name (n2 / name :op1 "Africa")
                  :domain (t2 / this))))

instance(a,answer-01)
instance(s,snake)
instance(a2,and)
instance(p,planet)
instance(n,name)
instance(t,this)
instance(c,continent)
instance(n2,name)
instance(t2,this)
ARG0(a,s)
ARG2(a,a2)
op1(a2,p)
wiki(p,"Earth")
name(p,n)
op1(n,"Earth")
domain(p,t)
op2(a2,c)
wiki(c,"Africa")
name(c,n2)
op1(n2,"Africa")
domain(c,t2)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(p / person :polarity -
      :location (p2 / planet :wiki "Earth" :name (n2 / name :op1 "Earth"))
      :ARG1-of (r / request-confirmation-91))

instance(p,person)
instance(p2,planet)
instance(n2,name)
instance(r,request-confirmation-91)
polarity(p,-)
location(p,p2)
wiki(p2,"Earth")
name(p2,n2)
op1(n2,"Earth")
ARG1-of(p,r)

(d2 / desert
      :domain (t / this))

instance(d2,desert)
instance(t,this)
domain(d2,t)

(p / person :polarity -
      :location (d / desert))

instance(p,person)
instance(d,desert)
polarity(p,-)
location(p,d)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (l / large
            :domain (p / planet :wiki "Earth"
                  :name (n / name :op1 "Earth"))))

instance(s,say-01)
instance(s2,snake)
instance(l,large)
instance(p,planet)
instance(n,name)
ARG0(s,s2)
ARG1(s,l)
domain(l,p)
wiki(p,"Earth")
name(p,n)
op1(n,"Earth")

(a / and
      :op1 (s / sit-down-02
            :ARG1 (p / prince
                  :mod (l / little))
            :ARG2 (s2 / stone)
            :direction (d / down))
      :op2 (r / raise-01
            :ARG0 p
            :ARG1 (e / eye
                  :part-of p)
            :direction (s3 / sky)))

instance(a,and)
instance(s,sit-down-02)
instance(p,prince)
instance(l,little)
instance(s2,stone)
instance(d,down)
instance(r,raise-01)
instance(e,eye)
instance(s3,sky)
op1(a,s)
ARG1(s,p)
mod(p,l)
ARG2(s,s2)
direction(s,d)
op2(a,r)
ARG0(r,p)
ARG1(r,e)
part-of(e,p)
direction(r,s3)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (w2 / wonder-01
            :ARG0 h
            :ARG1 (t / truth-value
                  :polarity-of (l / light-04
                        :ARG1 (s2 / star)
                        :location (h2 / heaven)
                        :purpose (f / find-01
                              :ARG0 (w / we
                                    :mod (e / each))
                              :ARG1 (s3 / star
                                    :poss w)
                              :time (d / day
                                    :mod (o / one))
                              :mod (a / again)
                              :ARG1-of (p / possible-01))))))

instance(s,say-01)
instance(h,he)
instance(w2,wonder-01)
instance(t,truth-value)
instance(l,light-04)
instance(s2,star)
instance(h2,heaven)
instance(f,find-01)
instance(w,we)
instance(e,each)
instance(s3,star)
instance(d,day)
instance(o,one)
instance(a,again)
instance(p,possible-01)
ARG0(s,h)
ARG1(s,w2)
ARG0(w2,h)
ARG1(w2,t)
polarity-of(t,l)
ARG1(l,s2)
location(l,h2)
purpose(l,f)
ARG0(f,w)
mod(w,e)
ARG1(f,s3)
poss(s3,w)
time(f,d)
mod(d,o)
mod(f,a)
ARG1-of(f,p)

(l2 / look-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / planet
            :source (i / i)))

instance(l2,look-01)
instance(y,you)
instance(p,planet)
instance(i,i)
mode(l2,imperative)
ARG0(l2,y)
ARG1(l2,p)
source(p,i)

(b2 / be-located-at-91
      :ARG1 (i / it)
      :ARG2 (t / there
            :mod (r / right)
            :direction (a / above
                  :op1 (w / we))))

instance(b2,be-located-at-91)
instance(i,it)
instance(t,there)
instance(r,right)
instance(a,above)
instance(w,we)
ARG1(b2,i)
ARG2(b2,t)
mod(t,r)
direction(t,a)
op1(a,w)

(c2 / contrast-01
      :ARG2 (f / far
            :direction (a / away)
            :domain (i / it)
            :degree (s / so)))

instance(c2,contrast-01)
instance(f,far)
instance(a,away)
instance(i,it)
instance(s,so)
ARG2(c2,f)
direction(f,a)
domain(f,i)
degree(f,s)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (b / beautiful-02
            :ARG1 (i / it)))

instance(s,say-01)
instance(s2,snake)
instance(b,beautiful-02)
instance(i,it)
ARG0(s,s2)
ARG1(s,b)
ARG1(b,i)

(b2 / bring-01
      :ARG0 (a / amr-unknown)
      :ARG1 (y / you)
      :ARG2 (h / here))

instance(b2,bring-01)
instance(a,amr-unknown)
instance(y,you)
instance(h,here)
ARG0(b2,a)
ARG1(b2,y)
ARG2(b2,h)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (h / have-trouble-04
            :ARG0 p
            :ARG1 (f2 / flower)
            :mod (s2 / some)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(h,have-trouble-04)
instance(f2,flower)
instance(s2,some)
ARG0(s,p)
mod(p,l)
ARG1(s,h)
ARG0(h,p)
ARG1(h,f2)
mod(h,s2)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (a / ah-01))

instance(s,say-01)
instance(s2,snake)
instance(a,ah-01)
ARG0(s,s2)
ARG1(s,a)

(a / and
  :op2 (s / silent
         :domain (t / they
                   :mod (b / both))))

instance(a,and)
instance(s,silent)
instance(t,they)
instance(b,both)
op2(a,s)
domain(s,t)
mod(t,b)

(a3 / and
      :op1 (t / take-up-31
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (c / converse-01)
            :mod (a / again)
            :time (a2 / at-last))
      :op2 (b2 / be-located-at-91
            :ARG1 (m / man)
            :ARG2 (a4 / amr-unknown)))

instance(a3,and)
instance(t,take-up-31)
instance(p,prince)
instance(l,little)
instance(c,converse-01)
instance(a,again)
instance(a2,at-last)
instance(b2,be-located-at-91)
instance(m,man)
instance(a4,amr-unknown)
op1(a3,t)
ARG0(t,p)
mod(p,l)
ARG1(t,c)
mod(t,a)
time(t,a2)
op2(a3,b2)
ARG1(b2,m)
ARG2(b2,a4)

(l2 / lonely
      :domain (b / be-located-at-91
            :ARG2 (d / desert))
      :degree (l / little))

instance(l2,lonely)
instance(b,be-located-at-91)
instance(d,desert)
instance(l,little)
domain(l2,b)
ARG2(b,d)
degree(l2,l)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (l / lonely
            :domain (b / be-located-at-91
                  :ARG2 (a3 / among
                        :op1 (m / man)))
            :mod (a2 / also)))

instance(s,say-01)
instance(s2,snake)
instance(l,lonely)
instance(b,be-located-at-91)
instance(a3,among)
instance(m,man)
instance(a2,also)
ARG0(s,s2)
ARG1(s,l)
domain(l,b)
ARG2(b,a3)
op1(a3,m)
mod(l,a2)

(g / gaze-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (h / he)
      :ARG1-of (l2 / long-03))

instance(g,gaze-01)
instance(p,prince)
instance(l,little)
instance(h,he)
instance(l2,long-03)
ARG0(g,p)
mod(p,l)
ARG1(g,h)
ARG1-of(g,l2)

(s / say-01
  :ARG0 (h / he)
  :ARG1 (a2 / animal
          :mod (f / funny)
          :domain (y / you))
  :time (a / at-last))

instance(s,say-01)
instance(h,he)
instance(a2,animal)
instance(f,funny)
instance(y,you)
instance(a,at-last)
ARG0(s,h)
ARG1(s,a2)
mod(a2,f)
domain(a2,y)
time(s,a)

(h / have-degree-91 :polarity -
      :ARG1 (y / you)
      :ARG2 (t / thick-03
            :ARG1 y)
      :ARG3 (m / more)
      :ARG4 (f / finger))

instance(h,have-degree-91)
instance(y,you)
instance(t,thick-03)
instance(m,more)
instance(f,finger)
polarity(h,-)
ARG1(h,y)
ARG2(h,t)
ARG1(t,y)
ARG3(h,m)
ARG4(h,f)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (c2 / contrast-01
            :ARG2 (h / have-degree-91
                  :ARG1 (i / i)
                  :ARG2 (p / powerful-02
                        :ARG1 i)
                  :ARG3 (m / more)
                  :ARG4 (f / finger
                        :part-of (k / king)))))

instance(s,say-01)
instance(s2,snake)
instance(c2,contrast-01)
instance(h,have-degree-91)
instance(i,i)
instance(p,powerful-02)
instance(m,more)
instance(f,finger)
instance(k,king)
ARG0(s,s2)
ARG1(s,c2)
ARG2(c2,h)
ARG1(h,i)
ARG2(h,p)
ARG1(p,i)
ARG3(h,m)
ARG4(h,f)
part-of(f,k)

(s / smile-01
  :ARG0 (p / prince
          :mod (l / little)))

instance(s,smile-01)
instance(p,prince)
instance(l,little)
ARG0(s,p)
mod(p,l)

(p / powerful-02
      :ARG1 (y / you)
      :degree (v / very :polarity -))

instance(p,powerful-02)
instance(y,you)
instance(v,very)
ARG1(p,y)
degree(p,v)
polarity(v,-)

(h / have-03 :polarity -
      :ARG0 (y / you)
      :ARG1 (f / foot
            :quant (a / any))
      :mod (e / even))

instance(h,have-03)
instance(y,you)
instance(f,foot)
instance(a,any)
instance(e,even)
polarity(h,-)
ARG0(h,y)
ARG1(h,f)
quant(f,a)
mod(h,e)

(p / possible-01 :polarity -
      :ARG1 (t / travel-01
            :ARG0 (y / you))
      :mod (e / even))

instance(p,possible-01)
instance(t,travel-01)
instance(y,you)
instance(e,even)
polarity(p,-)
ARG1(p,t)
ARG0(t,y)
mod(p,e)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (p / possible-01
            :ARG1 (c / carry-01
                  :ARG0 s2
                  :ARG1 (y / you)
                  :extent (f / far
                        :ARG2-of (h / have-degree-91
                              :ARG1 c
                              :ARG3 (m / more)
                              :ARG4 (d / distance-quantity
                                    :extent-of (t / take-01
                                          :ARG0 (s3 / ship
                                                :mod (a / any))
                                          :ARG1 y)))))))

instance(s,say-01)
instance(s2,snake)
instance(p,possible-01)
instance(c,carry-01)
instance(y,you)
instance(f,far)
instance(h,have-degree-91)
instance(m,more)
instance(d,distance-quantity)
instance(t,take-01)
instance(s3,ship)
instance(a,any)
ARG0(s,s2)
ARG1(s,p)
ARG1(p,c)
ARG0(c,s2)
ARG1(c,y)
extent(c,f)
ARG2-of(f,h)
ARG1(h,c)
ARG3(h,m)
ARG4(h,d)
extent-of(d,t)
ARG0(t,s3)
mod(s3,a)
ARG1(t,y)

(t / twine-01
      :ARG0 (h / he)
      :ARG1 h
      :ARG2 (a / ankle
            :part-of (p / prince
                  :mod (l / little)))
      :manner (r / resemble-01
            :ARG2 (b / bracelet
                  :consist-of (g / gold))))

instance(t,twine-01)
instance(h,he)
instance(a,ankle)
instance(p,prince)
instance(l,little)
instance(r,resemble-01)
instance(b,bracelet)
instance(g,gold)
ARG0(t,h)
ARG1(t,h)
ARG2(t,a)
part-of(a,p)
mod(p,l)
manner(t,r)
ARG2(r,b)
consist-of(b,g)

(s / speak-01
      :ARG0 (s2 / snake)
      :ARG1 (s3 / send-01
            :ARG0 s2
            :ARG1 (p / person
                  :ARG1-of (t / touch-01
                        :ARG0 s2)
                  :mod (a2 / any))
            :ARG2 (b / back
                  :op1 (e / earth
                        :ARG3-of (c / come-01
                              :ARG1 p))))
      :mod (a / again))

instance(s,speak-01)
instance(s2,snake)
instance(s3,send-01)
instance(p,person)
instance(t,touch-01)
instance(a2,any)
instance(b,back)
instance(e,earth)
instance(c,come-01)
instance(a,again)
ARG0(s,s2)
ARG1(s,s3)
ARG0(s3,s2)
ARG1(s3,p)
ARG1-of(p,t)
ARG0(t,s2)
mod(p,a2)
ARG2(s3,b)
op1(b,e)
ARG3-of(e,c)
ARG1(c,p)
mod(s,a)

(c / contrast-01
      :ARG2 (a / and
            :op1 (a2 / and
                  :op1 (i / innocent-01
                        :ARG1 (y / you))
                  :op2 (t / true-01
                        :ARG1 y))
            :op2 (c2 / come-01
                  :ARG1 y
                  :ARG3 (s2 / star))))

instance(c,contrast-01)
instance(a,and)
instance(a2,and)
instance(i,innocent-01)
instance(y,you)
instance(t,true-01)
instance(c2,come-01)
instance(s2,star)
ARG2(c,a)
op1(a,a2)
op1(a2,i)
ARG1(i,y)
op2(a2,t)
ARG1(t,y)
op2(a,c2)
ARG1(c2,y)
ARG3(c2,s2)

(r / reply-01
  :ARG0 (p / prince
          :mod (l / little))
  :polarity -)

instance(r,reply-01)
instance(p,prince)
instance(l,little)
ARG0(r,p)
mod(p,l)
polarity(r,-)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (p3 / pity-01
            :ARG0 s2
            :ARG1 (y / you)
            :ARG1-of (c / cause-01
                  :ARG0 (w / weak-02
                        :ARG1 y
                        :degree (s3 / so)
                        :location (p2 / planet :wiki "Earth" :name (n / name :op1 "Earth")
                              :consist-of (g / granite)
                              :mod (t / this))))))

instance(s,say-01)
instance(s2,snake)
instance(p3,pity-01)
instance(y,you)
instance(c,cause-01)
instance(w,weak-02)
instance(s3,so)
instance(p2,planet)
instance(n,name)
instance(g,granite)
instance(t,this)
ARG0(s,s2)
ARG1(s,p3)
ARG0(p3,s2)
ARG1(p3,y)
ARG1-of(p3,c)
ARG0(c,w)
ARG1(w,y)
degree(w,s3)
location(w,p2)
wiki(p2,"Earth")
name(p2,n)
op1(n,"Earth")
consist-of(p2,g)
mod(p2,t)

(p / possible-01
      :ARG1 (h / help-01
            :ARG0 (i / i)
            :ARG1 (y / you)
            :time (d / day
                  :mod (s / some)))
      :condition (g / grow-02
            :ARG1 y
            :ARG2 (h2 / homesick
                  :topic (p2 / planet
                        :source-of y)
                  :ARG2-of (h3 / have-degree-91
                        :ARG1 y
                        :ARG3 (t / too)))))

instance(p,possible-01)
instance(h,help-01)
instance(i,i)
instance(y,you)
instance(d,day)
instance(s,some)
instance(g,grow-02)
instance(h2,homesick)
instance(p2,planet)
instance(h3,have-degree-91)
instance(t,too)
ARG1(p,h)
ARG0(h,i)
ARG1(h,y)
time(h,d)
mod(d,s)
condition(p,g)
ARG1(g,y)
ARG2(g,h2)
topic(h2,p2)
source-of(p2,y)
ARG2-of(h2,h3)
ARG1(h3,y)
ARG3(h3,t)

(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (i / i)))

instance(p,possible-01)
instance(d,do-02)
instance(i,i)
ARG1(p,d)
ARG0(d,i)

(o / oh :mode expressive)

instance(o,oh)
mode(o,expressive)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (u / understand-01
          :ARG0 p
          :ARG1 (y / you)
          :mod (w / well
                 :degree (v / very))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(u,understand-01)
instance(y,you)
instance(w,well)
instance(v,very)
ARG0(s,p)
mod(p,l)
ARG1(s,u)
ARG0(u,p)
ARG1(u,y)
mod(u,w)
degree(w,v)

(c / contrast-01
      :ARG2 (s2 / speak-01
            :ARG0 (y / you)
            :ARG1 (r / riddle)
            :time (a / always)
            :purpose (a2 / amr-unknown)))

instance(c,contrast-01)
instance(s2,speak-01)
instance(y,you)
instance(r,riddle)
instance(a,always)
instance(a2,amr-unknown)
ARG2(c,s2)
ARG0(s2,y)
ARG1(s2,r)
time(s2,a)
purpose(s2,a2)

(s / say-01
      :ARG0 (s2 / snake)
      :ARG1 (s3 / solve-01
            :ARG0 s2
            :ARG1 (t / they
                  :mod (a / all))))

instance(s,say-01)
instance(s2,snake)
instance(s3,solve-01)
instance(t,they)
instance(a,all)
ARG0(s,s2)
ARG1(s,s3)
ARG0(s3,s2)
ARG1(s3,t)
mod(t,a)

(a / and
  :op2 (s / silent
         :domain (t / they
                   :mod (b / both))))

instance(a,and)
instance(s,silent)
instance(t,they)
instance(b,both)
op2(a,s)
domain(s,t)
mod(t,b)

(c / chapter :mod 18)

instance(c,chapter)
mod(c,18)

(a / and
  :op1 (c / cross-02
         :ARG0 (p / prince
                 :mod (l / little))
         :ARG1 (d / desert))
  :op2 (m / meet-03
         :ARG0 p
         :ARG1 (f / flower :quant 1)
         :mod (o2 / only)))

instance(a,and)
instance(c,cross-02)
instance(p,prince)
instance(l,little)
instance(d,desert)
instance(m,meet-03)
instance(f,flower)
instance(o2,only)
op1(a,c)
ARG0(c,p)
mod(p,l)
ARG1(c,d)
op2(a,m)
ARG0(m,p)
ARG1(m,f)
quant(f,1)
mod(m,o2)

(f2 / flower
      :ARG0-of (h / have-03
            :ARG1 (p / petal :quant 3))
      :ARG1-of (a / account-01 :polarity -
            :degree (a2 / at-all))
      :domain (i / it))

instance(f2,flower)
instance(h,have-03)
instance(p,petal)
instance(a,account-01)
instance(a2,at-all)
instance(i,it)
ARG0-of(f2,h)
ARG1(h,p)
quant(p,3)
ARG1-of(f2,a)
polarity(a,-)
degree(a,a2)
domain(f2,i)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m2 / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m2,morning)
instance(g,good-02)
ARG0(s,p)
mod(p,l)
ARG1(s,m2)
ARG1-of(m2,g)

(s / say-01
      :ARG0 (f / flower-01)
      :ARG1 (m2 / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(f,flower-01)
instance(m2,morning)
instance(g,good-02)
ARG0(s,f)
ARG1(s,m2)
ARG1-of(m2,g)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (b / be-located-at-91
            :ARG1 (m / man)
            :ARG2 (a2 / amr-unknown))
      :manner (p3 / polite-01))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(b,be-located-at-91)
instance(m,man)
instance(a2,amr-unknown)
instance(p3,polite-01)
ARG0(a,p)
mod(p,l)
ARG1(a,b)
ARG1(b,m)
ARG2(b,a2)
manner(a,p3)

(s / see-01 :frequency 1
      :ARG0 (f / flower)
      :ARG1 (p / pass-02
            :ARG0 (c / caravan-01)))

instance(s,see-01)
instance(f,flower)
instance(p,pass-02)
instance(c,caravan-01)
frequency(s,1)
ARG0(s,f)
ARG1(s,p)
ARG0(p,c)

(e / echo-01
      :ARG0 (s / she)
      :ARG1 (m / man
            :polarity (a / amr-unknown)))

instance(e,echo-01)
instance(s,she)
instance(m,man)
instance(a,amr-unknown)
ARG0(e,s)
ARG1(e,m)
polarity(m,a)

(t / think-01
  :ARG0 (i / i)
  :ARG1 (e / exist-01
          :ARG1 (t2 / they
                  :quant (o / or :op1 6 :op2 7))))

instance(t,think-01)
instance(i,i)
instance(e,exist-01)
instance(t2,they)
instance(o,or)
ARG0(t,i)
ARG1(t,e)
ARG1(e,t2)
quant(t2,o)
op1(o,6)
op2(o,7)

(s / see-01
      :ARG0 (i / i)
      :ARG1 (t / they)
      :time (b / before
            :op1 (n / now)
            :quant (s2 / several
                  :op1 (t2 / temporal-quantity :quant 1
                        :unit (y / year)))))

instance(s,see-01)
instance(i,i)
instance(t,they)
instance(b,before)
instance(n,now)
instance(s2,several)
instance(t2,temporal-quantity)
instance(y,year)
ARG0(s,i)
ARG1(s,t)
time(s,b)
op1(b,n)
quant(b,s2)
op1(s2,t2)
quant(t2,1)
unit(t2,y)

(c / contrast-01
      :ARG2 (k / know-01 :polarity -
            :ARG0 (o / one)
            :ARG1 (l / location
                  :location-of (f / find-01
                        :ARG0 o
                        :ARG1 (t / they)))
            :time (e / ever)))

instance(c,contrast-01)
instance(k,know-01)
instance(o,one)
instance(l,location)
instance(f,find-01)
instance(t,they)
instance(e,ever)
ARG2(c,k)
polarity(k,-)
ARG0(k,o)
ARG1(k,l)
location-of(l,f)
ARG0(f,o)
ARG1(f,t)
time(k,e)

(b / blow-01
  :ARG0 (w / wind)
  :ARG1 (t / they)
  :direction (a / away))

instance(b,blow-01)
instance(w,wind)
instance(t,they)
instance(a,away)
ARG0(b,w)
ARG1(b,t)
direction(b,a)

(a / and
      :op1 (h / have-03 :polarity -
            :ARG0 (t / they)
            :ARG1 (r / root))
      :op2 (m / make-02
            :ARG0 h
            :ARG1 (d / difficult
                  :domain (t2 / thing
                        :ARG1-of (l / live-01)
                        :poss t)
                  :degree (v / very))))

instance(a,and)
instance(h,have-03)
instance(t,they)
instance(r,root)
instance(m,make-02)
instance(d,difficult)
instance(t2,thing)
instance(l,live-01)
instance(v,very)
op1(a,h)
polarity(h,-)
ARG0(h,t)
ARG1(h,r)
op2(a,m)
ARG0(m,h)
ARG1(m,d)
domain(d,t2)
ARG1-of(t2,l)
poss(t2,t)
degree(d,v)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (g / goodbye))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(g,goodbye)
ARG0(s,p)
mod(p,l)
ARG1(s,g)

(s / say-01
  :ARG0 (f / flower)
  :ARG1 (g / goodbye))

instance(s,say-01)
instance(f,flower)
instance(g,goodbye)
ARG0(s,f)
ARG1(s,g)

(c / chapter :mod 19)

instance(c,chapter)
mod(c,19)

(c / climb-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / mountain
            :ARG1-of (h / high-02))
      :time (a / after
            :op1 (t / that)))

instance(c,climb-01)
instance(p,prince)
instance(l,little)
instance(m,mountain)
instance(h,high-02)
instance(a,after)
instance(t,that)
ARG0(c,p)
mod(p,l)
ARG1(c,m)
ARG1-of(m,h)
time(c,a)
op1(a,t)

(v / volcano :quant 3
  :domain (m / mountain
            :mod (o / only)
            :ARG1-of (k / know-01
                       :ARG0 (h / he)
                       :time (e / ever)))
  :ARG1-of (c / come-04
             :ARG2 (u / up-to
                     :op1 (k2 / knee
                            :part-of h))))

instance(v,volcano)
instance(m,mountain)
instance(o,only)
instance(k,know-01)
instance(h,he)
instance(e,ever)
instance(c,come-04)
instance(u,up-to)
instance(k2,knee)
quant(v,3)
domain(v,m)
mod(m,o)
ARG1-of(m,k)
ARG0(k,h)
time(k,e)
ARG1-of(v,c)
ARG2(c,u)
op1(u,k2)
part-of(k2,h)

(a / and
  :op2 (u / use-01
         :ARG0 (h / he)
         :ARG1 (v / volcano
                 :mod (e / extinct))
         :ARG2 (f / footstool)))

instance(a,and)
instance(u,use-01)
instance(h,he)
instance(v,volcano)
instance(e,extinct)
instance(f,footstool)
op2(a,u)
ARG0(u,h)
ARG1(u,v)
mod(v,e)
ARG2(u,f)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (p / possible-01
            :ARG1 (s2 / see-01
                  :ARG0 h
                  :ARG1 (a / and
                        :op1 (p2 / planet
                              :extent (w / whole))
                        :op2 (p3 / person
                              :mod (a3 / all)))
                  :source (m / mountain
                        :ARG1-of (h3 / have-degree-91
                              :ARG2 (h2 / high-02
                                    :ARG1 m)
                              :ARG3 (e / equal)
                              :ARG4 (m2 / mountain
                                    :mod (t / this))))
                  :manner (g / glance-01 :quant 1)))
      :ARG2 h)

instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(s2,see-01)
instance(a,and)
instance(p2,planet)
instance(w,whole)
instance(p3,person)
instance(a3,all)
instance(m,mountain)
instance(h3,have-degree-91)
instance(h2,high-02)
instance(e,equal)
instance(m2,mountain)
instance(t,this)
instance(g,glance-01)
ARG0(s,h)
ARG1(s,p)
ARG1(p,s2)
ARG0(s2,h)
ARG1(s2,a)
op1(a,p2)
extent(p2,w)
op2(a,p3)
mod(p3,a3)
source(s2,m)
ARG1-of(m,h3)
ARG2(h3,h2)
ARG1(h2,m)
ARG3(h3,e)
ARG4(h3,m2)
mod(m2,t)
manner(s2,g)
quant(g,1)
ARG2(s,h)

(c / contrast-01
      :ARG2 (s / see-01
            :ARG0 (h / he)
            :ARG1 (n / nothing
                  :ARG2-of (e / except-01
                        :ARG1 (p / peak
                              :consist-of (r / rock)
                              :ARG1-of (s2 / sharpen-01
                                    :manner (r2 / resemble-01
                                          :ARG1 p
                                          :ARG2 (n2 / needle))))))))

instance(c,contrast-01)
instance(s,see-01)
instance(h,he)
instance(n,nothing)
instance(e,except-01)
instance(p,peak)
instance(r,rock)
instance(s2,sharpen-01)
instance(r2,resemble-01)
instance(n2,needle)
ARG2(c,s)
ARG0(s,h)
ARG1(s,n)
ARG2-of(n,e)
ARG1(e,p)
consist-of(p,r)
ARG1-of(p,s2)
manner(s2,r2)
ARG1(r2,p)
ARG2(r2,n2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (m / morning
            :ARG1-of (g / good-02))
      :manner (c / courtesy))

instance(s,say-01)
instance(h,he)
instance(m,morning)
instance(g,good-02)
instance(c,courtesy)
ARG0(s,h)
ARG1(s,m)
ARG1-of(m,g)
manner(s,c)

(a / answer-01
      :ARG0 (e / echo-01)
      :ARG1 (m2 / morning
            :ARG1-of (g / good-02)))

instance(a,answer-01)
instance(e,echo-01)
instance(m2,morning)
instance(g,good-02)
ARG0(a,e)
ARG1(a,m2)
ARG1-of(m2,g)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG2 (y / you
          :domain (a / amr-unknown)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(y,you)
instance(a,amr-unknown)
ARG0(s,p)
mod(p,l)
ARG2(s,y)
domain(y,a)

(a / answer-01
  :ARG0 (e / echo-01)
  :ARG2 (y / you
          :domain (a2 / amr-unknown)))

instance(a,answer-01)
instance(e,echo-01)
instance(y,you)
instance(a2,amr-unknown)
ARG0(a,e)
ARG2(a,y)
domain(y,a2)

(h / have-rel-role-91 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (f / friend))

instance(h,have-rel-role-91)
instance(y,you)
instance(i,i)
instance(f,friend)
mode(h,imperative)
ARG0(h,y)
ARG1(h,i)
ARG2(h,f)

(s / say-01
  :ARG0 (h / he)
  :ARG1 (a / alone
          :degree (a2 / all)
          :domain h))

instance(s,say-01)
instance(h,he)
instance(a,alone)
instance(a2,all)
ARG0(s,h)
ARG1(s,a)
degree(a,a2)
domain(a,h)

(a / answer-01
      :ARG0 (e / echo-01)
      :ARG2 (a2 / alone
            :domain (i / i)
            :mod (a3 / all)))

instance(a,answer-01)
instance(e,echo-01)
instance(a2,alone)
instance(i,i)
instance(a3,all)
ARG0(a,e)
ARG2(a,a2)
domain(a2,i)
mod(a2,a3)

(t / think-01
      :ARG0 (h / he)
      :ARG1 (p / planet
            :mod (q / queer
                  :degree (s / so))))

instance(t,think-01)
instance(h,he)
instance(p,planet)
instance(q,queer)
instance(s,so)
ARG0(t,h)
ARG1(t,p)
mod(p,q)
degree(q,s)

(a / and
      :op1 (d / dry-08
            :ARG1 (i / it)
            :degree (a2 / altogether))
      :op2 (p / pointed
            :degree (a3 / altogether)
            :domain i)
      :op3 (a4 / and
            :op1 (h / harsh-02
                  :ARG1 i)
            :op2 (f / forbidding
                  :domain i)
            :degree (a5 / altogether)))

instance(a,and)
instance(d,dry-08)
instance(i,it)
instance(a2,altogether)
instance(p,pointed)
instance(a3,altogether)
instance(a4,and)
instance(h,harsh-02)
instance(f,forbidding)
instance(a5,altogether)
op1(a,d)
ARG1(d,i)
degree(d,a2)
op2(a,p)
degree(p,a3)
domain(p,i)
op3(a,a4)
op1(a4,h)
ARG1(h,i)
op2(a4,f)
domain(f,i)
degree(a4,a5)

(a / and
      :op2 (h / have-03
            :ARG0 (p / person)
            :ARG1 (i2 / imagine-01 :polarity -)))

instance(a,and)
instance(h,have-03)
instance(p,person)
instance(i2,imagine-01)
op2(a,h)
ARG0(h,p)
ARG1(h,i2)
polarity(i2,-)

(r / repeat-01
      :ARG0 (t2 / they)
      :ARG1 (t / thing
            :ARG1-of (s2 / say-01
                  :ARG0 (o / one)
                  :ARG2 t2)
            :mod (a / all)))

instance(r,repeat-01)
instance(t2,they)
instance(t,thing)
instance(s2,say-01)
instance(o,one)
instance(a,all)
ARG0(r,t2)
ARG1(r,t)
ARG1-of(t,s2)
ARG0(s2,o)
ARG2(s2,t2)
mod(t,a)

(h / have-03
      :ARG0 (i / i)
      :ARG1 (f / flower
            :ARG0-of (s / speak-01
                  :ord (o / ordinal-entity :value 1)
                  :time (a / always)))
      :location (p2 / planet
            :poss i))

instance(h,have-03)
instance(i,i)
instance(f,flower)
instance(s,speak-01)
instance(o,ordinal-entity)
instance(a,always)
instance(p2,planet)
ARG0(h,i)
ARG1(h,f)
ARG0-of(f,s)
ord(s,o)
value(o,1)
time(s,a)
location(h,p2)
poss(p2,i)

(c / chapter :mod 20)

instance(c,chapter)
mod(c,20)

(c / contrast-01
      :ARG2 (c2 / come-upon-26
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (r / road)
            :time (a / after
                  :op1 (w / walk-01
                        :ARG0 p
                        :path (a2 / and
                              :op1 (s / sand)
                              :op2 (r2 / rock)
                              :op3 (t / thing
                                    :ARG1-of (s2 / snow-01)))
                        :ARG1-of (l3 / long-03)))
            :time (a3 / at-last)))

instance(c,contrast-01)
instance(c2,come-upon-26)
instance(p,prince)
instance(l,little)
instance(r,road)
instance(a,after)
instance(w,walk-01)
instance(a2,and)
instance(s,sand)
instance(r2,rock)
instance(t,thing)
instance(s2,snow-01)
instance(l3,long-03)
instance(a3,at-last)
ARG2(c,c2)
ARG0(c2,p)
mod(p,l)
ARG1(c2,r)
time(c2,a)
op1(a,w)
ARG0(w,p)
path(w,a2)
op1(a2,s)
op2(a2,r2)
op3(a2,t)
ARG1-of(t,s2)
ARG1-of(w,l3)
time(c2,a3)

(a / and
      :op2 (l / lead-01
            :ARG0 (r / road
                  :mod (a2 / all))
            :ARG4 (a3 / abode
                  :poss (m / man))))

instance(a,and)
instance(l,lead-01)
instance(r,road)
instance(a2,all)
instance(a3,abode)
instance(m,man)
op2(a,l)
ARG0(l,r)
mod(r,a2)
ARG4(l,a3)
poss(a3,m)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(h,he)
instance(m,morning)
instance(g,good-02)
ARG0(s,h)
ARG1(s,m)
ARG1-of(m,g)

(s / stand-01
      :ARG1 (h / he)
      :ARG2 (b / before
            :op1 (g / garden
                  :location-of (b2 / bloom-01
                        :ARG0 (r / rose)))))

instance(s,stand-01)
instance(h,he)
instance(b,before)
instance(g,garden)
instance(b2,bloom-01)
instance(r,rose)
ARG1(s,h)
ARG2(s,b)
op1(b,g)
location-of(g,b2)
ARG0(b2,r)

(s / say-01
      :ARG0 (r / rose)
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(r,rose)
instance(m,morning)
instance(g,good-02)
ARG0(s,r)
ARG1(s,m)
ARG1-of(m,g)

(g / gaze-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / they))

instance(g,gaze-01)
instance(p,prince)
instance(l,little)
instance(t,they)
ARG0(g,p)
mod(p,l)
ARG1(g,t)

(l / look-02
      :ARG0 (t / they
            :mod (a / all))
      :ARG1 (f / flower
            :poss (h / he)))

instance(l,look-02)
instance(t,they)
instance(a,all)
instance(f,flower)
instance(h,he)
ARG0(l,t)
mod(t,a)
ARG1(l,f)
poss(f,h)

(d / demand-01
      :ARG0 (h / he
            :mod (t / thunderstruck))
      :ARG1 (a / amr-unknown
            :domain (y2 / you)))

instance(d,demand-01)
instance(h,he)
instance(t,thunderstruck)
instance(a,amr-unknown)
instance(y2,you)
ARG0(d,h)
mod(h,t)
ARG1(d,a)
domain(a,y2)

(s / say-01
  :ARG0 (r / rose)
  :ARG1 (r2 / rose
          :domain r))

instance(s,say-01)
instance(r,rose)
instance(r2,rose)
ARG0(s,r)
ARG1(s,r2)
domain(r2,r)

(a / and
      :op2 (o / overcome-01
            :ARG0 (s / sad-02)
            :ARG1 (h / he)))

instance(a,and)
instance(o,overcome-01)
instance(s,sad-02)
instance(h,he)
op2(a,o)
ARG0(o,s)
ARG1(o,h)

(t / tell-01
      :ARG0 (f / flower
            :poss (h / he))
      :ARG1 (u2 / unique-01
            :ARG1 (s / she)
            :ARG3 (u / universe
                  :mod (a / all)))
      :ARG2 h)

instance(t,tell-01)
instance(f,flower)
instance(h,he)
instance(u2,unique-01)
instance(s,she)
instance(u,universe)
instance(a,all)
ARG0(t,f)
poss(f,h)
ARG1(t,u2)
ARG1(u2,s)
ARG3(u2,u)
mod(u,a)
ARG2(t,h)

(a / and
      :op1 (t / they :quant 5000
            :ARG1-of (a2 / alike-05
                  :mod (a3 / all))
            :location (h / here)
            :location (g / garden :quant 1)))

instance(a,and)
instance(t,they)
instance(a2,alike-05)
instance(a3,all)
instance(h,here)
instance(g,garden)
op1(a,t)
quant(t,5000)
ARG1-of(t,a2)
mod(a2,a3)
location(t,h)
location(t,g)
quant(g,1)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (a / and
            :op1 (a2 / annoy-01
                  :ARG1 (s2 / she)
                  :degree (m2 / much
                        :degree (v / very)))
            :op2 (c / cough-01
                  :ARG0 s2
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (d2 / dreadful-02
                              :ARG1 c)
                        :ARG3 (m / most)))
            :op3 (p / pretend-01
                  :ARG0 s2
                  :ARG1 (d / die-01
                        :ARG1 s2)
                  :purpose (a3 / avoid-01
                        :ARG0 s2
                        :ARG1 (l / laugh-01
                              :ARG2 s2)))
            :condition (s3 / see-01
                  :ARG0 s2
                  :ARG1 (t / that)))
      :ARG2 h)

instance(s,say-01)
instance(h,he)
instance(a,and)
instance(a2,annoy-01)
instance(s2,she)
instance(m2,much)
instance(v,very)
instance(c,cough-01)
instance(h2,have-degree-91)
instance(d2,dreadful-02)
instance(m,most)
instance(p,pretend-01)
instance(d,die-01)
instance(a3,avoid-01)
instance(l,laugh-01)
instance(s3,see-01)
instance(t,that)
ARG0(s,h)
ARG1(s,a)
op1(a,a2)
ARG1(a2,s2)
degree(a2,m2)
degree(m2,v)
op2(a,c)
ARG0(c,s2)
ARG1-of(c,h2)
ARG2(h2,d2)
ARG1(d2,c)
ARG3(h2,m)
op3(a,p)
ARG0(p,s2)
ARG1(p,d)
ARG1(d,s2)
purpose(p,a3)
ARG0(a3,s2)
ARG1(a3,l)
ARG2(l,s2)
condition(a,s3)
ARG0(s3,s2)
ARG1(s3,t)
ARG2(s,h)

(a / and
      :op2 (o / oblige-02
            :ARG1 i
            :ARG2 (p / pretend-01
                  :ARG0 i
                  :ARG1 (n / nurse-01
                        :ARG0 i
                        :ARG1 s
                        :purpose (l / live-01
                              :ARG0 s))))
      :ARG1-of (c / cause-01
            :ARG0 (a2 / allow-01
                  :ARG0 (s / she)
                  :ARG1 (d / die-01
                        :ARG1 s)
                  :ARG1-of (r / real-04)
                  :condition (p2 / pretend-01 :polarity -
                        :ARG0 i
                        :ARG1 n
                        :purpose (h / humble-01
                              :ARG0 i
                              :ARG1 (i / i)
                              :mod (a3 / also))))))

instance(a,and)
instance(o,oblige-02)
instance(p,pretend-01)
instance(n,nurse-01)
instance(l,live-01)
instance(c,cause-01)
instance(a2,allow-01)
instance(s,she)
instance(d,die-01)
instance(r,real-04)
instance(p2,pretend-01)
instance(h,humble-01)
instance(i,i)
instance(a3,also)
op2(a,o)
ARG1(o,i)
ARG2(o,p)
ARG0(p,i)
ARG1(p,n)
ARG0(n,i)
ARG1(n,s)
purpose(n,l)
ARG0(l,s)
ARG1-of(a,c)
ARG0(c,a2)
ARG0(a2,s)
ARG1(a2,d)
ARG1(d,s)
ARG1-of(a2,r)
condition(a2,p2)
polarity(p2,-)
ARG0(p2,i)
ARG1(p2,n)
purpose(p2,h)
ARG0(h,i)
ARG1(h,i)
mod(h,a3)

(g / go-on-25
      :ARG0 h
      :ARG1 (r / reflect-02
            :ARG0 (h / he)
            :ARG1 (c2 / contrast-01
                  :ARG1 (t / think-01
                        :ARG0 h
                        :ARG1 (r3 / rich
                              :ARG1-of (c3 / cause-01
                                    :ARG0 (h3 / have-03
                                          :ARG0 h
                                          :ARG1 (f / flower
                                                :ARG1-of (u / unique-01
                                                      :ARG3 (w / world
                                                            :mod (a2 / all))))))
                              :domain h))
                  :ARG2 (h2 / have-03
                        :ARG0 h
                        :ARG1 (r2 / rose
                              :mod (c / common))
                        :mod (a / all))))
      :time (t2 / then))

instance(g,go-on-25)
instance(r,reflect-02)
instance(h,he)
instance(c2,contrast-01)
instance(t,think-01)
instance(r3,rich)
instance(c3,cause-01)
instance(h3,have-03)
instance(f,flower)
instance(u,unique-01)
instance(w,world)
instance(a2,all)
instance(h2,have-03)
instance(r2,rose)
instance(c,common)
instance(a,all)
instance(t2,then)
ARG0(g,h)
ARG1(g,r)
ARG0(r,h)
ARG1(r,c2)
ARG1(c2,t)
ARG0(t,h)
ARG1(t,r3)
ARG1-of(r3,c3)
ARG0(c3,h3)
ARG0(h3,h)
ARG1(h3,f)
ARG1-of(f,u)
ARG3(u,w)
mod(w,a2)
domain(r3,h)
ARG2(c2,h2)
ARG0(h2,h)
ARG1(h2,r2)
mod(r2,c)
mod(h2,a)
time(g,t2)

(m / make-02 :polarity -
      :ARG0 (a / and
            :op1 (r / rose
                  :mod (c / common))
            :op2 (v2 / volcano :quant 3
                  :ARG1-of (c2 / come-01
                        :ARG4 (k / knee
                              :part-of i)
                        :direction (u / up))
                  :ARG2-of (i2 / include-91
                        :ARG1 (v3 / volcano :quant 1
                              :mod (e / extinct
                                    :mod (p2 / perhaps)
                                    :duration (f / forever))))))
      :ARG1 (p / prince
            :mod (g / great
                  :degree (v / very))
            :domain (i / i)))

instance(m,make-02)
instance(a,and)
instance(r,rose)
instance(c,common)
instance(v2,volcano)
instance(c2,come-01)
instance(k,knee)
instance(u,up)
instance(i2,include-91)
instance(v3,volcano)
instance(e,extinct)
instance(p2,perhaps)
instance(f,forever)
instance(p,prince)
instance(g,great)
instance(v,very)
instance(i,i)
polarity(m,-)
ARG0(m,a)
op1(a,r)
mod(r,c)
op2(a,v2)
quant(v2,3)
ARG1-of(v2,c2)
ARG4(c2,k)
part-of(k,i)
direction(c2,u)
ARG2-of(v2,i2)
ARG1(i2,v3)
quant(v3,1)
mod(v3,e)
mod(e,p2)
duration(e,f)
ARG1(m,p)
mod(p,g)
degree(g,v)
domain(p,i)

(a2 / and
      :op2 (a / and
            :op1 (l / lie-07
                  :ARG1 (h / he)
                  :ARG2 (g / grass)
                  :direction (d / down))
            :op2 (c / cry-02
                  :ARG0 h)))

instance(a2,and)
instance(a,and)
instance(l,lie-07)
instance(h,he)
instance(g,grass)
instance(d,down)
instance(c,cry-02)
op2(a2,a)
op1(a,l)
ARG1(l,h)
ARG2(l,g)
direction(l,d)
op2(a,c)
ARG0(c,h)

(c / chapter :mod 21)

instance(c,chapter)
mod(c,21)

(a / appear-01
      :ARG1 (f / fox)
      :time (t / then))

instance(a,appear-01)
instance(f,fox)
instance(t,then)
ARG1(a,f)
time(a,t)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(f,fox)
instance(m,morning)
instance(g,good-02)
ARG0(s,f)
ARG1(s,m)
ARG1-of(m,g)

(r / respond-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG2 (m / morning
            :ARG1-of (g / good-02))
      :manner (p2 / polite-01)
      :concession (s / see-01
            :ARG0 p
            :ARG1 (n / nothing)
            :time (t / turn-01
                  :ARG1 p
                  :direction (a / around))))

instance(r,respond-01)
instance(p,prince)
instance(l,little)
instance(m,morning)
instance(g,good-02)
instance(p2,polite-01)
instance(s,see-01)
instance(n,nothing)
instance(t,turn-01)
instance(a,around)
ARG0(r,p)
mod(p,l)
ARG2(r,m)
ARG1-of(m,g)
manner(r,p2)
concession(r,s)
ARG0(s,p)
ARG1(s,n)
time(s,t)
ARG1(t,p)
direction(t,a)

(s / say-01
      :ARG0 (v / voice)
      :ARG1 (i / i
            :location (h / here
                  :location (u / under
                        :op1 (t / tree
                              :mod (a / apple)))
                  :mod (r / right))))

instance(s,say-01)
instance(v,voice)
instance(i,i)
instance(h,here)
instance(u,under)
instance(t,tree)
instance(a,apple)
instance(r,right)
ARG0(s,v)
ARG1(s,i)
location(i,h)
location(h,u)
op1(u,t)
mod(t,a)
mod(h,r)

(a / and
  :op1 (a2 / ask-01
         :ARG0 (p / prince
                 :mod (l / little))
         :ARG1 (y2 / you
                 :mod (a3 / amr-unknown)))
  :op2 (a4 / add-01
         :ARG0 p
         :ARG1 (l2 / look-01
                 :ARG0 p
                 :ARG1 y2
                 :ARG2 (p2 / pretty
                         :degree (v / very)))))

instance(a,and)
instance(a2,ask-01)
instance(p,prince)
instance(l,little)
instance(y2,you)
instance(a3,amr-unknown)
instance(a4,add-01)
instance(l2,look-01)
instance(p2,pretty)
instance(v,very)
op1(a,a2)
ARG0(a2,p)
mod(p,l)
ARG1(a2,y2)
mod(y2,a3)
op2(a,a4)
ARG0(a4,p)
ARG1(a4,l2)
ARG0(l2,p)
ARG1(l2,y2)
ARG2(l2,p2)
degree(p2,v)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (f2 / fox
          :domain f))

instance(s,say-01)
instance(f,fox)
instance(f2,fox)
ARG0(s,f)
ARG1(s,f2)
domain(f2,f)

(p / propose-01
      :ARG0 (p2 / prince
            :mod (l / little))
      :ARG1 (a / and
            :op1 (c / come-01)
            :op2 (p3 / play-01
                  :ARG3 p2)))

instance(p,propose-01)
instance(p2,prince)
instance(l,little)
instance(a,and)
instance(c,come-01)
instance(p3,play-01)
ARG0(p,p2)
mod(p2,l)
ARG1(p,a)
op1(a,c)
op2(a,p3)
ARG3(p3,p2)

(h / happy-01 :polarity -
      :ARG1 (i / i)
      :mod (s / so))

instance(h,happy-01)
instance(i,i)
instance(s,so)
polarity(h,-)
ARG1(h,i)
mod(h,s)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (p / possible-01 :polarity -
            :ARG1 (p2 / play-01
                  :ARG0 f
                  :ARG3 (y / you))))

instance(s,say-01)
instance(f,fox)
instance(p,possible-01)
instance(p2,play-01)
instance(y,you)
ARG0(s,f)
ARG1(s,p)
polarity(p,-)
ARG1(p,p2)
ARG0(p2,f)
ARG3(p2,y)

(t / tame-01
  :ARG1 (i / i)
  :polarity -)

instance(t,tame-01)
instance(i,i)
ARG1(t,i)
polarity(t,-)

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (e / excuse-01 :mode imperative :polite +
            :ARG0 (y / you)
            :ARG1 (i / i)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(e,excuse-01)
instance(y,you)
instance(i,i)
ARG0(s,p)
mod(p,l)
ARG1(s,e)
mode(e,imperative)
polite(e,+)
ARG0(e,y)
ARG1(e,i)

(c / contrast-01
      :ARG2 (a / add-01
            :ARG0 (h / he)
            :ARG1 (m / mean-01
                  :ARG1 (t2 / tame-01)
                  :ARG2 (a3 / amr-unknown))
            :time (a2 / after
                  :op1 (t / think-01
                        :mod (s / some)))))

instance(c,contrast-01)
instance(a,add-01)
instance(h,he)
instance(m,mean-01)
instance(t2,tame-01)
instance(a3,amr-unknown)
instance(a2,after)
instance(t,think-01)
instance(s,some)
ARG2(c,a)
ARG0(a,h)
ARG1(a,m)
ARG1(m,t2)
ARG2(m,a3)
time(a,a2)
op1(a2,t)
mod(t,s)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (l / live-01
          :ARG0 (y / you)
          :location (h / here
                      :polarity -)))

instance(s,say-01)
instance(f,fox)
instance(l,live-01)
instance(y,you)
instance(h,here)
ARG0(s,f)
ARG1(s,l)
ARG0(l,y)
location(l,h)
polarity(h,-)

(l / look-01
  :ARG0 (y / you)
  :ARG1 (a / amr-unknown))

instance(l,look-01)
instance(y,you)
instance(a,amr-unknown)
ARG0(l,y)
ARG1(l,a)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (l2 / look-01
          :ARG0 p
          :ARG1 (m / man)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(l2,look-01)
instance(m,man)
ARG0(s,p)
mod(p,l)
ARG1(s,l2)
ARG0(l2,p)
ARG1(l2,m)

(m / mean-01
      :ARG1 (t / tame-01)
      :ARG2 (a / amr-unknown))

instance(m,mean-01)
instance(t,tame-01)
instance(a,amr-unknown)
ARG1(m,t)
ARG2(m,a)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (m / man))

instance(s,say-01)
instance(f,fox)
instance(m,man)
ARG0(s,f)
ARG1(s,m)

(a / and
  :op1 (h / have-03
         :ARG0 (t / they)
         :ARG1 (g / gun))
  :op2 (h2 / hunt-01
         :ARG0 t))

instance(a,and)
instance(h,have-03)
instance(t,they)
instance(g,gun)
instance(h2,hunt-01)
op1(a,h)
ARG0(h,t)
ARG1(h,g)
op2(a,h2)
ARG0(h2,t)

(d / disturb-01
      :ARG0 (i / it)
      :degree (v / very))

instance(d,disturb-01)
instance(i,it)
instance(v,very)
ARG0(d,i)
degree(d,v)

(r / raise-03
  :ARG0 (t / they)
  :ARG1 (c / chicken)
  :mod (a / also))

instance(r,raise-03)
instance(t,they)
instance(c,chicken)
instance(a,also)
ARG0(r,t)
ARG1(r,c)
mod(r,a)

(i / interest-01
      :ARG0 (t / this)
      :ARG1 (t2 / they)
      :mod (o / only))

instance(i,interest-01)
instance(t,this)
instance(t2,they)
instance(o,only)
ARG0(i,t)
ARG1(i,t2)
mod(i,o)

(l / look-01
      :ARG0 (y / you)
      :ARG1 (c / chicken)
      :polarity (a / amr-unknown))

instance(l,look-01)
instance(y,you)
instance(c,chicken)
instance(a,amr-unknown)
ARG0(l,y)
ARG1(l,c)
polarity(l,a)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (n / no))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(n,no)
ARG0(s,p)
mod(p,l)
ARG1(s,n)

(l / look-01
      :ARG0 (i / i)
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 i
                  :ARG2 (f / friend))))

instance(l,look-01)
instance(i,i)
instance(p,person)
instance(h,have-rel-role-91)
instance(f,friend)
ARG0(l,i)
ARG1(l,p)
ARG0-of(p,h)
ARG1(h,i)
ARG2(h,f)

(m / mean-01
      :ARG1 (t / tame-01)
      :ARG2 (a / amr-unknown))

instance(m,mean-01)
instance(t,tame-01)
instance(a,amr-unknown)
ARG1(m,t)
ARG2(m,a)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (n / neglect-01
            :ARG1 (a / act-02)
            :ARG1-of (h / have-degree-91
                  :ARG2 (o / often
                        :frequency-of n)
                  :ARG3 (t / too))))

instance(s,say-01)
instance(f,fox)
instance(n,neglect-01)
instance(a,act-02)
instance(h,have-degree-91)
instance(o,often)
instance(t,too)
ARG0(s,f)
ARG1(s,n)
ARG1(n,a)
ARG1-of(n,h)
ARG2(h,o)
frequency-of(o,n)
ARG3(h,t)

(m / mean-01
      :ARG1 (i / it)
      :ARG2 (e / establish-01
            :ARG1 (t / tie-01)))

instance(m,mean-01)
instance(i,it)
instance(e,establish-01)
instance(t,tie-01)
ARG1(m,i)
ARG2(m,e)
ARG1(e,t)

(e / establish-01
      :ARG1 (t / tie-01)
      :polarity (a / amr-unknown))

instance(e,establish-01)
instance(t,tie-01)
instance(a,amr-unknown)
ARG1(e,t)
polarity(e,a)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (t / that
          :mod (j / just)))

instance(s,say-01)
instance(f,fox)
instance(t,that)
instance(j,just)
ARG0(s,f)
ARG1(s,t)
mod(t,j)

(o2 / opine-01
      :ARG0 (i / i)
      :ARG1 (b / boy
            :mod (l / little)
            :ARG1-of (r / resemble-01
                  :ARG2 (b2 / boy :quant 100000
                        :mod (l2 / little)
                        :mod (o / other))
                  :mod (j / just))
            :domain (y2 / you
                  :mod (m2 / more :polarity -))
            :mod (s2 / still)))

instance(o2,opine-01)
instance(i,i)
instance(b,boy)
instance(l,little)
instance(r,resemble-01)
instance(b2,boy)
instance(l2,little)
instance(o,other)
instance(j,just)
instance(y2,you)
instance(m2,more)
instance(s2,still)
ARG0(o2,i)
ARG1(o2,b)
mod(b,l)
ARG1-of(b,r)
ARG2(r,b2)
quant(b2,100000)
mod(b2,l2)
mod(b2,o)
mod(r,j)
domain(b,y2)
mod(y2,m2)
polarity(m2,-)
mod(b,s2)

(a / and
  :op2 (n / need-01
         :ARG0 (i / i)
         :ARG1 (y / you)
         :polarity -))

instance(a,and)
instance(n,need-01)
instance(i,i)
instance(y,you)
op2(a,n)
ARG0(n,i)
ARG1(n,y)
polarity(n,-)

(a / and
      :op2 (n / need-01 :polarity -
            :ARG0 (y / you)
            :ARG1 (i / i)))

instance(a,and)
instance(n,need-01)
instance(y,you)
instance(i,i)
op2(a,n)
polarity(n,-)
ARG0(n,y)
ARG1(n,i)

(o / opine-01
      :ARG0 (y2 / you)
      :ARG1 (f / fox
            :ARG1-of (r3 / resemble-01
                  :ARG2 (f2 / fox :quant 100000
                        :mod (o3 / other)))
            :domain (i / i
                  :mod (m2 / more :polarity -))))

instance(o,opine-01)
instance(y2,you)
instance(f,fox)
instance(r3,resemble-01)
instance(f2,fox)
instance(o3,other)
instance(i,i)
instance(m2,more)
ARG0(o,y2)
ARG1(o,f)
ARG1-of(f,r3)
ARG2(r3,f2)
quant(f2,100000)
mod(f2,o3)
domain(f,i)
mod(i,m2)
polarity(m2,-)

(c / contrast-01
  :ARG2 (n / need-01
          :ARG0 (w / we)
          :ARG1 (o / other
                  :mod (e / each))
          :condition (t / tame-01
                       :ARG0 (y / you)
                       :ARG1 (i / i))))

instance(c,contrast-01)
instance(n,need-01)
instance(w,we)
instance(o,other)
instance(e,each)
instance(t,tame-01)
instance(y,you)
instance(i,i)
ARG2(c,n)
ARG0(n,w)
ARG1(n,o)
mod(o,e)
condition(n,t)
ARG0(t,y)
ARG1(t,i)

(o / opine-01
      :ARG0 (i / i)
      :ARG1 (u / unique-01
            :ARG1 (y / you)
            :ARG3 (w / world
                  :mod (a / all))))

instance(o,opine-01)
instance(i,i)
instance(u,unique-01)
instance(y,you)
instance(w,world)
instance(a,all)
ARG0(o,i)
ARG1(o,u)
ARG1(u,y)
ARG3(u,w)
mod(w,a)

(o / opine-01
      :ARG0 (y / you)
      :ARG1 (u / unique-01
            :ARG1 (i / i)
            :ARG3 (w / world
                  :mod (a / all))))

instance(o,opine-01)
instance(y,you)
instance(u,unique-01)
instance(i,i)
instance(w,world)
instance(a,all)
ARG0(o,y)
ARG1(o,u)
ARG1(u,i)
ARG3(u,w)
mod(w,a)

(s / say-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (b / begin-01
          :ARG0 (i / i)
          :ARG1 (u / understand-01
                  :ARG0 i)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(b,begin-01)
instance(i,i)
instance(u,understand-01)
ARG0(s,p)
mod(p,l)
ARG1(s,b)
ARG0(b,i)
ARG1(b,u)
ARG0(u,i)

(f / flower)

instance(f,flower)

(t / think-01
  :ARG0 (i / i)
  :ARG1 (t2 / tame-01
          :ARG0 (s / she)
          :ARG1 i))

instance(t,think-01)
instance(i,i)
instance(t2,tame-01)
instance(s,she)
ARG0(t,i)
ARG1(t,t2)
ARG0(t2,s)
ARG1(t2,i)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (p / possible-01
          :ARG1 (i / it)))

instance(s,say-01)
instance(f,fox)
instance(p,possible-01)
instance(i,it)
ARG0(s,f)
ARG1(s,p)
ARG1(p,i)

(s / see-01
      :ARG0 (o / one)
      :ARG1 (t / thing
            :mod (s2 / sort
                  :mod (a / all)))
      :location (p / planet :wiki "Earth"
            :name (n / name :op1 "Earth")))

instance(s,see-01)
instance(o,one)
instance(t,thing)
instance(s2,sort)
instance(a,all)
instance(p,planet)
instance(n,name)
ARG0(s,o)
ARG1(s,t)
mod(t,s2)
mod(s2,a)
location(s,p)
wiki(p,"Earth")
name(p,n)
op1(n,"Earth")

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (a / and
            :op1 (o / oh :mode expressive)
            :op2 (c / contrast-01
                  :ARG2 (b / be-located-at-91 :polarity -
                        :ARG1 (t / this)
                        :ARG2 (p2 / planet :wiki "Earth" :name (n / name :op1 "Earth"))))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(a,and)
instance(o,oh)
instance(c,contrast-01)
instance(b,be-located-at-91)
instance(t,this)
instance(p2,planet)
instance(n,name)
ARG0(s,p)
mod(p,l)
ARG1(s,a)
op1(a,o)
mode(o,expressive)
op2(a,c)
ARG2(c,b)
polarity(b,-)
ARG1(b,t)
ARG2(b,p2)
wiki(p2,"Earth")
name(p2,n)
op1(n,"Earth")

(s / seem-01
  :ARG1 (a / and
          :op1 (p / perplex-01
                 :ARG1 (f / fox))
          :op2 (c / curious-01
                 :ARG1 f
                 :degree (v / very))))

instance(s,seem-01)
instance(a,and)
instance(p,perplex-01)
instance(f,fox)
instance(c,curious-01)
instance(v,very)
ARG1(s,a)
op1(a,p)
ARG1(p,f)
op2(a,c)
ARG1(c,f)
degree(c,v)

(b / be-located-at-91
      :ARG2 (p / planet
            :mod (a2 / another))
      :polarity (a / amr-unknown))

instance(b,be-located-at-91)
instance(p,planet)
instance(a2,another)
instance(a,amr-unknown)
ARG2(b,p)
mod(p,a2)
polarity(b,a)

(y / yes)

instance(y,yes)

(p / person
      :ARG0-of (h / hunt-01)
      :location (p2 / planet
            :mod (t / this))
      :polarity (a / amr-unknown))

instance(p,person)
instance(h,hunt-01)
instance(p2,planet)
instance(t,this)
instance(a,amr-unknown)
ARG0-of(p,h)
location(p,p2)
mod(p2,t)
polarity(p,a)

(n / no)

instance(n,no)

(a / ah-01
  :ARG1 (i2 / interest-01
          :ARG0 (t / that)))

instance(a,ah-01)
instance(i2,interest-01)
instance(t,that)
ARG1(a,i2)
ARG0(i2,t)

(c / chicken
      :polarity (a / amr-unknown))

instance(c,chicken)
instance(a,amr-unknown)
polarity(c,a)

(n / no)

instance(n,no)

(s / sigh-01
      :ARG0 (f / fox)
      :ARG1 (p / perfect-02
            :ARG1 (n / nothing)))

instance(s,sigh-01)
instance(f,fox)
instance(p,perfect-02)
instance(n,nothing)
ARG0(s,f)
ARG1(s,p)
ARG1(p,n)

(c2 / contrast-01
  :ARG2 (c / come-01
          :ARG1 (h / he)
          :ARG4 (i / idea
                  :poss h)
          :direction (b2 / back)))

instance(c2,contrast-01)
instance(c,come-01)
instance(h,he)
instance(i,idea)
instance(b2,back)
ARG2(c2,c)
ARG1(c,h)
ARG4(c,i)
poss(i,h)
direction(c,b2)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (m / monotonous
          :domain (l / life
                    :poss (i / i))
          :degree (v / very)))

instance(s,say-01)
instance(f,fox)
instance(m,monotonous)
instance(l,life)
instance(i,i)
instance(v,very)
ARG0(s,f)
ARG1(s,m)
domain(m,l)
poss(l,i)
degree(m,v)

(a / and
  :op1 (h / hunt-01
         :ARG0 (i / i)
         :ARG1 (c / chicken))
  :op2 (h2 / hunt-01
         :ARG0 (m / man)
         :ARG1 i))

instance(a,and)
instance(h,hunt-01)
instance(i,i)
instance(c,chicken)
instance(h2,hunt-01)
instance(m,man)
op1(a,h)
ARG0(h,i)
ARG1(h,c)
op2(a,h2)
ARG0(h2,m)
ARG1(h2,i)

(a / and
      :op1 (a2 / alike-05
            :ARG1 (c / chicken
                  :mod (a5 / all))
            :mod (j / just))
      :op2 (a3 / alike-05
            :ARG1 (m / man
                  :mod (a7 / all))
            :mod (j2 / just)))

instance(a,and)
instance(a2,alike-05)
instance(c,chicken)
instance(a5,all)
instance(j,just)
instance(a3,alike-05)
instance(m,man)
instance(a7,all)
instance(j2,just)
op1(a,a2)
ARG1(a2,c)
mod(c,a5)
mod(a2,j)
op2(a,a3)
ARG1(a3,m)
mod(m,a7)
mod(a3,j2)

(a / and
      :op2 (c / consequence-03
            :ARG2 (b / bore-02
                  :ARG1 (i / i)
                  :degree (l / little))))

instance(a,and)
instance(c,consequence-03)
instance(b,bore-02)
instance(i,i)
instance(l,little)
op2(a,c)
ARG2(c,b)
ARG1(b,i)
degree(b,l)

(c / contrast-01
  :ARG2 (s / shine-01
          :ARG1 (s2 / sun)
          :ARG2 (l / life
                  :poss (i / i))
          :condition (t / tame-01
                       :ARG0 (y / you)
                       :ARG1 i)))

instance(c,contrast-01)
instance(s,shine-01)
instance(s2,sun)
instance(l,life)
instance(i,i)
instance(t,tame-01)
instance(y,you)
ARG2(c,s)
ARG1(s,s2)
ARG2(s,l)
poss(l,i)
condition(s,t)
ARG0(t,y)
ARG1(t,i)

(k / know-04
      :ARG0 (i / i)
      :ARG1 (s / sound-02
            :ARG1 (s2 / step-01
                  :ARG1-of (d / differ-02
                        :ARG2 (s3 / step-01
                              :mod (o / other
                                    :mod (a / all)))))))

instance(k,know-04)
instance(i,i)
instance(s,sound-02)
instance(s2,step-01)
instance(d,differ-02)
instance(s3,step-01)
instance(o,other)
instance(a,all)
ARG0(k,i)
ARG1(k,s)
ARG1(s,s2)
ARG1-of(s2,d)
ARG2(d,s3)
mod(s3,o)
mod(o,a)

(s / send-03
  :ARG0 (s2 / step-01
          :mod (o / other))
  :ARG1 (i / i)
  :ARG4 (u / underneath
          :op1 (g / ground))
  :ARG5 (b / back)
  :manner (h / hurry-01
            :ARG1 i))

instance(s,send-03)
instance(s2,step-01)
instance(o,other)
instance(i,i)
instance(u,underneath)
instance(g,ground)
instance(b,back)
instance(h,hurry-01)
ARG0(s,s2)
mod(s2,o)
ARG1(s,i)
ARG4(s,u)
op1(u,g)
ARG5(s,b)
manner(s,h)
ARG1(h,i)

(c / call-03
      :ARG0 (s / step-01
            :ARG1 (y / you))
      :ARG1 (o / out-06
            :ARG1 i
            :ARG2 (b / burrow
                  :poss i))
      :ARG2 (i / i)
      :ARG1-of (r / resemble-01
            :ARG2 (m / music)))

instance(c,call-03)
instance(s,step-01)
instance(y,you)
instance(o,out-06)
instance(b,burrow)
instance(i,i)
instance(r,resemble-01)
instance(m,music)
ARG0(c,s)
ARG1(s,y)
ARG1(c,o)
ARG1(o,i)
ARG2(o,b)
poss(b,i)
ARG2(c,i)
ARG1-of(c,r)
ARG2(r,m)

(a / and
      :op2 (l / look-01 :mode imperative
            :ARG0 y
            :time (t / then))
      :op3 (s / see-01
            :ARG0 (y / you)
            :ARG1 (f / field
                  :mod (g / grain)
                  :location (y2 / yonder
                        :mod (d / down)))
            :polarity (a2 / amr-unknown)))

instance(a,and)
instance(l,look-01)
instance(t,then)
instance(s,see-01)
instance(y,you)
instance(f,field)
instance(g,grain)
instance(y2,yonder)
instance(d,down)
instance(a2,amr-unknown)
op2(a,l)
mode(l,imperative)
ARG0(l,y)
time(l,t)
op3(a,s)
ARG0(s,y)
ARG1(s,f)
mod(f,g)
location(f,y2)
mod(y2,d)
polarity(s,a2)

(e / eat-01
  :ARG0 (i / i)
  :ARG1 (b / bread)
  :polarity -)

instance(e,eat-01)
instance(i,i)
instance(b,bread)
ARG0(e,i)
ARG1(e,b)
polarity(e,-)

(u / use-01
  :ARG0 (i / i)
  :ARG1 (w / wheat)
  :polarity -)

instance(u,use-01)
instance(i,i)
instance(w,wheat)
ARG0(u,i)
ARG1(u,w)
polarity(u,-)

(s / say-01
  :ARG0 (f / field
          :mod (w / wheat))
  :ARG1 (n / nothing)
  :ARG2 (i / i))

instance(s,say-01)
instance(f,field)
instance(w,wheat)
instance(n,nothing)
instance(i,i)
ARG0(s,f)
mod(f,w)
ARG1(s,n)
ARG2(s,i)

(a / and
      :op2 (s / sad-02
            :ARG0 (t2 / that)))

instance(a,and)
instance(s,sad-02)
instance(t2,that)
op2(a,s)
ARG0(s,t2)

(c2 / contrast-01
      :ARG2 (h / have-03
            :ARG0 (y / you)
            :ARG1 (h2 / hair
                  :mod (c / color
                        :mod (g / gold)))))

instance(c2,contrast-01)
instance(h,have-03)
instance(y,you)
instance(h2,hair)
instance(c,color)
instance(g,gold)
ARG2(c2,h)
ARG0(h,y)
ARG1(h,h2)
mod(h2,c)
mod(c,g)

(t / think-01 :mode imperative
      :ARG0 y
      :ARG1 (w / wonderful-03
            :ARG1 (t2 / tame-01
                  :ARG0 (y / you)
                  :ARG1 (i / i))
            :degree (a / amr-unknown)))

instance(t,think-01)
instance(w,wonderful-03)
instance(t2,tame-01)
instance(y,you)
instance(i,i)
instance(a,amr-unknown)
mode(t,imperative)
ARG0(t,y)
ARG1(t,w)
ARG1(w,t2)
ARG0(t2,y)
ARG1(t2,i)
degree(w,a)

(b / bring-01
  :ARG0 (g / grain
          :mod (g2 / golden
                 :mod (a / also)))
  :ARG1 (t / think-01
          :ARG1 (y / you))
  :ARG2 (i / i)
  :direction (b2 / back))

instance(b,bring-01)
instance(g,grain)
instance(g2,golden)
instance(a,also)
instance(t,think-01)
instance(y,you)
instance(i,i)
instance(b2,back)
ARG0(b,g)
mod(g,g2)
mod(g2,a)
ARG1(b,t)
ARG1(t,y)
ARG2(b,i)
direction(b,b2)

(a / and
  :op2 (l / love-02
         :ARG0 (i / i)
         :ARG1 (l2 / listen-01
                 :ARG0 i
                 :ARG1 (w / wind
                         :location (w2 / wheat)))))

instance(a,and)
instance(l,love-02)
instance(i,i)
instance(l2,listen-01)
instance(w,wind)
instance(w2,wheat)
op2(a,l)
ARG0(l,i)
ARG1(l,l2)
ARG0(l2,i)
ARG1(l2,w)
location(w,w2)

(g / gaze-01
      :ARG0 (f / fox)
      :ARG1 (p / prince
            :mod (l / little))
      :ARG1-of (l2 / long-03))

instance(g,gaze-01)
instance(f,fox)
instance(p,prince)
instance(l,little)
instance(l2,long-03)
ARG0(g,f)
ARG1(g,p)
mod(p,l)
ARG1-of(g,l2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (t / tame-01 :mode imperative :polite +
            :ARG0 (y / you)
            :ARG1 h))

instance(s,say-01)
instance(h,he)
instance(t,tame-01)
instance(y,you)
ARG0(s,h)
ARG1(s,t)
mode(t,imperative)
polite(t,+)
ARG0(t,y)
ARG1(t,h)

(r / reply-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG2 (w / want-01
          :ARG0 p
          :ARG1 (t / tame-01
                  :ARG0 p
                  :ARG1 (y / you))
          :degree (m / much
                    :degree (v / very))))

instance(r,reply-01)
instance(p,prince)
instance(l,little)
instance(w,want-01)
instance(t,tame-01)
instance(y,you)
instance(m,much)
instance(v,very)
ARG0(r,p)
mod(p,l)
ARG2(r,w)
ARG0(w,p)
ARG1(w,t)
ARG0(t,p)
ARG1(t,y)
degree(w,m)
degree(m,v)

(c / contrast-01
  :ARG2 (h / have-03
          :ARG0 (i / i)
          :ARG1 (t / time
                  :quant (m / much
                           :polarity -))))

instance(c,contrast-01)
instance(h,have-03)
instance(i,i)
instance(t,time)
instance(m,much)
ARG2(c,h)
ARG0(h,i)
ARG1(h,t)
quant(t,m)
polarity(m,-)

(o / obligate-01
      :ARG2 (a / and
            :op1 (d / discover-01
                  :ARG0 (i / i)
                  :ARG1 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 i
                              :ARG2 (f / friend))))
            :op2 (u / understand-01
                  :ARG0 i
                  :ARG1 (t / thing
                        :quant (m / many
                              :mod (g / great))))))

instance(o,obligate-01)
instance(a,and)
instance(d,discover-01)
instance(i,i)
instance(p,person)
instance(h,have-rel-role-91)
instance(f,friend)
instance(u,understand-01)
instance(t,thing)
instance(m,many)
instance(g,great)
ARG2(o,a)
op1(a,d)
ARG0(d,i)
ARG1(d,p)
ARG0-of(p,h)
ARG1(h,i)
ARG2(h,f)
op2(a,u)
ARG0(u,i)
ARG1(u,t)
quant(t,m)
mod(m,g)

(s / say-01
  :ARG0 (f / fox)
  :ARG1 (u / understand-01
          :ARG0 (o / one)
          :ARG1 (t / thing
                  :ARG1-of (t2 / tame-01
                             :ARG0 o))
          :mod (o2 / only)))

instance(s,say-01)
instance(f,fox)
instance(u,understand-01)
instance(o,one)
instance(t,thing)
instance(t2,tame-01)
instance(o2,only)
ARG0(s,f)
ARG1(s,u)
ARG0(u,o)
ARG1(u,t)
ARG1-of(t,t2)
ARG0(t2,o)
mod(u,o2)

(h / have-03
  :ARG0 (m / man)
  :ARG1 (t / time
          :duration-of (u / understand-01
                         :ARG0 m
                         :ARG1 (a / anything)))
  :polarity -)

instance(h,have-03)
instance(m,man)
instance(t,time)
instance(u,understand-01)
instance(a,anything)
ARG0(h,m)
ARG1(h,t)
duration-of(t,u)
ARG0(u,m)
ARG1(u,a)
polarity(h,-)

(b / buy-01
  :ARG0 (t / they)
  :ARG1 (t2 / thing
          :ARG1-of (m / make-01
                     :time (a / already)))
  :location (s / shop))

instance(b,buy-01)
instance(t,they)
instance(t2,thing)
instance(m,make-01)
instance(a,already)
instance(s,shop)
ARG0(b,t)
ARG1(b,t2)
ARG1-of(t2,m)
time(m,a)
location(b,s)

(c / contrast-01
      :ARG2 (p / possible-01 :polarity -
            :ARG1 (b / buy-01
                  :ARG0 (o / one)
                  :ARG1 (f / friendship)
                  :location (s / shop
                        :location (a2 / anywhere))
                  :ARG0-of (c2 / cause-01
                        :ARG1 (h / have-rel-role-91 :polarity -
                              :ARG0 (p2 / person)
                              :ARG1 (m / man)
                              :ARG2 (f2 / friend)
                              :mod (a / anymore))))))

instance(c,contrast-01)
instance(p,possible-01)
instance(b,buy-01)
instance(o,one)
instance(f,friendship)
instance(s,shop)
instance(a2,anywhere)
instance(c2,cause-01)
instance(h,have-rel-role-91)
instance(p2,person)
instance(m,man)
instance(f2,friend)
instance(a,anymore)
ARG2(c,p)
polarity(p,-)
ARG1(p,b)
ARG0(b,o)
ARG1(b,f)
location(b,s)
location(s,a2)
ARG0-of(b,c2)
ARG1(c2,h)
polarity(h,-)
ARG0(h,p2)
ARG1(h,m)
ARG2(h,f2)
mod(h,a)

(t / tame-01
      :ARG0 (y / you)
      :ARG1 (i / i)
      :condition (w / want-01
            :ARG0 y
            :ARG1 (h / have-rel-role-91
                  :ARG0 (p / person)
                  :ARG1 y
                  :ARG2 (f / friend))))

instance(t,tame-01)
instance(y,you)
instance(i,i)
instance(w,want-01)
instance(h,have-rel-role-91)
instance(p,person)
instance(f,friend)
ARG0(t,y)
ARG1(t,i)
condition(t,w)
ARG0(w,y)
ARG1(w,h)
ARG0(h,p)
ARG1(h,y)
ARG2(h,f)

(a / ask-01
  :ARG0 (p / prince
          :mod (l / little))
  :ARG1 (o / obligate-01
          :ARG2 (d / do-02
                  :ARG0 p
                  :ARG1 (a2 / amr-unknown)
                  :purpose (t / tame-01
                             :ARG0 p
                             :ARG1 (y / you)))))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(o,obligate-01)
instance(d,do-02)
instance(a2,amr-unknown)
instance(t,tame-01)
instance(y,you)
ARG0(a,p)
mod(p,l)
ARG1(a,o)
ARG2(o,d)
ARG0(d,p)
ARG1(d,a2)
purpose(d,t)
ARG0(t,p)
ARG1(t,y)

(r / reply-01
      :ARG0 (f / fox)
      :ARG2 (o / obligate-01
            :ARG2 (p / patient-01
                  :ARG1 (y / you)
                  :degree (v / very))))

instance(r,reply-01)
instance(f,fox)
instance(o,obligate-01)
instance(p,patient-01)
instance(y,you)
instance(v,very)
ARG0(r,f)
ARG2(r,o)
ARG2(o,p)
ARG1(p,y)
degree(p,v)

(s / sit-down-02
      :ARG1 (y / you)
      :time (f / first)
      :location (r / relative-position
            :op1 (i / i)
            :quant (d / distance
                  :mod (l / little)))
      :direction (d2 / down
            :location (g / grass))
      :example (t / that))

instance(s,sit-down-02)
instance(y,you)
instance(f,first)
instance(r,relative-position)
instance(i,i)
instance(d,distance)
instance(l,little)
instance(d2,down)
instance(g,grass)
instance(t,that)
ARG1(s,y)
time(s,f)
location(s,r)
op1(r,i)
quant(r,d)
mod(d,l)
direction(s,d2)
location(d2,g)
example(s,t)

(a / and
      :op1 (l / look-01
            :ARG0 (i / i)
            :ARG1 (y / you)
            :direction (o / out-of
                  :op1 (c / corner
                        :part-of (e / eye
                              :part-of i))))
      :op2 (s / say-01
            :ARG0 y
            :ARG1 (n / nothing)))

instance(a,and)
instance(l,look-01)
instance(i,i)
instance(y,you)
instance(o,out-of)
instance(c,corner)
instance(e,eye)
instance(s,say-01)
instance(n,nothing)
op1(a,l)
ARG0(l,i)
ARG1(l,y)
direction(l,o)
op1(o,c)
part-of(c,e)
part-of(e,i)
op2(a,s)
ARG0(s,y)
ARG1(s,n)

(s / source-01
      :ARG1 (m / misunderstand-01)
      :ARG2 (w / word))

instance(s,source-01)
instance(m,misunderstand-01)
instance(w,word)
ARG1(s,m)
ARG2(s,w)

(c2 / contrast-01
      :ARG2 (s / sit-01
            :ARG1 (y / you)
            :ARG1-of (h / have-degree-91
                  :ARG2 (c / close-10
                        :ARG1 y
                        :ARG2 (i / i)
                        :frequency (r2 / rate-entity-91
                              :ARG3 (t / temporal-quantity :quant 1
                                    :unit (d / day))))
                  :ARG3 (m / more
                        :quant (l / little)))))

instance(c2,contrast-01)
instance(s,sit-01)
instance(y,you)
instance(h,have-degree-91)
instance(c,close-10)
instance(i,i)
instance(r2,rate-entity-91)
instance(t,temporal-quantity)
instance(d,day)
instance(m,more)
instance(l,little)
ARG2(c2,s)
ARG1(s,y)
ARG1-of(s,h)
ARG2(h,c)
ARG1(c,y)
ARG2(c,i)
frequency(c,r2)
ARG3(r2,t)
quant(t,1)
unit(t,d)
ARG3(h,m)
quant(m,l)

(c / come-01
      :ARG1 (p / prince
            :mod (l / little))
      :direction (b / back)
      :time (d / day
            :mod (n / next)))

instance(c,come-01)
instance(p,prince)
instance(l,little)
instance(b,back)
instance(d,day)
instance(n,next)
ARG1(c,p)
mod(p,l)
direction(c,b)
time(c,d)
mod(d,n)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (h2 / have-degree-91
            :ARG1 (c / come-01
                  :direction (b2 / back)
                  :time (h / hour
                        :ARG1-of (s2 / same-01)))
            :ARG2 (g / good-02
                  :ARG1 c)
            :ARG3 (m / more)))

instance(s,say-01)
instance(f,fox)
instance(h2,have-degree-91)
instance(c,come-01)
instance(b2,back)
instance(h,hour)
instance(s2,same-01)
instance(g,good-02)
instance(m,more)
ARG0(s,f)
ARG1(s,h2)
ARG1(h2,c)
direction(c,b2)
time(c,h)
ARG1-of(h,s2)
ARG2(h2,g)
ARG1(g,c)
ARG3(h2,m)

(b / begin-01
      :ARG0 (i / i)
      :ARG1 (h / happy-01
            :ARG1 i)
      :condition (c / come-01
            :ARG1 (y / you)
            :time (d2 / date-entity :time "16:00")
            :ARG0-of (e / exemplify-01))
      :time (d / date-entity :time "15:00"))

instance(b,begin-01)
instance(i,i)
instance(h,happy-01)
instance(c,come-01)
instance(y,you)
instance(d2,date-entity)
instance(e,exemplify-01)
instance(d,date-entity)
ARG0(b,i)
ARG1(b,h)
ARG1(h,i)
condition(b,c)
ARG1(c,y)
time(c,d2)
time(d2,"16)
00"(d2,)
ARG0-of(,e)
time(d2,d)
time(d,"15)
00")(d,)

(c / correlate-91
      :ARG1 (m / more
            :ARG3-of (h / have-degree-91
                  :ARG1 (i / i)
                  :ARG2 (h4 / happy-01
                        :ARG1 i)))
      :ARG2 (m2 / more
            :ARG3-of (h2 / have-quant-91
                  :ARG1 (a / advance-01
                        :ARG1 (h3 / hour)))))

instance(c,correlate-91)
instance(m,more)
instance(h,have-degree-91)
instance(i,i)
instance(h4,happy-01)
instance(m2,more)
instance(h2,have-quant-91)
instance(a,advance-01)
instance(h3,hour)
ARG1(c,m)
ARG3-of(m,h)
ARG1(h,i)
ARG2(h,h4)
ARG1(h4,i)
ARG2(c,m2)
ARG3-of(m2,h2)
ARG1(h2,a)
ARG1(a,h3)

(a / and
      :op1 (w / worry-01
            :ARG1 (i / i))
      :op2 (j / jump-03
            :ARG0 i
            :direction (a2 / about))
      :time (d / date-entity :time "16:00")
      :time (a3 / already))

instance(a,and)
instance(w,worry-01)
instance(i,i)
instance(j,jump-03)
instance(a2,about)
instance(d,date-entity)
instance(a3,already)
op1(a,w)
ARG1(w,i)
op2(a,j)
ARG0(j,i)
direction(j,a2)
time(a,d)
time(d,"16)
00"(d,)
time(,a3)

(s / show-01
      :ARG0 (i / i)
      :ARG1 (h / happy-01
            :ARG1 i
            :degree (s2 / so))
      :ARG2 (y / you))

instance(s,show-01)
instance(i,i)
instance(h,happy-01)
instance(s2,so)
instance(y,you)
ARG0(s,i)
ARG1(s,h)
ARG1(h,i)
degree(h,s2)
ARG2(s,y)

(c / contrast-01
      :ARG2 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (h3 / hour
                  :time (r / ready-02
                        :ARG1 (h2 / heart
                              :part-of i)
                        :ARG2 (g / greet-01
                              :ARG0 h2
                              :ARG1 (y / you))))
            :time (e / ever)
            :condition (c2 / come-01
                  :ARG1 y
                  :time (t / time
                        :mod (a2 / any
                              :mod (j2 / just))))))

instance(c,contrast-01)
instance(k,know-01)
instance(i,i)
instance(h3,hour)
instance(r,ready-02)
instance(h2,heart)
instance(g,greet-01)
instance(y,you)
instance(e,ever)
instance(c2,come-01)
instance(t,time)
instance(a2,any)
instance(j2,just)
ARG2(c,k)
polarity(k,-)
ARG0(k,i)
ARG1(k,h3)
time(h3,r)
ARG1(r,h2)
part-of(h2,i)
ARG2(r,g)
ARG0(g,h2)
ARG1(g,y)
time(k,e)
condition(k,c2)
ARG1(c2,y)
time(c2,t)
mod(t,a2)
mod(a2,j2)

(o / obligate-01
      :ARG1 (o3 / one)
      :ARG2 (o2 / observe-01
            :ARG0 o3
            :ARG1 (r / rite
                  :mod (p2 / proper))))

instance(o,obligate-01)
instance(o3,one)
instance(o2,observe-01)
instance(r,rite)
instance(p2,proper)
ARG1(o,o3)
ARG2(o,o2)
ARG0(o2,o3)
ARG1(o2,r)
mod(r,p2)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (r / rite
            :domain (a2 / amr-unknown)))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(r,rite)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,r)
domain(r,a2)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (a / act-02
            :domain (t2 / that)
            :ARG1-of (n2 / neglect-01
                  :ARG1-of (h / have-degree-91
                        :ARG2 (o / often
                              :frequency-of n2)
                        :ARG3 (t3 / too)))
            :mod (a3 / also)))

instance(s,say-01)
instance(f,fox)
instance(a,act-02)
instance(t2,that)
instance(n2,neglect-01)
instance(h,have-degree-91)
instance(o,often)
instance(t3,too)
instance(a3,also)
ARG0(s,f)
ARG1(s,a)
domain(a,t2)
ARG1-of(a,n2)
ARG1-of(n2,h)
ARG2(h,o)
frequency-of(o,n2)
ARG3(h,t3)
mod(a,a3)

(t2 / thing
      :domain (t / they)
      :ARG0-of (m / make-02
            :ARG1 (a / and
                  :op1 (d / differ-02
                        :ARG1 (d2 / day
                              :mod (o4 / one))
                        :ARG2 (d3 / day
                              :mod (o / other)))
                  :op2 (d4 / differ-02
                        :ARG1 (h / hour
                              :mod (o3 / one))
                        :ARG2 (h2 / hour
                              :mod (o2 / other))))))

instance(t2,thing)
instance(t,they)
instance(m,make-02)
instance(a,and)
instance(d,differ-02)
instance(d2,day)
instance(o4,one)
instance(d3,day)
instance(o,other)
instance(d4,differ-02)
instance(h,hour)
instance(o3,one)
instance(h2,hour)
instance(o2,other)
domain(t2,t)
ARG0-of(t2,m)
ARG1(m,a)
op1(a,d)
ARG1(d,d2)
mod(d2,o4)
ARG2(d,d3)
mod(d3,o)
op2(a,d4)
ARG1(d4,h)
mod(h,o3)
ARG2(d4,h2)
mod(h2,o2)

(r / rite
      :ARG1-of (h / have-03
            :ARG0 (p / person
                  :ARG0-of (h2 / hunt-01
                        :ARG1 (i / i))))
      :ARG0-of (e / exemplify-01))

instance(r,rite)
instance(h,have-03)
instance(p,person)
instance(h2,hunt-01)
instance(i,i)
instance(e,exemplify-01)
ARG1-of(r,h)
ARG0(h,p)
ARG0-of(p,h2)
ARG1(h2,i)
ARG0-of(r,e)

(d / dance-01
      :ARG0 (t / they)
      :ARG2 (g / girl
            :source (v / village))
      :frequency (r / rate-entity-91
            :ARG4 (d2 / date-entity
                  :weekday (t2 / thursday))))

instance(d,dance-01)
instance(t,they)
instance(g,girl)
instance(v,village)
instance(r,rate-entity-91)
instance(d2,date-entity)
instance(t2,thursday)
ARG0(d,t)
ARG2(d,g)
source(g,v)
frequency(d,r)
ARG4(r,d2)
weekday(d2,t2)

(c / cause-01
      :ARG1 (d2 / day
            :domain (d / date-entity
                  :weekday (t / thursday))
            :ARG1-of (w / wonderful-03)
            :beneficiary (i / i)))

instance(c,cause-01)
instance(d2,day)
instance(d,date-entity)
instance(t,thursday)
instance(w,wonderful-03)
instance(i,i)
ARG1(c,d2)
domain(d2,d)
weekday(d,t)
ARG1-of(d2,w)
beneficiary(d2,i)

(p / possible-01
      :ARG1 (w / walk-01
            :ARG0 (i / i)
            :extent (f / far
                  :ARG2-of (h / have-degree-91
                        :ARG1 w
                        :ARG3 (e / equal)
                        :ARG4 (v / vineyard)))))

instance(p,possible-01)
instance(w,walk-01)
instance(i,i)
instance(f,far)
instance(h,have-degree-91)
instance(e,equal)
instance(v,vineyard)
ARG1(p,w)
ARG0(w,i)
extent(w,f)
ARG2-of(f,h)
ARG1(h,w)
ARG3(h,e)
ARG4(h,v)

(c2 / contrast-01
      :ARG2 (v2 / vacation-01 :polarity -
            :ARG0 (i / i)
            :condition (d / dance-01
                  :ARG0 (p / person
                        :ARG0-of (h2 / hunt-01))
                  :time (a2 / any
                        :mod (j / just))
                  :ARG1-of (c / cause-01
                        :ARG0 (r / resemble-01
                              :ARG1 (d2 / day
                                    :mod (e / every))
                              :ARG2 (d3 / day
                                    :mod (o / other
                                          :mod (e2 / every))))))
            :quant (a4 / any)
            :mod (a3 / at-all)))

instance(c2,contrast-01)
instance(v2,vacation-01)
instance(i,i)
instance(d,dance-01)
instance(p,person)
instance(h2,hunt-01)
instance(a2,any)
instance(j,just)
instance(c,cause-01)
instance(r,resemble-01)
instance(d2,day)
instance(e,every)
instance(d3,day)
instance(o,other)
instance(e2,every)
instance(a4,any)
instance(a3,at-all)
ARG2(c2,v2)
polarity(v2,-)
ARG0(v2,i)
condition(v2,d)
ARG0(d,p)
ARG0-of(p,h2)
time(d,a2)
mod(a2,j)
ARG1-of(d,c)
ARG0(c,r)
ARG1(r,d2)
mod(d2,e)
ARG2(r,d3)
mod(d3,o)
mod(o,e2)
quant(v2,a4)
mod(v2,a3)

(c / cause-01
      :ARG1 (t / tame-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (f / fox)))

instance(c,cause-01)
instance(t,tame-01)
instance(p,prince)
instance(l,little)
instance(f,fox)
ARG1(c,t)
ARG0(t,p)
mod(p,l)
ARG1(t,f)

(a / and
      :op1 (s / say-01
            :ARG0 (f / fox)
            :ARG1 (a2 / and
                  :op1 (a3 / ah :mode expressive)
                  :op2 (c / cry-02
                        :ARG0 f))
            :time (h2 / hour
                  :time-of (d / depart-01
                        :ARG0 f)
                  :ARG1-of (n2 / near-01))))

instance(a,and)
instance(s,say-01)
instance(f,fox)
instance(a2,and)
instance(a3,ah)
instance(c,cry-02)
instance(h2,hour)
instance(d,depart-01)
instance(n2,near-01)
op1(a,s)
ARG0(s,f)
ARG1(s,a2)
op1(a2,a3)
mode(a3,expressive)
op2(a2,c)
ARG0(c,f)
time(s,h2)
time-of(h2,d)
ARG0(d,f)
ARG1-of(h2,n2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (f / fault-01
            :ARG1 (y / you)
            :ARG2 (i / it)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(f,fault-01)
instance(y,you)
instance(i,it)
ARG0(s,p)
mod(p,l)
ARG1(s,f)
ARG1(f,y)
ARG2(f,i)

(c / contrast-01
      :ARG1 (w / wish-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (h / harm-01
                  :ARG1 (y / you)
                  :mod (s / sort
                        :mod (a / any)))
            :ARG2 y
            :time (e / ever))
      :ARG2 (w2 / want-01
            :ARG0 y
            :ARG1 (t / tame-01
                  :ARG0 i
                  :ARG1 y)))

instance(c,contrast-01)
instance(w,wish-01)
instance(i,i)
instance(h,harm-01)
instance(y,you)
instance(s,sort)
instance(a,any)
instance(e,ever)
instance(w2,want-01)
instance(t,tame-01)
ARG1(c,w)
polarity(w,-)
ARG0(w,i)
ARG1(w,h)
ARG1(h,y)
mod(h,s)
mod(s,a)
ARG2(w,y)
time(w,e)
ARG2(c,w2)
ARG0(w2,y)
ARG1(w2,t)
ARG0(t,i)
ARG1(t,y)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (s2 / so
            :domain (t / that)))

instance(s,say-01)
instance(f,fox)
instance(s2,so)
instance(t,that)
ARG0(s,f)
ARG1(s,s2)
domain(s2,t)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (c / contrast-01
            :ARG2 (c2 / cry-02
                  :ARG0 (y / you)
                  :time (n / now))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(c,contrast-01)
instance(c2,cry-02)
instance(y,you)
instance(n,now)
ARG0(s,p)
mod(p,l)
ARG1(s,c)
ARG2(c,c2)
ARG0(c2,y)
time(c2,n)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (s2 / so
            :domain (t / that)))

instance(s,say-01)
instance(f,fox)
instance(s2,so)
instance(t,that)
ARG0(s,f)
ARG1(s,s2)
domain(s2,t)

(d / do-02
      :ARG0 (i / it)
      :ARG1 (g / good-04 :polarity -)
      :ARG2 (y / you)
      :mod (a / at-all))

instance(d,do-02)
instance(i,it)
instance(g,good-04)
instance(y,you)
instance(a,at-all)
ARG0(d,i)
ARG1(d,g)
polarity(g,-)
ARG2(d,y)
mod(d,a)

(s / say-01
      :ARG0 (f2 / fox)
      :ARG1 (d / do-02
            :ARG0 (i / it)
            :ARG1 (g / good-04
                  :ARG1 i
                  :ARG2 f2)
            :ARG2 f2
            :ARG1-of (c / cause-01
                  :ARG0 (c2 / color-01
                        :ARG1 (f / field
                              :mod (w / wheat))))))

instance(s,say-01)
instance(f2,fox)
instance(d,do-02)
instance(i,it)
instance(g,good-04)
instance(c,cause-01)
instance(c2,color-01)
instance(f,field)
instance(w,wheat)
ARG0(s,f2)
ARG1(s,d)
ARG0(d,i)
ARG1(d,g)
ARG1(g,i)
ARG2(g,f2)
ARG2(d,f2)
ARG1-of(d,c)
ARG0(c,c2)
ARG1(c2,f)
mod(f,w)

(a / and
  :op1 (a2 / add-01
         :ARG0 (h / he)
         :ARG1 (a3 / and
                 :op1 (g / go-02
                        :ARG0 (y / you)
                        :mode imperative)
                 :op2 (l / look-01
                        :ARG0 y
                        :ARG1 (r / rose)
                        :mod (a4 / again)
                        :mode imperative))
         :time (t / then)))

instance(a,and)
instance(a2,add-01)
instance(h,he)
instance(a3,and)
instance(g,go-02)
instance(y,you)
instance(l,look-01)
instance(r,rose)
instance(a4,again)
instance(t,then)
op1(a,a2)
ARG0(a2,h)
ARG1(a2,a3)
op1(a3,g)
ARG0(g,y)
mode(g,imperative)
op2(a3,l)
ARG0(l,y)
ARG1(l,r)
mod(l,a4)
mode(l,imperative)
time(a2,t)

(u / understand-01
      :ARG0 (y / you)
      :ARG1 (u2 / unique-01
            :ARG1 (r / rose
                  :poss y)
            :ARG3 (w / world
                  :extent (a / all)))
      :time (n / now))

instance(u,understand-01)
instance(y,you)
instance(u2,unique-01)
instance(r,rose)
instance(w,world)
instance(a,all)
instance(n,now)
ARG0(u,y)
ARG1(u,u2)
ARG1(u2,r)
poss(r,y)
ARG3(u2,w)
extent(w,a)
time(u,n)

(a / and
      :op1 (c / come-01 :mode imperative
            :ARG1 (y / you)
            :direction (b / back)
            :time (t / then)
            :purpose (s / say-01
                  :ARG0 y
                  :ARG1 (g / goodbye)
                  :ARG2 (i / i)))
      :op2 (g2 / give-01
            :ARG0 i
            :ARG1 (p / present)
            :ARG2 y
            :manner (r / reveal-01
                  :ARG0 i
                  :ARG1 (s2 / secret)
                  :ARG2 y)))

instance(a,and)
instance(c,come-01)
instance(y,you)
instance(b,back)
instance(t,then)
instance(s,say-01)
instance(g,goodbye)
instance(i,i)
instance(g2,give-01)
instance(p,present)
instance(r,reveal-01)
instance(s2,secret)
op1(a,c)
mode(c,imperative)
ARG1(c,y)
direction(c,b)
time(c,t)
purpose(c,s)
ARG0(s,y)
ARG1(s,g)
ARG2(s,i)
op2(a,g2)
ARG0(g2,i)
ARG1(g2,p)
ARG2(g2,y)
manner(g2,r)
ARG0(r,i)
ARG1(r,s2)
ARG2(r,y)

(g / go-02
  :ARG0 (p / prince
          :mod (l / little))
  :direction (a / away)
  :purpose (l2 / look-01
             :ARG0 p
             :ARG1 (r / rose)
             :mod (a2 / again)))

instance(g,go-02)
instance(p,prince)
instance(l,little)
instance(a,away)
instance(l2,look-01)
instance(r,rose)
instance(a2,again)
ARG0(g,p)
mod(p,l)
direction(g,a)
purpose(g,l2)
ARG0(l2,p)
ARG1(l2,r)
mod(l2,a2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (r / resemble-01 :polarity -
            :ARG1 (y / you)
            :ARG2 (r2 / rose
                  :poss (i / i))
            :degree (a / at-all)))

instance(s,say-01)
instance(h,he)
instance(r,resemble-01)
instance(y,you)
instance(r2,rose)
instance(i,i)
instance(a,at-all)
ARG0(s,h)
ARG1(s,r)
polarity(r,-)
ARG1(r,y)
ARG2(r,r2)
poss(r2,i)
degree(r,a)

(n / nothing
      :domain (y / you)
      :time (a / as-yet))

instance(n,nothing)
instance(y,you)
instance(a,as-yet)
domain(n,y)
time(n,a)

(a / and
      :op1 (t / tame-01
            :ARG0 (n / no-one)
            :ARG1 (y / you))
      :op2 (t2 / tame-01
            :ARG0 y
            :ARG1 n))

instance(a,and)
instance(t,tame-01)
instance(n,no-one)
instance(y,you)
instance(t2,tame-01)
op1(a,t)
ARG0(t,n)
ARG1(t,y)
op2(a,t2)
ARG0(t2,y)
ARG1(t2,n)

(r / resemble-01
      :ARG1 (y / you)
      :ARG2 (f / fox
            :poss (i / i))
      :time (k / know-02
            :ARG0 i
            :ARG1 f
            :ord (o / ordinal-entity :value 1)))

instance(r,resemble-01)
instance(y,you)
instance(f,fox)
instance(i,i)
instance(k,know-02)
instance(o,ordinal-entity)
ARG1(r,y)
ARG2(r,f)
poss(f,i)
time(r,k)
ARG0(k,i)
ARG1(k,f)
ord(k,o)
value(o,1)

(f2 / fox
      :domain (h / he)
      :ARG1-of (r / resemble-01
            :ARG2 (f3 / fox :quant 100000
                  :mod (o / other)))
      :mod (o2 / only))

instance(f2,fox)
instance(h,he)
instance(r,resemble-01)
instance(f3,fox)
instance(o,other)
instance(o2,only)
domain(f2,h)
ARG1-of(f2,r)
ARG2(r,f3)
quant(f3,100000)
mod(f3,o)
mod(f2,o2)

(c / contrast-01
      :ARG2 (m / make-01
            :ARG0 (i / i)
            :ARG1 (h / have-rel-role-91
                  :ARG0 (h2 / he)
                  :ARG1 i
                  :ARG2 (f / friend))
            :ARG0-of (c2 / cause-01
                  :ARG1 (u / unique-01
                        :ARG1 h2
                        :ARG3 (w / world
                              :extent (a2 / all))
                        :time (n / now)))))

instance(c,contrast-01)
instance(m,make-01)
instance(i,i)
instance(h,have-rel-role-91)
instance(h2,he)
instance(f,friend)
instance(c2,cause-01)
instance(u,unique-01)
instance(w,world)
instance(a2,all)
instance(n,now)
ARG2(c,m)
ARG0(m,i)
ARG1(m,h)
ARG0(h,h2)
ARG1(h,i)
ARG2(h,f)
ARG0-of(m,c2)
ARG1(c2,u)
ARG1(u,h2)
ARG3(u,w)
extent(w,a2)
time(u,n)

(a / and
      :op1 (e / embarrass-01
            :ARG1 (r / rose)
            :degree (m / much
                  :degree (v / very))))

instance(a,and)
instance(e,embarrass-01)
instance(r,rose)
instance(m,much)
instance(v,very)
op1(a,e)
ARG1(e,r)
degree(e,m)
degree(m,v)

(g / go-on-25
      :ARG0 (h / he)
      :ARG1 (c / contrast-01
            :ARG1 (b / beautiful-02
                  :ARG1 (y / you))
            :ARG2 (e / empty-02
                  :ARG1 y)))

instance(g,go-on-25)
instance(h,he)
instance(c,contrast-01)
instance(b,beautiful-02)
instance(y,you)
instance(e,empty-02)
ARG0(g,h)
ARG1(g,c)
ARG1(c,b)
ARG1(b,y)
ARG2(c,e)
ARG1(e,y)

(p / possible-01 :polarity -
      :ARG1 (d / die-01
            :ARG1 (o / one)
            :beneficiary (y / you)))

instance(p,possible-01)
instance(d,die-01)
instance(o,one)
instance(y,you)
polarity(p,-)
ARG1(p,d)
ARG1(d,o)
beneficiary(d,y)

(t / think-01
      :ARG0 (p2 / person
            :ARG0-of (p3 / pass-by-17)
            :mod (o / ordinary))
      :ARG1 (l / look-02
            :ARG0 (r / rose
                  :poss (i / i)
                  :ARG0-of (b / belong-01
                        :ARG1 i))
            :ARG1 (y / you)
            :degree (j / just))
      :mod (t2 / to-be-sure))

instance(t,think-01)
instance(p2,person)
instance(p3,pass-by-17)
instance(o,ordinary)
instance(l,look-02)
instance(r,rose)
instance(i,i)
instance(b,belong-01)
instance(y,you)
instance(j,just)
instance(t2,to-be-sure)
ARG0(t,p2)
ARG0-of(p2,p3)
mod(p2,o)
ARG1(t,l)
ARG0(l,r)
poss(r,i)
ARG0-of(r,b)
ARG1(b,i)
ARG1(l,y)
degree(l,j)
mod(t,t2)

(c4 / contrast-01
      :ARG2 (h / have-degree-91
            :ARG1 (s / she
                  :mod (a / alone))
            :ARG2 (i3 / important-01
                  :ARG1 s)
            :ARG3 (m / more)
            :ARG4 (r / rose
                  :mod (a3 / all)
                  :mod (o / other)
                  :quant (m2 / multiple :op1 100))
            :ARG1-of (c / cause-01
                  :ARG0 (a2 / and
                        :op1 (w / water-01
                              :ARG0 (i2 / i)
                              :ARG1 s)
                        :op2 (p / put-01
                              :ARG0 i2
                              :ARG1 s
                              :ARG2 (u / under
                                    :op1 (g / globe
                                          :consist-of (g2 / glass))))
                        :op3 (s3 / shelter-01
                              :ARG0 i2
                              :ARG1 s
                              :ARG2 (b2 / behind
                                    :op1 (s4 / screen)))
                        :op4 (k / kill-01
                              :ARG0 i2
                              :ARG1 (c2 / caterpillar
                                    :ARG2-of (e2 / except-01
                                          :ARG1 (c3 / caterpillar
                                                :quant (o2 / or :op1 2 :op2 3)
                                                :ARG1-of (s2 / save-02
                                                      :ARG0 (w2 / we)
                                                      :purpose (b3 / become-01
                                                            :ARG1 c3
                                                            :ARG2 (b4 / butterfly))))))
                              :beneficiary s)
                        :op5 (l / listen-01
                              :ARG0 i2
                              :ARG1 s
                              :time (o3 / or
                                    :op1 (g3 / grumble-01
                                          :ARG0 s)
                                    :op2 (b5 / boast-01
                                          :ARG0 s)
                                    :op3 (s6 / say-01
                                          :ARG0 s
                                          :ARG1 (n / nothing)
                                          :frequency (s7 / sometimes
                                                :time (e / ever)))))))))

instance(c4,contrast-01)
instance(h,have-degree-91)
instance(s,she)
instance(a,alone)
instance(i3,important-01)
instance(m,more)
instance(r,rose)
instance(a3,all)
instance(o,other)
instance(m2,multiple)
instance(c,cause-01)
instance(a2,and)
instance(w,water-01)
instance(i2,i)
instance(p,put-01)
instance(u,under)
instance(g,globe)
instance(g2,glass)
instance(s3,shelter-01)
instance(b2,behind)
instance(s4,screen)
instance(k,kill-01)
instance(c2,caterpillar)
instance(e2,except-01)
instance(c3,caterpillar)
instance(o2,or)
instance(s2,save-02)
instance(w2,we)
instance(b3,become-01)
instance(b4,butterfly)
instance(l,listen-01)
instance(o3,or)
instance(g3,grumble-01)
instance(b5,boast-01)
instance(s6,say-01)
instance(n,nothing)
instance(s7,sometimes)
instance(e,ever)
ARG2(c4,h)
ARG1(h,s)
mod(s,a)
ARG2(h,i3)
ARG1(i3,s)
ARG3(h,m)
ARG4(h,r)
mod(r,a3)
mod(r,o)
quant(r,m2)
op1(m2,100)
ARG1-of(h,c)
ARG0(c,a2)
op1(a2,w)
ARG0(w,i2)
ARG1(w,s)
op2(a2,p)
ARG0(p,i2)
ARG1(p,s)
ARG2(p,u)
op1(u,g)
consist-of(g,g2)
op3(a2,s3)
ARG0(s3,i2)
ARG1(s3,s)
ARG2(s3,b2)
op1(b2,s4)
op4(a2,k)
ARG0(k,i2)
ARG1(k,c2)
ARG2-of(c2,e2)
ARG1(e2,c3)
quant(c3,o2)
op1(o2,2)
op2(o2,3)
ARG1-of(c3,s2)
ARG0(s2,w2)
purpose(s2,b3)
ARG1(b3,c3)
ARG2(b3,b4)
beneficiary(k,s)
op5(a2,l)
ARG0(l,i2)
ARG1(l,s)
time(l,o3)
op1(o3,g3)
ARG0(g3,s)
op2(o3,b5)
ARG0(b5,s)
op3(o3,s6)
ARG0(s6,s)
ARG1(s6,n)
frequency(s6,s7)
time(s7,e)

(c / cause-01
      :ARG0 (r / rose
            :domain (s / she)
            :poss (i / i)))

instance(c,cause-01)
instance(r,rose)
instance(s,she)
instance(i,i)
ARG0(c,r)
domain(r,s)
poss(r,i)

(a / and
      :op1 (g / go-02
            :ARG0 (h / he)
            :direction (b / back)
            :purpose (m / meet-03
                  :ARG0 h
                  :ARG1 (f / fox))))

instance(a,and)
instance(g,go-02)
instance(h,he)
instance(b,back)
instance(m,meet-03)
instance(f,fox)
op1(a,g)
ARG0(g,h)
direction(g,b)
purpose(g,m)
ARG0(m,h)
ARG1(m,f)

(s / say-01
  :ARG0 (h / he)
  :ARG1 (g / goodbye))

instance(s,say-01)
instance(h,he)
instance(g,goodbye)
ARG0(s,h)
ARG1(s,g)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (g / goodbye))

instance(s,say-01)
instance(f,fox)
instance(g,goodbye)
ARG0(s,f)
ARG1(s,g)

(a / and
      :op1 (s / secret
            :poss (i / i)
            :ARG1-of (s2 / simple-02
                  :degree (v / very))
            :domain (a2 / and
                  :op1 (p / possible-01
                        :ARG1 (s3 / see-01
                              :ARG0 (o2 / one)
                              :ARG2-of (r / right-06)
                              :instrument (h2 / heart))
                        :mod (o / only))
                  :op2 (p2 / possible-01 :polarity -
                        :ARG1 (s4 / see-01
                              :ARG0 o2
                              :ARG1 (t / thing
                                    :mod (e / essential))
                              :instrument (e2 / eye))))
            :time (n / now)))

instance(a,and)
instance(s,secret)
instance(i,i)
instance(s2,simple-02)
instance(v,very)
instance(a2,and)
instance(p,possible-01)
instance(s3,see-01)
instance(o2,one)
instance(r,right-06)
instance(h2,heart)
instance(o,only)
instance(p2,possible-01)
instance(s4,see-01)
instance(t,thing)
instance(e,essential)
instance(e2,eye)
instance(n,now)
op1(a,s)
poss(s,i)
ARG1-of(s,s2)
degree(s2,v)
domain(s,a2)
op1(a2,p)
ARG1(p,s3)
ARG0(s3,o2)
ARG2-of(s3,r)
instrument(s3,h2)
mod(p,o)
op2(a2,p2)
polarity(p2,-)
ARG1(p2,s4)
ARG0(s4,o2)
ARG1(s4,t)
mod(t,e)
instrument(s4,e2)
time(s,n)

(r / repeat-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (p2 / possible-01 :polarity -
            :ARG1 (s2 / see-01
                  :ARG1 (t / thing
                        :mod (e / essential))
                  :instrument (e2 / eye)))
      :purpose (r2 / remember-01
            :ARG0 p
            :ARG1 p2
            :ARG1-of (s / sure-02)))

instance(r,repeat-01)
instance(p,prince)
instance(l,little)
instance(p2,possible-01)
instance(s2,see-01)
instance(t,thing)
instance(e,essential)
instance(e2,eye)
instance(r2,remember-01)
instance(s,sure-02)
ARG0(r,p)
mod(p,l)
ARG1(r,p2)
polarity(p2,-)
ARG1(p2,s2)
ARG1(s2,t)
mod(t,e)
instrument(s2,e2)
purpose(r,r2)
ARG0(r2,p)
ARG1(r2,p2)
ARG1-of(r2,s)

(t / time
      :ARG1-of (w / waste-01
            :ARG0 (y / you)
            :beneficiary (r / rose
                  :poss y))
      :ARG0-of (m / make-02
            :ARG1 (i / important-01
                  :ARG1 r
                  :degree (s / so))))

instance(t,time)
instance(w,waste-01)
instance(y,you)
instance(r,rose)
instance(m,make-02)
instance(i,important-01)
instance(s,so)
ARG1-of(t,w)
ARG0(w,y)
beneficiary(w,r)
poss(r,y)
ARG0-of(t,m)
ARG1(m,i)
ARG1(i,r)
degree(i,s)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / time
            :ARG1-of (w / waste-01
                  :ARG0 p)
            :beneficiary (r / rose
                  :poss p))
      :purpose (r2 / remember-01
            :ARG0 p
            :ARG1-of (s2 / sure-02)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(t,time)
instance(w,waste-01)
instance(r,rose)
instance(r2,remember-01)
instance(s2,sure-02)
ARG0(s,p)
mod(p,l)
ARG1(s,t)
ARG1-of(t,w)
ARG0(w,p)
beneficiary(t,r)
poss(r,p)
purpose(s,r2)
ARG0(r2,p)
ARG1-of(r2,s2)

(s / say-01
      :ARG0 (f / fox)
      :ARG1 (f2 / forget-01
            :ARG0 (m / man)
            :ARG1 (t / truth
                  :mod (t2 / this))))

instance(s,say-01)
instance(f,fox)
instance(f2,forget-01)
instance(m,man)
instance(t,truth)
instance(t2,this)
ARG0(s,f)
ARG1(s,f2)
ARG0(f2,m)
ARG1(f2,t)
mod(t,t2)

(c / contrast-01
      :ARG2 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (f / forget-01 :polarity -
                  :ARG0 y
                  :ARG1 (i / it))))

instance(c,contrast-01)
instance(o,obligate-01)
instance(y,you)
instance(f,forget-01)
instance(i,it)
ARG2(c,o)
ARG1(o,y)
ARG2(o,f)
polarity(f,-)
ARG0(f,y)
ARG1(f,i)

(b / become-01
      :ARG1 (y / you)
      :ARG2 (r / responsible-03
            :ARG0 y
            :ARG1 (t2 / thing
                  :ARG1-of (t / tame-01
                        :ARG0 y))
            :extent (f / forever)))

instance(b,become-01)
instance(y,you)
instance(r,responsible-03)
instance(t2,thing)
instance(t,tame-01)
instance(f,forever)
ARG1(b,y)
ARG2(b,r)
ARG0(r,y)
ARG1(r,t2)
ARG1-of(t2,t)
ARG0(t,y)
extent(r,f)

(r / responsible-03
      :ARG0 (y / you)
      :ARG1 (r2 / rose
            :poss y))

instance(r,responsible-03)
instance(y,you)
instance(r2,rose)
ARG0(r,y)
ARG1(r,r2)
poss(r2,y)

(r / repeat-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (r2 / responsible-03
            :ARG0 p
            :ARG1 (r3 / rose
                  :poss p))
      :purpose (r4 / remember-01
            :ARG0 p
            :ARG1-of (s / sure-02)))

instance(r,repeat-01)
instance(p,prince)
instance(l,little)
instance(r2,responsible-03)
instance(r3,rose)
instance(r4,remember-01)
instance(s,sure-02)
ARG0(r,p)
mod(p,l)
ARG1(r,r2)
ARG0(r2,p)
ARG1(r2,r3)
poss(r3,p)
purpose(r,r4)
ARG0(r4,p)
ARG1-of(r4,s)

(c / chapter :mod 22)

instance(c,chapter)
mod(c,22)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m,morning)
instance(g,good-02)
ARG0(s,p)
mod(p,l)
ARG1(s,m)
ARG1-of(m,g)

(s / say-01
      :ARG0 (s2 / switchman
            :mod (r / railway))
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(s2,switchman)
instance(r,railway)
instance(m,morning)
instance(g,good-02)
ARG0(s,s2)
mod(s2,r)
ARG1(s,m)
ARG1-of(m,g)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (a2 / amr-unknown)
            :location (h / here)))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(d,do-02)
instance(y,you)
instance(a2,amr-unknown)
instance(h,here)
ARG0(a,p)
mod(p,l)
ARG1(a,d)
ARG0(d,y)
ARG1(d,a2)
location(d,h)

(s / say-01
  :ARG0 (s2 / switchman)
  :ARG1 (s3 / sort-01
          :ARG0 s2
          :ARG1 (p / person
                  :ARG0-of (t / travel-01))
          :ARG2 (b / bundle-01
                  :ARG0 s2
                  :ARG1 p
                  :ARG2 (p2 / person
                          :quant 1000))))

instance(s,say-01)
instance(s2,switchman)
instance(s3,sort-01)
instance(p,person)
instance(t,travel-01)
instance(b,bundle-01)
instance(p2,person)
ARG0(s,s2)
ARG1(s,s3)
ARG0(s3,s2)
ARG1(s3,p)
ARG0-of(p,t)
ARG2(s3,b)
ARG0(b,s2)
ARG1(b,p)
ARG2(b,p2)
quant(p2,1000)

(s / send-03
      :ARG0 (i / i)
      :ARG1 (t / train
            :ARG0-of (c / carry-01
                  :ARG1 (t2 / they)))
      :ARG5 (a / and
            :op1 (r / right-04
                  :time (n / now))
            :op2 (l / left-20
                  :time (n2 / now))))

instance(s,send-03)
instance(i,i)
instance(t,train)
instance(c,carry-01)
instance(t2,they)
instance(a,and)
instance(r,right-04)
instance(n,now)
instance(l,left-20)
instance(n2,now)
ARG0(s,i)
ARG1(s,t)
ARG0-of(t,c)
ARG1(c,t2)
ARG5(s,a)
op1(a,r)
time(r,n)
op2(a,l)
time(l,n2)

(a / and
      :op2 (s / shake-01
            :ARG0 (t / train
                  :mod (e / express-02)
                  :ARG1-of (l / light-04
                        :manner (b / brilliant-02)))
            :ARG1 (c / cabin
                  :poss (s2 / switchman))
            :time (r / rush-01
                  :ARG1 t
                  :direction (b2 / by)
                  :ARG0-of (r2 / roar-01
                        :ARG1-of (r3 / resemble-01
                              :ARG2 (t2 / thunder))))))

instance(a,and)
instance(s,shake-01)
instance(t,train)
instance(e,express-02)
instance(l,light-04)
instance(b,brilliant-02)
instance(c,cabin)
instance(s2,switchman)
instance(r,rush-01)
instance(b2,by)
instance(r2,roar-01)
instance(r3,resemble-01)
instance(t2,thunder)
op2(a,s)
ARG0(s,t)
mod(t,e)
ARG1-of(t,l)
manner(l,b)
ARG1(s,c)
poss(c,s2)
time(s,r)
ARG1(r,t)
direction(r,b2)
ARG0-of(r,r2)
ARG1-of(r2,r3)
ARG2(r3,t2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (h / hurry-01
            :ARG1 (t / they)
            :degree (g / great)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(h,hurry-01)
instance(t,they)
instance(g,great)
ARG0(s,p)
mod(p,l)
ARG1(s,h)
ARG1(h,t)
degree(h,g)

(l / look-01
      :ARG0 (t / they)
      :ARG1 (a / amr-unknown))

instance(l,look-01)
instance(t,they)
instance(a,amr-unknown)
ARG0(l,t)
ARG1(l,a)

(s / say-01
      :ARG0 (s2 / switchman)
      :ARG1 (k / know-01 :polarity -
            :ARG0 (p / person
                  :ARG0-of (e / engineer-01
                        :ARG1 (l / locomotive))
                  :mod (e2 / even))
            :ARG1 (t / that)))

instance(s,say-01)
instance(s2,switchman)
instance(k,know-01)
instance(p,person)
instance(e,engineer-01)
instance(l,locomotive)
instance(e2,even)
instance(t,that)
ARG0(s,s2)
ARG1(s,k)
polarity(k,-)
ARG0(k,p)
ARG0-of(p,e)
ARG1(e,l)
mod(p,e2)
ARG1(k,t)

(a / and
      :op2 (t / thunder-01
            :ARG0 (t2 / train
                  :mod (e / express-02)
                  :ARG1-of (l / light-04
                        :manner (b2 / brilliant-02))
                  :ord (o2 / ordinal-entity :value 2))
            :direction (b / by)
            :direction (o / opposite-01
                  :ARG2 (d / direction))))

instance(a,and)
instance(t,thunder-01)
instance(t2,train)
instance(e,express-02)
instance(l,light-04)
instance(b2,brilliant-02)
instance(o2,ordinal-entity)
instance(b,by)
instance(o,opposite-01)
instance(d,direction)
op2(a,t)
ARG0(t,t2)
mod(t2,e)
ARG1-of(t2,l)
manner(l,b2)
ord(t2,o2)
value(o2,2)
direction(t,b)
direction(t,o)
ARG2(o,d)

(d / demand-01 :polarity (a2 / amr-unknown)
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (c / come-01
            :ARG1 (t / they)
            :direction (b / back)
            :time (a / already)))

instance(d,demand-01)
instance(a2,amr-unknown)
instance(p,prince)
instance(l,little)
instance(c,come-01)
instance(t,they)
instance(b,back)
instance(a,already)
polarity(d,a2)
ARG0(d,p)
mod(p,l)
ARG1(d,c)
ARG1(c,t)
direction(c,b)
time(c,a)

(s / say-01
  :ARG0 (s2 / switchman)
  :ARG1 (o / one
          :ARG1-of (s3 / same-01
                     :polarity -)
          :domain (t / this)))

instance(s,say-01)
instance(s2,switchman)
instance(o,one)
instance(s3,same-01)
instance(t,this)
ARG0(s,s2)
ARG1(s,o)
ARG1-of(o,s3)
polarity(s3,-)
domain(o,t)

(e / exchange-01
      :domain (i / it))

instance(e,exchange-01)
instance(i,it)
domain(e,i)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (s / satisfy-01 :polarity -
            :ARG1 (t / they)
            :location-of t)
      :polarity (a2 / amr-unknown))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(s,satisfy-01)
instance(t,they)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,s)
polarity(s,-)
ARG1(s,t)
location-of(s,t)
polarity(a,a2)

(s / say-01
      :ARG0 (s2 / switchman)
      :ARG1 (s3 / satisfy-01
            :ARG1 (n / no-one)
            :time (e / ever)
            :location n))

instance(s,say-01)
instance(s2,switchman)
instance(s3,satisfy-01)
instance(n,no-one)
instance(e,ever)
ARG0(s,s2)
ARG1(s,s3)
ARG1(s3,n)
time(s3,e)
location(s3,n)

(a / and
      :op2 (h / hear-01
            :ARG0 (t / they)
            :ARG1 (t2 / thunder-01
                  :ARG1-of (r / roar-01))
            :ARG2 (t3 / train
                  :mod (e / express-02)
                  :ARG1-of (l / light-04
                        :manner (b / brilliant-02))
                  :ord (o / ordinal-entity :value 3))))

instance(a,and)
instance(h,hear-01)
instance(t,they)
instance(t2,thunder-01)
instance(r,roar-01)
instance(t3,train)
instance(e,express-02)
instance(l,light-04)
instance(b,brilliant-02)
instance(o,ordinal-entity)
op2(a,h)
ARG0(h,t)
ARG1(h,t2)
ARG1-of(t2,r)
ARG2(h,t3)
mod(t3,e)
ARG1-of(t3,l)
manner(l,b)
ord(t3,o)
value(o,3)

(d / demand-01 :polarity (a / amr-unknown)
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (p2 / pursue-01
            :ARG0 (t / they)
            :ARG1 (p3 / person
                  :ARG0-of (t2 / travel-01
                        :ord (o / ordinal-entity :value 1)))))

instance(d,demand-01)
instance(a,amr-unknown)
instance(p,prince)
instance(l,little)
instance(p2,pursue-01)
instance(t,they)
instance(p3,person)
instance(t2,travel-01)
instance(o,ordinal-entity)
polarity(d,a)
ARG0(d,p)
mod(p,l)
ARG1(d,p2)
ARG0(p2,t)
ARG1(p2,p3)
ARG0-of(p3,t2)
ord(t2,o)
value(o,1)

(s / say-01
  :ARG0 (s2 / switchman)
  :ARG1 (p / pursue-01
          :ARG0 (t / they)
          :ARG1 (n / nothing
                  :extent (a / at-all))))

instance(s,say-01)
instance(s2,switchman)
instance(p,pursue-01)
instance(t,they)
instance(n,nothing)
instance(a,at-all)
ARG0(s,s2)
ARG1(s,p)
ARG0(p,t)
ARG1(p,n)
extent(n,a)

(o / or
      :op1 (s / sleep-01
            :ARG0 (t / they)
            :location (t2 / there))
      :op2 (y / yawn-01
            :ARG0 t
            :condition (s2 / sleep-01 :polarity -
                  :ARG0 t)))

instance(o,or)
instance(s,sleep-01)
instance(t,they)
instance(t2,there)
instance(y,yawn-01)
instance(s2,sleep-01)
op1(o,s)
ARG0(s,t)
location(s,t2)
op2(o,y)
ARG0(y,t)
condition(y,s2)
polarity(s2,-)
ARG0(s2,t)

(f / flatten-01
      :ARG0 (c / child
            :mod (o / only))
      :ARG1 (n / nose
            :part-of c)
      :ARG1-of (c2 / cause-01
            :ARG0 (p / push-01
                  :ARG0 c
                  :ARG1 n
                  :ARG2 (w / windowpane))))

instance(f,flatten-01)
instance(c,child)
instance(o,only)
instance(n,nose)
instance(c2,cause-01)
instance(p,push-01)
instance(w,windowpane)
ARG0(f,c)
mod(c,o)
ARG1(f,n)
part-of(n,c)
ARG1-of(f,c2)
ARG0(c2,p)
ARG0(p,c)
ARG1(p,n)
ARG2(p,w)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (k / know-01
            :ARG0 (c / child
                  :mod (o / only))
            :ARG1 (t / thing
                  :ARG1-of (l2 / look-01
                        :ARG0 c))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(k,know-01)
instance(c,child)
instance(o,only)
instance(t,thing)
instance(l2,look-01)
ARG0(s,p)
mod(p,l)
ARG1(s,k)
ARG0(k,c)
mod(c,o)
ARG1(k,t)
ARG1-of(t,l2)
ARG0(l2,c)

(a / and
      :op1 (c3 / cause-01
            :ARG0 (w / waste-01
                  :ARG0 (t / they)
                  :ARG1 (t2 / time
                        :poss t)
                  :ARG1-of (c / cause-01
                        :ARG0 (d / doll
                              :mod (r / rag))))
            :ARG1 (b / become-01
                  :ARG1 d
                  :ARG2 (i2 / important-01
                        :ARG1 d
                        :ARG2 t
                        :degree (v / very))))
      :op2 (c2 / cry-02
            :ARG0 t
            :condition (t3 / take-away-05
                  :ARG0 (a3 / anybody)
                  :ARG1 d
                  :source t)))

instance(a,and)
instance(c3,cause-01)
instance(w,waste-01)
instance(t,they)
instance(t2,time)
instance(c,cause-01)
instance(d,doll)
instance(r,rag)
instance(b,become-01)
instance(i2,important-01)
instance(v,very)
instance(c2,cry-02)
instance(t3,take-away-05)
instance(a3,anybody)
op1(a,c3)
ARG0(c3,w)
ARG0(w,t)
ARG1(w,t2)
poss(t2,t)
ARG1-of(w,c)
ARG0(c,d)
mod(d,r)
ARG1(c3,b)
ARG1(b,d)
ARG2(b,i2)
ARG1(i2,d)
ARG2(i2,t)
degree(i2,v)
op2(a,c2)
ARG0(c2,t)
condition(c2,t3)
ARG0(t3,a3)
ARG1(t3,d)
source(t3,t)

(s / say-01
      :ARG0 (s2 / switchman)
      :ARG1 (l / lucky
            :domain (t / they)))

instance(s,say-01)
instance(s2,switchman)
instance(l,lucky)
instance(t,they)
ARG0(s,s2)
ARG1(s,l)
domain(l,t)

(c / chapter :mod 23)

instance(c,chapter)
mod(c,23)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m,morning)
instance(g,good-02)
ARG0(s,p)
mod(p,l)
ARG1(s,m)
ARG1-of(m,g)

(s / say-01
      :ARG0 (p / person
            :ARG0-of (m / merchandise-01))
      :ARG1 (m2 / morning
            :ARG1-of (g / good-02)))

instance(s,say-01)
instance(p,person)
instance(m,merchandise-01)
instance(m2,morning)
instance(g,good-02)
ARG0(s,p)
ARG0-of(p,m)
ARG1(s,m2)
ARG1-of(m2,g)

(s / sell-01
      :ARG0 (p / person
            :ARG0-of (m / merchandise-01)
            :domain (t2 / this))
      :ARG1 (p2 / pill
            :ARG1-of (i / invent-01)
            :purpose (q / quench-01
                  :ARG0 p2
                  :ARG1 (t / thirst-01))))

instance(s,sell-01)
instance(p,person)
instance(m,merchandise-01)
instance(t2,this)
instance(p2,pill)
instance(i,invent-01)
instance(q,quench-01)
instance(t,thirst-01)
ARG0(s,p)
ARG0-of(p,m)
domain(p,t2)
ARG1(s,p2)
ARG1-of(p2,i)
purpose(p2,q)
ARG0(q,p2)
ARG1(q,t)

(c / cause-01
      :ARG0 (n / need-01
            :ARG0 (y / you)
            :ARG1 (s / swallow-01
                  :ARG1 (r / rate-entity-91
                        :ARG1 (p / pill :quant 1)
                        :ARG3 (t / temporal-quantity :quant 1
                              :unit (w / week))))
            :mod (o / only))
      :ARG1 (f / feel-01 :polarity -
            :ARG0 y
            :ARG1 (n2 / need-01
                  :ARG0 y
                  :ARG1 (d / drink-01
                        :ARG0 y
                        :ARG1 (a2 / anything)))))

instance(c,cause-01)
instance(n,need-01)
instance(y,you)
instance(s,swallow-01)
instance(r,rate-entity-91)
instance(p,pill)
instance(t,temporal-quantity)
instance(w,week)
instance(o,only)
instance(f,feel-01)
instance(n2,need-01)
instance(d,drink-01)
instance(a2,anything)
ARG0(c,n)
ARG0(n,y)
ARG1(n,s)
ARG1(s,r)
ARG1(r,p)
quant(p,1)
ARG3(r,t)
quant(t,1)
unit(t,w)
mod(n,o)
ARG1(c,f)
polarity(f,-)
ARG0(f,y)
ARG1(f,n2)
ARG0(n2,y)
ARG1(n2,d)
ARG0(d,y)
ARG1(d,a2)

(a / ask-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (s / sell-01
            :ARG0 (y / you)
            :ARG1 (t / that)
            :ARG1-of (c / cause-01
                  :ARG0 (a2 / amr-unknown))))

instance(a,ask-01)
instance(p,prince)
instance(l,little)
instance(s,sell-01)
instance(y,you)
instance(t,that)
instance(c,cause-01)
instance(a2,amr-unknown)
ARG0(a,p)
mod(p,l)
ARG1(a,s)
ARG0(s,y)
ARG1(s,t)
ARG1-of(s,c)
ARG0(c,a2)

(s / say-01
  :ARG0 (p / person
          :ARG0-of (m / merchandise-01))
  :ARG1 (c / cause-01
          :ARG0 (t / they)
          :ARG1 (s2 / save-01
                  :ARG0 t
                  :ARG1 (t2 / time
                          :ARG1-of (a / amount-01
                                     :ARG2 (t3 / tremendous))))))

instance(s,say-01)
instance(p,person)
instance(m,merchandise-01)
instance(c,cause-01)
instance(t,they)
instance(s2,save-01)
instance(t2,time)
instance(a,amount-01)
instance(t3,tremendous)
ARG0(s,p)
ARG0-of(p,m)
ARG1(s,c)
ARG0(c,t)
ARG1(c,s2)
ARG0(s2,t)
ARG1(s2,t2)
ARG1-of(t2,a)
ARG2(a,t3)

(m / make-01
      :ARG0 (p / person
            :ARG1-of (e / expert-01))
      :ARG1 (t / thing
            :ARG1-of (c / compute-01)))

instance(m,make-01)
instance(p,person)
instance(e,expert-01)
instance(t,thing)
instance(c,compute-01)
ARG0(m,p)
ARG1-of(p,e)
ARG1(m,t)
ARG1-of(t,c)

(s / save-03
      :ARG0 (y / you)
      :ARG1 (r / rate-entity-91
            :ARG1 (t / temporal-quantity :quant 53
                  :unit (m / minute))
            :ARG2 (t3 / temporal-quantity :quant 1
                  :unit (w / week)))
      :instrument (p / pill
            :mod (t2 / this)))

instance(s,save-03)
instance(y,you)
instance(r,rate-entity-91)
instance(t,temporal-quantity)
instance(m,minute)
instance(t3,temporal-quantity)
instance(w,week)
instance(p,pill)
instance(t2,this)
ARG0(s,y)
ARG1(s,r)
ARG1(r,t)
quant(t,53)
unit(t,m)
ARG2(r,t3)
quant(t3,1)
unit(t3,w)
instrument(s,p)
mod(p,t2)

(a / and
      :op1 (d / do-02
            :ARG0 (i / i)
            :ARG1 (a2 / amr-unknown)
            :ARG2 (t / temporal-quantity :quant 53
                  :unit (m / minute)
                  :mod (t2 / that))))

instance(a,and)
instance(d,do-02)
instance(i,i)
instance(a2,amr-unknown)
instance(t,temporal-quantity)
instance(m,minute)
instance(t2,that)
op1(a,d)
ARG0(d,i)
ARG1(d,a2)
ARG2(d,t)
quant(t,53)
unit(t,m)
mod(t,t2)

(d / do-02
      :ARG0 (y2 / you)
      :ARG1 (a2 / anything
            :ARG1-of (l / like-02
                  :ARG0 y2)))

instance(d,do-02)
instance(y2,you)
instance(a2,anything)
instance(l,like-02)
ARG0(d,y2)
ARG1(d,a2)
ARG1-of(a2,l)
ARG0(l,y2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (w / walk-01
            :ARG0 (i / i)
            :direction (t / toward
                  :destination (s2 / spring
                        :source-of (w2 / water
                              :ARG1-of (f / fresh-04))))
            :manner (l2 / leisure
                  :poss p)
            :condition (h / have-03
                  :ARG0 p
                  :ARG1 (t2 / temporal-quantity :quant 53
                        :unit (m / minute)
                        :ARG1-of (s3 / spend-02
                              :ARG2 (l3 / like-02
                                    :ARG0 p)))))
      :ARG2 p)

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(w,walk-01)
instance(i,i)
instance(t,toward)
instance(s2,spring)
instance(w2,water)
instance(f,fresh-04)
instance(l2,leisure)
instance(h,have-03)
instance(t2,temporal-quantity)
instance(m,minute)
instance(s3,spend-02)
instance(l3,like-02)
ARG0(s,p)
mod(p,l)
ARG1(s,w)
ARG0(w,i)
direction(w,t)
destination(t,s2)
source-of(s2,w2)
ARG1-of(w2,f)
manner(w,l2)
poss(l2,p)
condition(w,h)
ARG0(h,p)
ARG1(h,t2)
quant(t2,53)
unit(t2,m)
ARG1-of(t2,s3)
ARG2(s3,l3)
ARG0(l3,p)
ARG2(s,p)

(c / chapter
  :mod 24)

instance(c,chapter)
mod(c,24)

(a / and
      :op1 (p / pass-03
            :ARG1 (t2 / temporal-quantity :quant 8
                  :unit (d / day))
            :time (s / since
                  :op1 (a2 / accident
                        :poss (i / i)
                        :location (d2 / desert))))
      :op2 (l / listen-01
            :ARG0 i
            :ARG1 (s2 / story
                  :poss (p2 / person
                        :ARG0-of (m2 / merchandise-01)))
            :time (d3 / drink-01
                  :ARG0 i
                  :ARG1 (d4 / drop
                        :part-of (w / water
                              :ARG1-of (s3 / supply-01
                                    :ARG2 i))
                        :ord (o / ordinal-entity :value "-1")))))

instance(a,and)
instance(p,pass-03)
instance(t2,temporal-quantity)
instance(d,day)
instance(s,since)
instance(a2,accident)
instance(i,i)
instance(d2,desert)
instance(l,listen-01)
instance(s2,story)
instance(p2,person)
instance(m2,merchandise-01)
instance(d3,drink-01)
instance(d4,drop)
instance(w,water)
instance(s3,supply-01)
instance(o,ordinal-entity)
op1(a,p)
ARG1(p,t2)
quant(t2,8)
unit(t2,d)
time(p,s)
op1(s,a2)
poss(a2,i)
location(a2,d2)
op2(a,l)
ARG0(l,i)
ARG1(l,s2)
poss(s2,p2)
ARG0-of(p2,m2)
time(l,d3)
ARG0(d3,i)
ARG1(d3,d4)
part-of(d4,w)
ARG1-of(w,s3)
ARG2(s3,i)
ord(d4,o)
value(o,"-1")

(a / ah :mode expressive)

instance(a,ah)
mode(a,expressive)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (c2 / charm-01
                  :ARG0 (m / memory
                        :poss (y / you)
                        :mod (t / this))
                  :concession-of (a2 / and
                        :op1 (s2 / succeed-01 :polarity -
                              :ARG0 i
                              :ARG1 (r / repair-01
                                    :ARG0 i
                                    :ARG1 (p2 / plane
                                          :poss i))
                              :time (y2 / yet))
                        :op2 (h / have-03
                              :ARG0 i
                              :ARG1 (n / nothing
                                    :purpose (d / drink-01
                                          :ARG0 i)))
                        :op3 (h2 / happy-01
                              :ARG1 i
                              :degree (v2 / very)
                              :condition (p3 / possible-01
                                    :ARG1 (w / walk-01
                                          :ARG0 i
                                          :direction (s3 / spring
                                                :source-of (w2 / water
                                                      :ARG1-of (f / fresh-04)))
                                          :manner (a3 / at
                                                :op1 (l2 / leisure
                                                      :poss i))))))
                  :degree (v / very)))
      :ARG2 (p / prince
            :mod (l / little)))

instance(s,say-01)
instance(i,i)
instance(a,and)
instance(c2,charm-01)
instance(m,memory)
instance(y,you)
instance(t,this)
instance(a2,and)
instance(s2,succeed-01)
instance(r,repair-01)
instance(p2,plane)
instance(y2,yet)
instance(h,have-03)
instance(n,nothing)
instance(d,drink-01)
instance(h2,happy-01)
instance(v2,very)
instance(p3,possible-01)
instance(w,walk-01)
instance(s3,spring)
instance(w2,water)
instance(f,fresh-04)
instance(a3,at)
instance(l2,leisure)
instance(v,very)
instance(p,prince)
instance(l,little)
ARG0(s,i)
ARG1(s,a)
op1(a,c2)
ARG0(c2,m)
poss(m,y)
mod(m,t)
concession-of(c2,a2)
op1(a2,s2)
polarity(s2,-)
ARG0(s2,i)
ARG1(s2,r)
ARG0(r,i)
ARG1(r,p2)
poss(p2,i)
time(s2,y2)
op2(a2,h)
ARG0(h,i)
ARG1(h,n)
purpose(n,d)
ARG0(d,i)
op3(a2,h2)
ARG1(h2,i)
degree(h2,v2)
condition(h2,p3)
ARG1(p3,w)
ARG0(w,i)
direction(w,s3)
source-of(s3,w2)
ARG1-of(w2,f)
manner(w,a3)
op1(a3,l2)
poss(l2,i)
degree(c2,v)
ARG2(s,p)
mod(p,l)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (f / fox
            :ARG0-of (h / have-rel-role-91
                  :ARG1 i
                  :ARG2 (f2 / friend)))
      :ARG2 (i / i))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(f,fox)
instance(h,have-rel-role-91)
instance(f2,friend)
instance(i,i)
ARG0(s,p)
mod(p,l)
ARG1(s,f)
ARG0-of(f,h)
ARG1(h,i)
ARG2(h,f2)
ARG2(s,i)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (c / concern-02
          :ARG0 (m2 / matter
                  :domain (t / this))
          :ARG1 (f / fox)
          :time (n / no-longer))
  :ARG2 (m / man
          :mod (l / little)
          :poss i
          :mod (d / dear)))

instance(s,say-01)
instance(i,i)
instance(c,concern-02)
instance(m2,matter)
instance(t,this)
instance(f,fox)
instance(n,no-longer)
instance(m,man)
instance(l,little)
instance(d,dear)
ARG0(s,i)
ARG1(s,c)
ARG0(c,m2)
domain(m2,t)
ARG1(c,f)
time(c,n)
ARG2(s,m)
mod(m,l)
poss(m,i)
mod(m,d)

(c2 / concern-02
  :polarity -
  :ARG1-of (c3 / cause-01
             :ARG0 (a / amr-unknown)))

instance(c2,concern-02)
instance(c3,cause-01)
instance(a,amr-unknown)
polarity(c2,-)
ARG1-of(c2,c3)
ARG0(c3,a)

(c / cause-01
      :ARG0 (d / die-01
            :ARG1 (i / i)
            :ARG1-of (c2 / cause-01
                  :ARG0 (t / thirst-01
                        :ARG0 i))
            :time (a / about-to)))

instance(c,cause-01)
instance(d,die-01)
instance(i,i)
instance(c2,cause-01)
instance(t,thirst-01)
instance(a,about-to)
ARG0(c,d)
ARG1(d,i)
ARG1-of(d,c2)
ARG0(c2,t)
ARG0(t,i)
time(d,a)

(a / and
      :op1 (f / follow-02 :polarity -
            :ARG0 (h / he)
            :ARG1 (r / reason-01
                  :ARG0 (i / i)))
      :op2 (a2 / answer-01
            :ARG0 h
            :ARG1 i
            :ARG2 (g / good-02
                  :ARG1 (h2 / have-rel-role-91
                        :ARG1 o
                        :ARG2 (f2 / friend))
                  :concession (e / even-if
                        :op1 (d / die-01
                              :ARG1 (o / one)
                              :time (a3 / about-to))))))

instance(a,and)
instance(f,follow-02)
instance(h,he)
instance(r,reason-01)
instance(i,i)
instance(a2,answer-01)
instance(g,good-02)
instance(h2,have-rel-role-91)
instance(f2,friend)
instance(e,even-if)
instance(d,die-01)
instance(o,one)
instance(a3,about-to)
op1(a,f)
polarity(f,-)
ARG0(f,h)
ARG1(f,r)
ARG0(r,i)
op2(a,a2)
ARG0(a2,h)
ARG1(a2,i)
ARG2(a2,g)
ARG1(g,h2)
ARG1(h2,o)
ARG2(h2,f2)
concession(g,e)
op1(e,d)
ARG1(d,o)
time(d,a3)

(g / glad-02
      :ARG0 (h / have-rel-role-91
            :ARG0 (f2 / fox)
            :ARG1 i
            :ARG2 (f / friend))
      :ARG1 (i / i
            :ARG0-of (e / exemplify-01))
      :degree (v / very))

instance(g,glad-02)
instance(h,have-rel-role-91)
instance(f2,fox)
instance(f,friend)
instance(i,i)
instance(e,exemplify-01)
instance(v,very)
ARG0(g,h)
ARG0(h,f2)
ARG1(h,i)
ARG2(h,f)
ARG1(g,i)
ARG0-of(i,e)
degree(g,v)

(p / possible-01
  :ARG1 (g / guess-01
            :ARG0 (h / he)
            :ARG1 (d / danger))
  :polarity -)

instance(p,possible-01)
instance(g,guess-01)
instance(h,he)
instance(d,danger)
ARG1(p,g)
ARG0(g,h)
ARG1(g,d)
polarity(p,-)

(s / say-01
  :ARG0 (i / i)
  :ARG2 i)

instance(s,say-01)
instance(i,i)
ARG0(s,i)
ARG2(s,i)

(a / and
  :op1 (h / hunger-01
         :ARG0 (h2 / he)
         :polarity -)
  :op2 (t / thirst-01
         :ARG0 h2
         :polarity -)
  :time (e / ever))

instance(a,and)
instance(h,hunger-01)
instance(h2,he)
instance(t,thirst-01)
instance(e,ever)
op1(a,h)
ARG0(h,h2)
polarity(h,-)
op2(a,t)
ARG0(t,h2)
polarity(t,-)
time(a,e)

(n / need-01
  :ARG0 (h / he)
  :ARG1 (s / sunshine
          :quant (l / little))
  :mod (a / all))

instance(n,need-01)
instance(h,he)
instance(s,sunshine)
instance(l,little)
instance(a,all)
ARG0(n,h)
ARG1(n,s)
quant(s,l)
mod(n,a)

(c / contrast-01
  :ARG2 (a2 / and
          :op1 (l / look-01
                 :ARG0 (h / he)
                 :ARG1 (i / i)
                 :manner (s / steady))
          :op2 (r / reply-01
                 :ARG0 h
                 :ARG1 (t / thing
                         :ARG1-of (t2 / think-01
                                    :ARG0 i))
                 :ARG2 (t3 / thirst-01
                         :ARG0 h
                         :mod (t4 / too)))))

instance(c,contrast-01)
instance(a2,and)
instance(l,look-01)
instance(h,he)
instance(i,i)
instance(s,steady)
instance(r,reply-01)
instance(t,thing)
instance(t2,think-01)
instance(t3,thirst-01)
instance(t4,too)
ARG2(c,a2)
op1(a2,l)
ARG0(l,h)
ARG1(l,i)
manner(l,s)
op2(a2,r)
ARG0(r,h)
ARG1(r,t)
ARG1-of(t,t2)
ARG0(t2,i)
ARG2(r,t3)
ARG0(t3,h)
mod(t3,t4)

(l / look-01
  :ARG0 (w / we)
  :ARG1 (w2 / well)
  :mode imperative)

instance(l,look-01)
instance(w,we)
instance(w2,well)
ARG0(l,w)
ARG1(l,w2)
mode(l,imperative)

(g2 / gesture-01
      :ARG0 (i / i)
      :ARG1 (w / weary-01
            :ARG1 i))

instance(g2,gesture-01)
instance(i,i)
instance(w,weary-01)
ARG0(g2,i)
ARG1(g2,w)
ARG1(w,i)

(a / absurd
  :domain (l / look-01
            :ARG1 (w / well)
            :location (d / desert
                        :mod (i / immense))
            :manner (r / random)))

instance(a,absurd)
instance(l,look-01)
instance(w,well)
instance(d,desert)
instance(i,immense)
instance(r,random)
domain(a,l)
ARG1(l,w)
location(l,d)
mod(d,i)
manner(l,r)

(h / have-concession-91
  :ARG1 (s / start-01
          :ARG0 (w / we)
          :ARG1 (w2 / walk-01)))

instance(h,have-concession-91)
instance(s,start-01)
instance(w,we)
instance(w2,walk-01)
ARG1(h,s)
ARG0(s,w)
ARG1(s,w2)

(a / and
      :op1 (f / fall-04
            :ARG1 (d / darkness))
      :op2 (b / begin-01
            :ARG0 (s / star)
            :ARG1 (c / come-out-09
                  :ARG1 s))
      :time (t / trudge-01
            :ARG0 (w / we)
            :duration (s2 / several
                  :op1 (t2 / temporal-quantity :quant 1
                        :unit (h / hour)))
            :manner (s3 / silent)))

instance(a,and)
instance(f,fall-04)
instance(d,darkness)
instance(b,begin-01)
instance(s,star)
instance(c,come-out-09)
instance(t,trudge-01)
instance(w,we)
instance(s2,several)
instance(t2,temporal-quantity)
instance(h,hour)
instance(s3,silent)
op1(a,f)
ARG1(f,d)
op2(a,b)
ARG0(b,s)
ARG1(b,c)
ARG1(c,s)
time(a,t)
ARG0(t,w)
duration(t,s2)
op1(s2,t2)
quant(t2,1)
unit(t2,h)
manner(t,s3)

(a / and
      :op1 (m / make-02
            :ARG0 (t / thirst-01
                  :ARG0 (i / i))
            :ARG1 (f / feverish
                  :domain i
                  :degree (l / little)))
      :op2 (l2 / look-01
            :ARG0 i
            :ARG1 (t2 / they)
            :ARG1-of (r / resemble-01
                  :ARG2 (d / dream-01
                        :ARG0 i))))

instance(a,and)
instance(m,make-02)
instance(t,thirst-01)
instance(i,i)
instance(f,feverish)
instance(l,little)
instance(l2,look-01)
instance(t2,they)
instance(r,resemble-01)
instance(d,dream-01)
op1(a,m)
ARG0(m,t)
ARG0(t,i)
ARG1(m,f)
domain(f,i)
degree(f,l)
op2(a,l2)
ARG0(l2,i)
ARG1(l2,t2)
ARG1-of(l2,r)
ARG2(r,d)
ARG0(d,i)

(c / come-01
      :ARG1 (w / word-01
            :ARG0 (p / prince
                  :mod (l2 / little))
            :ARG1 (t3 / truth-value
                  :polarity-of (t / thirst-01
                        :ARG0 (y / you
                              :mod (t2 / too))))
            :mod (l / last))
      :ARG4 (m / memory
            :poss (i / i))
      :manner (r / reel-03
            :ARG1 w
            :ARG2 m))

instance(c,come-01)
instance(w,word-01)
instance(p,prince)
instance(l2,little)
instance(t3,truth-value)
instance(t,thirst-01)
instance(y,you)
instance(t2,too)
instance(l,last)
instance(m,memory)
instance(i,i)
instance(r,reel-03)
ARG1(c,w)
ARG0(w,p)
mod(p,l2)
ARG1(w,t3)
polarity-of(t3,t)
ARG0(t,y)
mod(y,t2)
mod(w,l)
ARG4(c,m)
poss(m,i)
manner(c,r)
ARG1(r,w)
ARG2(r,m)

(d / demand-01
      :ARG0 (i / i))

instance(d,demand-01)
instance(i,i)
ARG0(d,i)

(c / contrast-01
  :ARG2 (r / reply-01
          :ARG0 (h / he)
          :ARG1 (q / question-01
                  :ARG0 (i / i))
          :polarity -))

instance(c,contrast-01)
instance(r,reply-01)
instance(h,he)
instance(q,question-01)
instance(i,i)
ARG2(c,r)
ARG0(r,h)
ARG1(r,q)
ARG0(q,i)
polarity(r,-)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (p / possible-01
            :ARG1 (g / good-04
                  :ARG1 (w / water)
                  :ARG2 (h2 / heart)
                  :mod (a / also)))
      :ARG2 (i / i)
      :mod (m / mere))

instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(g,good-04)
instance(w,water)
instance(h2,heart)
instance(a,also)
instance(i,i)
instance(m,mere)
ARG0(s,h)
ARG1(s,p)
ARG1(p,g)
ARG1(g,w)
ARG2(g,h2)
mod(g,a)
ARG2(s,i)
mod(s,m)

(u2 / understand-01
  :ARG0 (i / i)
  :ARG1 (a / answer
          :mod (t / this))
  :polarity -
  :concession-of (s / say-01
                   :ARG0 i
                   :ARG1 (n / nothing)))

instance(u2,understand-01)
instance(i,i)
instance(a,answer)
instance(t,this)
instance(s,say-01)
instance(n,nothing)
ARG0(u2,i)
ARG1(u2,a)
mod(a,t)
polarity(u2,-)
concession-of(u2,s)
ARG0(s,i)
ARG1(s,n)

(k / know-01
      :ARG0 (i / i)
      :ARG1 (p / possible-01 :polarity -
            :ARG1 (c / crossexamine-01
                  :ARG0 i
                  :ARG1 (h / he)))
      :degree (w / well
            :degree (v / very)))

instance(k,know-01)
instance(i,i)
instance(p,possible-01)
instance(c,crossexamine-01)
instance(h,he)
instance(w,well)
instance(v,very)
ARG0(k,i)
ARG1(k,p)
polarity(p,-)
ARG1(p,c)
ARG0(c,i)
ARG1(c,h)
degree(k,w)
degree(w,v)

(t / tire-01
      :ARG1 (h / he))

instance(t,tire-01)
instance(h,he)
ARG1(t,h)

(s / sit-down-02
  :ARG1 (h / he))

instance(s,sit-down-02)
instance(h,he)
ARG1(s,h)

(s / sit-down-02
  :ARG1 (i / i)
  :location (b / beside
              :op1 (h / he)))

instance(s,sit-down-02)
instance(i,i)
instance(b,beside)
instance(h,he)
ARG1(s,i)
location(s,b)
op1(b,h)

(a / and
      :op2 (s / speak-01
            :ARG0 (h / he)
            :ARG1 (b / beautiful-02
                  :ARG1 (s5 / star)
                  :ARG1-of (c / cause-01
                        :ARG0 (f / flower
                              :ARG1-of (s6 / see-01
                                    :ARG1-of (p / possible-01 :polarity -)))))
            :time (a2 / after
                  :op1 (s2 / silent
                        :duration (l / little)))
            :mod (a3 / again)))

instance(a,and)
instance(s,speak-01)
instance(h,he)
instance(b,beautiful-02)
instance(s5,star)
instance(c,cause-01)
instance(f,flower)
instance(s6,see-01)
instance(p,possible-01)
instance(a2,after)
instance(s2,silent)
instance(l,little)
instance(a3,again)
op2(a,s)
ARG0(s,h)
ARG1(s,b)
ARG1(b,s5)
ARG1-of(b,c)
ARG0(c,f)
ARG1-of(f,s6)
ARG1-of(s6,p)
polarity(p,-)
time(s,a2)
op1(a2,s2)
duration(s2,l)
mod(s,a3)

(r / reply-01
  :ARG0 (i / i)
  :ARG2 (s / so
          :domain (t / that)))

instance(r,reply-01)
instance(i,i)
instance(s,so)
instance(t,that)
ARG0(r,i)
ARG2(r,s)
domain(s,t)

(a / and
      :op2 (l / look-01
            :ARG0 (i / i)
            :ARG1 (a3 / across
                  :op1 (r / ridge
                        :consist-of (s / sand)
                        :ARG1-of (s2 / stretch-out-02
                              :location (b / before
                                    :op1 (w / we)))
                        :ARG1-of (l2 / light-04
                              :ARG0 (m / moon))))
            :manner (s3 / say-01 :polarity -
                  :ARG0 i
                  :ARG1 (a2 / anything
                        :mod (m2 / more)))))

instance(a,and)
instance(l,look-01)
instance(i,i)
instance(a3,across)
instance(r,ridge)
instance(s,sand)
instance(s2,stretch-out-02)
instance(b,before)
instance(w,we)
instance(l2,light-04)
instance(m,moon)
instance(s3,say-01)
instance(a2,anything)
instance(m2,more)
op2(a,l)
ARG0(l,i)
ARG1(l,a3)
op1(a3,r)
consist-of(r,s)
ARG1-of(r,s2)
location(s2,b)
op1(b,w)
ARG1-of(r,l2)
ARG0(l2,m)
manner(l,s3)
polarity(s3,-)
ARG0(s3,i)
ARG1(s3,a2)
mod(a2,m2)

(a / add-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (b / beautiful-02
            :ARG1 (d / desert)))

instance(a,add-01)
instance(p,prince)
instance(l,little)
instance(b,beautiful-02)
instance(d,desert)
ARG0(a,p)
mod(p,l)
ARG1(a,b)
ARG1(b,d)

(a / and
      :op2 (t / true-01
            :ARG1 (t2 / that)))

instance(a,and)
instance(t,true-01)
instance(t2,that)
op2(a,t)
ARG1(t,t2)

(l / love-01
      :ARG0 (i / i)
      :ARG1 (d / desert)
      :time (a / always))

instance(l,love-01)
instance(i,i)
instance(d,desert)
instance(a,always)
ARG0(l,i)
ARG1(l,d)
time(l,a)

(a / and
      :op1 (s / sit-down-02
            :ARG1 (o / one)
            :location (d / dune
                  :consist-of (s2 / sand)
                  :location (d2 / desert)))
      :op2 (s3 / see-01
            :ARG0 o
            :ARG1 (n / nothing))
      :op3 (h / hear-01
            :ARG0 o
            :ARG1 (n2 / nothing)))

instance(a,and)
instance(s,sit-down-02)
instance(o,one)
instance(d,dune)
instance(s2,sand)
instance(d2,desert)
instance(s3,see-01)
instance(n,nothing)
instance(h,hear-01)
instance(n2,nothing)
op1(a,s)
ARG1(s,o)
location(s,d)
consist-of(d,s2)
location(d,d2)
op2(a,s3)
ARG0(s3,o)
ARG1(s3,n)
op3(a,h)
ARG0(h,o)
ARG1(h,n2)

(a2 / and
      :op1 (t / throb-01
            :ARG1 (s / something))
      :op2 (g / gleam-01
            :ARG0 s)
      :concession (s2 / silent))

instance(a2,and)
instance(t,throb-01)
instance(s,something)
instance(g,gleam-01)
instance(s2,silent)
op1(a2,t)
ARG1(t,s)
op2(a2,g)
ARG0(g,s)
concession(a2,s2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (m / make-02
            :ARG0 (h / hide-01
                  :ARG0 d
                  :ARG1 (w / well)
                  :location (s2 / somewhere))
            :ARG1 (b / beautiful-02
                  :ARG1 (d / desert))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(m,make-02)
instance(h,hide-01)
instance(w,well)
instance(s2,somewhere)
instance(b,beautiful-02)
instance(d,desert)
ARG0(s,p)
mod(p,l)
ARG1(s,m)
ARG0(m,h)
ARG0(h,d)
ARG1(h,w)
location(h,s2)
ARG1(m,b)
ARG1(b,d)

(a / astonish-01
  :ARG0 (u / understand-01
          :ARG0 i
          :ARG1 (r / radiate-01
                  :ARG0 (s2 / sand)
                  :mod (m / mystery)
                  :mod (t / that))
          :manner (s / sudden))
  :ARG1 (i / i))

instance(a,astonish-01)
instance(u,understand-01)
instance(r,radiate-01)
instance(s2,sand)
instance(m,mystery)
instance(t,that)
instance(s,sudden)
instance(i,i)
ARG0(a,u)
ARG0(u,i)
ARG1(u,r)
ARG0(r,s2)
mod(r,m)
mod(r,t)
manner(u,s)
ARG1(a,i)

(a / and
  :op1 (l / live-01
         :ARG0 (i / i)
         :location (h / house
                     :mod (o / old))
         :time (b / boy
                 :mod (l2 / little)
                 :domain i))
  :op2 (t / tell-01
         :ARG0 (l3 / legend)
         :ARG1 (b2 / bury-01
                 :ARG1 (t2 / treasure)
                 :location h)
         :ARG2 (w / we)))

instance(a,and)
instance(l,live-01)
instance(i,i)
instance(h,house)
instance(o,old)
instance(b,boy)
instance(l2,little)
instance(t,tell-01)
instance(l3,legend)
instance(b2,bury-01)
instance(t2,treasure)
instance(w,we)
op1(a,l)
ARG0(l,i)
location(l,h)
mod(h,o)
time(l,b)
mod(b,l2)
domain(b,i)
op2(a,t)
ARG0(t,l3)
ARG1(t,b2)
ARG1(b2,t2)
location(b2,h)
ARG2(t,w)

(a / and
      :op1 (s / sure-02
            :ARG0 (n / no-one)
            :ARG1 (t / thing
                  :manner-of (f / find-01
                        :ARG0 n
                        :ARG1 (i / it)))
            :time (e2 / ever)
            :mod (t2 / to-be-sure))
      :op2 (p2 / possible-01
            :ARG1 (l / look-01
                  :ARG0 n
                  :ARG1 i
                  :time e2)))

instance(a,and)
instance(s,sure-02)
instance(n,no-one)
instance(t,thing)
instance(f,find-01)
instance(i,it)
instance(e2,ever)
instance(t2,to-be-sure)
instance(p2,possible-01)
instance(l,look-01)
op1(a,s)
ARG0(s,n)
ARG1(s,t)
manner-of(t,f)
ARG0(f,n)
ARG1(f,i)
time(s,e2)
mod(s,t2)
op2(a,p2)
ARG1(p2,l)
ARG0(l,n)
ARG1(l,i)
time(l,e2)

(c / contrast-01
  :ARG2 (c2 / cast-01
          :ARG0 (i / it)
          :ARG1 (e / enchant-01)
          :ARG2 (h / house
                  :mod (t / that))))

instance(c,contrast-01)
instance(c2,cast-01)
instance(i,it)
instance(e,enchant-01)
instance(h,house)
instance(t,that)
ARG2(c,c2)
ARG0(c2,i)
ARG1(c2,e)
ARG2(c2,h)
mod(h,t)

(h / hide-01
      :ARG0 (h2 / home
            :poss (i / i))
      :ARG1 (s / secret)
      :location (d / deep-02
            :ARG1 (h3 / heart
                  :part-of h2)))

instance(h,hide-01)
instance(h2,home)
instance(i,i)
instance(s,secret)
instance(d,deep-02)
instance(h3,heart)
ARG0(h,h2)
poss(h2,i)
ARG1(h,s)
location(h,d)
ARG1(d,h3)
part-of(h3,h2)

(y / yes)

instance(y,yes)

(s / say-01
  :ARG0 (i / i)
  :ARG2 (p / prince
          :mod (l / little)))

instance(s,say-01)
instance(i,i)
instance(p,prince)
instance(l,little)
ARG0(s,i)
ARG2(s,p)
mod(p,l)

(g2 / give-01
      :ARG0 (s3 / something
            :ARG1-of (s4 / see-01
                  :ARG1-of (p / possible-01 :polarity -)))
      :ARG1 (b / beautiful-02
            :ARG1 a)
      :ARG2 (a / and
            :op1 (h / house)
            :op2 (s2 / star)
            :op3 (d / desert)))

instance(g2,give-01)
instance(s3,something)
instance(s4,see-01)
instance(p,possible-01)
instance(b,beautiful-02)
instance(a,and)
instance(h,house)
instance(s2,star)
instance(d,desert)
ARG0(g2,s3)
ARG1-of(s3,s4)
ARG1-of(s4,p)
polarity(p,-)
ARG1(g2,b)
ARG1(b,a)
ARG2(g2,a)
op1(a,h)
op2(a,s2)
op3(a,d)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (g / glad-02
            :ARG0 (a / agree-01
                  :ARG0 (y / you)
                  :ARG2 (f / fox
                        :poss h))
            :ARG1 h))

instance(s,say-01)
instance(h,he)
instance(g,glad-02)
instance(a,agree-01)
instance(y,you)
instance(f,fox)
ARG0(s,h)
ARG1(s,g)
ARG0(g,a)
ARG0(a,y)
ARG2(a,f)
poss(f,h)
ARG1(g,h)

(a2 / and
      :op1 (t / take-01
            :ARG0 (i / i)
            :ARG1 (p / prince
                  :mod (l / little))
            :ARG3 (a / arm
                  :part-of i))
      :op2 (s / set-out-07
            :ARG0 i
            :manner (w / walk-01)
            :mod (a3 / again
                  :mod (o / once)))
      :time (d / drop-off-03
            :ARG0 p
            :ARG2 (s2 / sleep-01
                  :ARG0 p)))

instance(a2,and)
instance(t,take-01)
instance(i,i)
instance(p,prince)
instance(l,little)
instance(a,arm)
instance(s,set-out-07)
instance(w,walk-01)
instance(a3,again)
instance(o,once)
instance(d,drop-off-03)
instance(s2,sleep-01)
op1(a2,t)
ARG0(t,i)
ARG1(t,p)
mod(p,l)
ARG3(t,a)
part-of(a,i)
op2(a2,s)
ARG0(s,i)
manner(s,w)
mod(s,a3)
mod(a3,o)
time(a2,d)
ARG0(d,p)
ARG2(d,s2)
ARG0(s2,p)

(f / feel-01
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (m / move-05
                  :ARG1 i
                  :ARG1-of (d / deep-02))
            :op2 (s / stir-02
                  :ARG1 i)))

instance(f,feel-01)
instance(i,i)
instance(a,and)
instance(m,move-05)
instance(d,deep-02)
instance(s,stir-02)
ARG0(f,i)
ARG1(f,a)
op1(a,m)
ARG1(m,i)
ARG1-of(m,d)
op2(a,s)
ARG1(s,i)

(s / seem-01
      :ARG1 (c / carry-01
            :ARG0 i
            :ARG1 (t / treasure
                  :mod (f / fragile
                        :degree (v / very))))
      :ARG2 (i / i))

instance(s,seem-01)
instance(c,carry-01)
instance(t,treasure)
instance(f,fragile)
instance(v,very)
instance(i,i)
ARG1(s,c)
ARG0(c,i)
ARG1(c,t)
mod(t,f)
degree(f,v)
ARG2(s,i)

(s / seem-01
      :ARG1 (t / thing :polarity -
            :location (p / planet :wiki "Earth" :name (n / name :op1 "Earth")
                  :mod (a / all))
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / fragile)
                  :ARG3 (m / more)))
      :ARG2 (i / i)
      :mod (e / even))

instance(s,seem-01)
instance(t,thing)
instance(p,planet)
instance(n,name)
instance(a,all)
instance(h,have-degree-91)
instance(f,fragile)
instance(m,more)
instance(i,i)
instance(e,even)
ARG1(s,t)
polarity(t,-)
location(t,p)
wiki(p,"Earth")
name(p,n)
op1(n,"Earth")
mod(p,a)
ARG1-of(t,h)
ARG2(h,f)
ARG3(h,m)
ARG2(s,i)
mod(s,e)

(a / and
      :op1 (l / look-01
            :ARG0 (i / i)
            :ARG1 (a2 / and
                  :op1 (f / forehead
                        :part-of (h / he)
                        :ARG1-of (p / pale-03))
                  :op2 (e / eye
                        :ARG1-of (c / close-01)
                        :part-of h)
                  :op3 (l2 / lock
                        :consist-of (h2 / hair)
                        :ARG1-of (t / tremble-01
                              :ARG1-of (c2 / cause-01
                                    :ARG0 (w / wind)))
                        :part-of h)
                  :ARG1-of (l3 / light-04
                        :ARG0 (m2 / moon))))
      :op2 (s / say-01
            :ARG0 i
            :ARG1 (s2 / see-01
                  :ARG0 i
                  :ARG1 (s3 / shell)
                  :mod (n / nothing-but)
                  :location (h3 / here))
            :ARG2 i))

instance(a,and)
instance(l,look-01)
instance(i,i)
instance(a2,and)
instance(f,forehead)
instance(h,he)
instance(p,pale-03)
instance(e,eye)
instance(c,close-01)
instance(l2,lock)
instance(h2,hair)
instance(t,tremble-01)
instance(c2,cause-01)
instance(w,wind)
instance(l3,light-04)
instance(m2,moon)
instance(s,say-01)
instance(s2,see-01)
instance(s3,shell)
instance(n,nothing-but)
instance(h3,here)
op1(a,l)
ARG0(l,i)
ARG1(l,a2)
op1(a2,f)
part-of(f,h)
ARG1-of(f,p)
op2(a2,e)
ARG1-of(e,c)
part-of(e,h)
op3(a2,l2)
consist-of(l2,h2)
ARG1-of(l2,t)
ARG1-of(t,c2)
ARG0(c2,w)
part-of(l2,h)
ARG1-of(a2,l3)
ARG0(l3,m2)
op2(a,s)
ARG0(s,i)
ARG1(s,s2)
ARG0(s2,i)
ARG1(s2,s3)
mod(s2,n)
location(s2,h3)
ARG2(s,i)

(s / see-01
      :ARG1 (t / thing
            :ARG1-of (h / have-degree-91
                  :ARG2 (i2 / important-01
                        :ARG1 t)
                  :ARG3 (m / most)))
      :ARG1-of (p / possible-01 :polarity -))

instance(s,see-01)
instance(t,thing)
instance(h,have-degree-91)
instance(i2,important-01)
instance(m,most)
instance(p,possible-01)
ARG1(s,t)
ARG1-of(t,h)
ARG2(h,i2)
ARG1(i2,t)
ARG3(h,m)
ARG1-of(s,p)
polarity(p,-)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (m / move-05
            :ARG0 (p / prince
                  :mod (l / little)
                  :ARG0-of (s2 / sleep-01
                        :location (h / here)))
            :ARG1 i
            :ARG2 (l2 / loyal-01
                  :ARG1 p
                  :ARG2 (f / flower
                        :op1 (i2 / image
                              :poss (r / rose
                                    :ARG1-of (s3 / shine-01
                                          :ARG2 (t / through
                                                :op1 (b / being
                                                      :poss p
                                                      :mod (w / whole)))
                                          :ARG1-of (r2 / resemble-01
                                                :ARG2 (f2 / flame-01
                                                      :ARG1 (l3 / lamp)))
                                          :concession (e / even-when
                                                :op1 (s6 / sleep-01
                                                      :ARG0 p)))))))
            :ARG1-of (d / deep-02))
      :ARG2 i
      :time (o / open-01
            :ARG1 (l4 / lip
                  :part-of p)
            :degree (s4 / slight)
            :manner (s8 / smile-01
                  :mod (h3 / half)
                  :degree (s5 / suspicion)))
      :mod (a2 / again))

instance(s,say-01)
instance(i,i)
instance(m,move-05)
instance(p,prince)
instance(l,little)
instance(s2,sleep-01)
instance(h,here)
instance(l2,loyal-01)
instance(f,flower)
instance(i2,image)
instance(r,rose)
instance(s3,shine-01)
instance(t,through)
instance(b,being)
instance(w,whole)
instance(r2,resemble-01)
instance(f2,flame-01)
instance(l3,lamp)
instance(e,even-when)
instance(s6,sleep-01)
instance(d,deep-02)
instance(o,open-01)
instance(l4,lip)
instance(s4,slight)
instance(s8,smile-01)
instance(h3,half)
instance(s5,suspicion)
instance(a2,again)
ARG0(s,i)
ARG1(s,m)
ARG0(m,p)
mod(p,l)
ARG0-of(p,s2)
location(s2,h)
ARG1(m,i)
ARG2(m,l2)
ARG1(l2,p)
ARG2(l2,f)
op1(f,i2)
poss(i2,r)
ARG1-of(r,s3)
ARG2(s3,t)
op1(t,b)
poss(b,p)
mod(b,w)
ARG1-of(s3,r2)
ARG2(r2,f2)
ARG1(f2,l3)
concession(s3,e)
op1(e,s6)
ARG0(s6,p)
ARG1-of(m,d)
ARG2(s,i)
time(s,o)
ARG1(o,l4)
part-of(l4,p)
degree(o,s4)
manner(o,s8)
mod(s8,h3)
degree(s8,s5)
mod(s,a2)

(a / and
      :op2 (f / feel-02
            :ARG0 (i / i)
            :ARG1 (h2 / have-degree-91
                  :ARG1 (h / he)
                  :ARG2 (f2 / fragile)
                  :ARG3 (m / more)
                  :mod (s / still))))

instance(a,and)
instance(f,feel-02)
instance(i,i)
instance(h2,have-degree-91)
instance(h,he)
instance(f2,fragile)
instance(m,more)
instance(s,still)
op2(a,f)
ARG0(f,i)
ARG1(f,h2)
ARG1(h2,h)
ARG2(h2,f2)
ARG3(h2,m)
mod(h2,s)

(f / feel-01
      :ARG0 (i / i)
      :ARG1 (n / need-01
            :ARG0 i
            :ARG1 (p / protect-01
                  :ARG0 i
                  :ARG1 (h / he)
                  :conj-as-if (f2 / flame-01
                        :ARG1 h
                        :ARG1-of (e / extinguish-01
                              :ARG0 (p3 / puff-up-04
                                    :ARG1 (w / wind)
                                    :mod (l / little))
                              :ARG1-of (p2 / possible-01))))))

instance(f,feel-01)
instance(i,i)
instance(n,need-01)
instance(p,protect-01)
instance(h,he)
instance(f2,flame-01)
instance(e,extinguish-01)
instance(p3,puff-up-04)
instance(w,wind)
instance(l,little)
instance(p2,possible-01)
ARG0(f,i)
ARG1(f,n)
ARG0(n,i)
ARG1(n,p)
ARG0(p,i)
ARG1(p,h)
conj-as-if(p,f2)
ARG1(f2,h)
ARG1-of(f2,e)
ARG0(e,p3)
ARG1(p3,w)
mod(p3,l)
ARG1-of(e,p2)

(a / and
      :op2 (f / find-01
            :ARG0 (i / i)
            :ARG1 (w / well)
            :time (d / daybreak)
            :time (w2 / walk-01
                  :ARG0 i
                  :mod (o / on)
                  :manner (s / so))))

instance(a,and)
instance(f,find-01)
instance(i,i)
instance(w,well)
instance(d,daybreak)
instance(w2,walk-01)
instance(o,on)
instance(s,so)
op2(a,f)
ARG0(f,i)
ARG1(f,w)
time(f,d)
time(f,w2)
ARG0(w2,i)
mod(w2,o)
manner(w2,s)

(c / chapter
  :mod 25)

instance(c,chapter)
mod(c,25)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (h / have-concession-91
            :ARG1 (k / know-01 :polarity -
                  :ARG0 m
                  :ARG1 (t2 / thing
                        :ARG1-of (l2 / look-01
                              :ARG0 m)))
            :ARG2 (s2 / set-out-07
                  :ARG0 (m / man)
                  :path (w / way
                        :poss m)
                  :manner (t / train
                        :mod (e / express)))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(h,have-concession-91)
instance(k,know-01)
instance(t2,thing)
instance(l2,look-01)
instance(s2,set-out-07)
instance(m,man)
instance(w,way)
instance(t,train)
instance(e,express)
ARG0(s,p)
mod(p,l)
ARG1(s,h)
ARG1(h,k)
polarity(k,-)
ARG0(k,m)
ARG1(k,t2)
ARG1-of(t2,l2)
ARG0(l2,m)
ARG2(h,s2)
ARG0(s2,m)
path(s2,w)
poss(w,m)
manner(s2,t)
mod(t,e)

(a / and
  :op1 (r / rush-01
         :ARG1 (t / they)
         :ARG2 (a2 / about))
  :op2 (e / excite-01
         :ARG1 t)
  :op3 (t2 / turn-01
         :ARG1 t
         :direction (a3 / and
                      :op1 (r2 / round)
                      :op2 (r3 / round)))
  :time (t3 / then))

instance(a,and)
instance(r,rush-01)
instance(t,they)
instance(a2,about)
instance(e,excite-01)
instance(t2,turn-01)
instance(a3,and)
instance(r2,round)
instance(r3,round)
instance(t3,then)
op1(a,r)
ARG1(r,t)
ARG2(r,a2)
op2(a,e)
ARG1(e,t)
op3(a,t2)
ARG1(t2,t)
direction(t2,a3)
op1(a3,r2)
op2(a3,r3)
time(a,t3)

(a / and
      :op2 (a2 / add-01
            :ARG0 (h / he)
            :ARG1 (w / worth-02 :polarity -
                  :ARG1 (i / it)
                  :ARG2 (t / trouble-05
                        :ARG2 i))))

instance(a,and)
instance(a2,add-01)
instance(h,he)
instance(w,worth-02)
instance(i,it)
instance(t,trouble-05)
op2(a,a2)
ARG0(a2,h)
ARG1(a2,w)
polarity(w,-)
ARG1(w,i)
ARG2(w,t)
ARG2(t,i)

(w / well
      :ARG4-of (c / come-01
            :ARG1 (w2 / we))
      :ARG1-of (r / resemble-01 :polarity -
            :ARG2 (w3 / well
                  :location (d / desert :wiki "Sahara"
                        :name (n / name :op1 "Sahara")))))

instance(w,well)
instance(c,come-01)
instance(w2,we)
instance(r,resemble-01)
instance(w3,well)
instance(d,desert)
instance(n,name)
ARG4-of(w,c)
ARG1(c,w2)
ARG1-of(w,r)
polarity(r,-)
ARG2(r,w3)
location(w3,d)
wiki(d,"Sahara")
name(d,n)
op1(n,"Sahara")

(h / hole
      :ARG1-of (d / dig-01
            :ARG2 (s / sand))
      :mod (m / mere)
      :domain (w / well
            :location (d2 / desert :wiki "Sahara" :name (n / name :op1 "Sahara"))))

instance(h,hole)
instance(d,dig-01)
instance(s,sand)
instance(m,mere)
instance(w,well)
instance(d2,desert)
instance(n,name)
ARG1-of(h,d)
ARG2(d,s)
mod(h,m)
domain(h,w)
location(w,d2)
wiki(d2,"Sahara")
name(d2,n)
op1(n,"Sahara")

(r / resemble-01
      :ARG1 (w / well
            :mod (t / this))
      :ARG2 (w2 / well
            :location (v / village)))

instance(r,resemble-01)
instance(w,well)
instance(t,this)
instance(w2,well)
instance(v,village)
ARG1(r,w)
mod(w,t)
ARG2(r,w2)
location(w2,v)

(c3 / contrast-01
  :ARG2 (a / and
          :op1 (v / village
                 :polarity -
                 :location (h / here))
          :op2 (t / think-01
                 :ARG0 (i / i)
                 :ARG1 (d / dream-01
                         :ARG0 i))))

instance(c3,contrast-01)
instance(a,and)
instance(v,village)
instance(h,here)
instance(t,think-01)
instance(i,i)
instance(d,dream-01)
ARG2(c3,a)
op1(a,v)
polarity(v,-)
location(v,h)
op2(a,t)
ARG0(t,i)
ARG1(t,d)
ARG0(d,i)

(s / strange
      :domain (i / it))

instance(s,strange)
instance(i,it)
domain(s,i)

(s / say-01
  :ARG0 (i / i)
  :ARG2 (p / prince
          :mod (l / little)))

instance(s,say-01)
instance(i,i)
instance(p,prince)
instance(l,little)
ARG0(s,i)
ARG2(s,p)
mod(p,l)

(r / ready-02
      :ARG1 (e / everything
            :example (a / and
                  :op1 (p2 / pulley)
                  :op2 (b / bucket)
                  :op3 (r2 / rope)))
      :ARG2 (u / use-01
            :ARG1 e))

instance(r,ready-02)
instance(e,everything)
instance(a,and)
instance(p2,pulley)
instance(b,bucket)
instance(r2,rope)
instance(u,use-01)
ARG1(r,e)
example(e,a)
op1(a,p2)
op2(a,b)
op3(a,r2)
ARG2(r,u)
ARG1(u,e)

(a / and
      :op1 (l / laugh-01
            :ARG0 (h / he))
      :op2 (t / touch-01
            :ARG0 h
            :ARG1 (r / rope))
      :op3 (s / set-08
            :ARG0 h
            :ARG1 (p / pulley)
            :ARG2 (w / work-09
                  :ARG1 p)))

instance(a,and)
instance(l,laugh-01)
instance(h,he)
instance(t,touch-01)
instance(r,rope)
instance(s,set-08)
instance(p,pulley)
instance(w,work-09)
op1(a,l)
ARG0(l,h)
op2(a,t)
ARG0(t,h)
ARG1(t,r)
op3(a,s)
ARG0(s,h)
ARG1(s,p)
ARG2(s,w)
ARG1(w,p)

(a / and
  :op2 (m / moan-01
         :ARG0 (p / pulley)
         :ARG1-of (r / resemble-01
                    :ARG2 (m2 / moan-01
                            :ARG0 (w / weathervane
                                    :mod (o / old)
                                    :ARG1-of (f / forget-01
                                               :ARG0 (w2 / wind)
                                               :time (s / since
                                                       :op1 (l / long))))))))

instance(a,and)
instance(m,moan-01)
instance(p,pulley)
instance(r,resemble-01)
instance(m2,moan-01)
instance(w,weathervane)
instance(o,old)
instance(f,forget-01)
instance(w2,wind)
instance(s,since)
instance(l,long)
op2(a,m)
ARG0(m,p)
ARG1-of(m,r)
ARG2(r,m2)
ARG0(m2,w)
mod(w,o)
ARG1-of(w,f)
ARG0(f,w2)
time(f,s)
op1(s,l)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / truth-value
            :polarity-of (h / hear-01
                  :ARG0 (y / you))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(t,truth-value)
instance(h,hear-01)
instance(y,you)
ARG0(s,p)
mod(p,l)
ARG1(s,t)
polarity-of(t,h)
ARG0(h,y)

(a / and
  :op1 (w / wake-01
         :ARG0 (w2 / we)
         :ARG1 (w3 / well))
  :op2 (s / sing-01
         :ARG0 w3))

instance(a,and)
instance(w,wake-01)
instance(w2,we)
instance(w3,well)
instance(s,sing-01)
op1(a,w)
ARG0(w,w2)
ARG1(w,w3)
op2(a,s)
ARG0(s,w3)

(w / want-01
  :ARG0 (i / i)
  :ARG1 (t / tire-01
          :ARG0 (h / he)
          :ARG1 h
          :instrument (r / rope))
  :polarity -)

instance(w,want-01)
instance(i,i)
instance(t,tire-01)
instance(h,he)
instance(r,rope)
ARG0(w,i)
ARG1(w,t)
ARG0(t,h)
ARG1(t,h)
instrument(t,r)
polarity(w,-)

(l / leave-02
  :ARG0 (y / you)
  :ARG1 (i2 / it)
  :ARG2 (i / i)
  :mode imperative)

instance(l,leave-02)
instance(y,you)
instance(i2,it)
instance(i,i)
ARG0(l,y)
ARG1(l,i2)
ARG2(l,i)
mode(l,imperative)

(s / say-01
  :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(h / have-degree-91
      :ARG1 (i2 / it)
      :ARG2 (h2 / heavy)
      :ARG3 (t / too)
      :ARG6 (c / carry-01
            :ARG0 (y / you)
            :ARG1 i2))

instance(h,have-degree-91)
instance(i2,it)
instance(h2,heavy)
instance(t,too)
instance(c,carry-01)
instance(y,you)
ARG1(h,i2)
ARG2(h,h2)
ARG3(h,t)
ARG6(h,c)
ARG0(c,y)
ARG1(c,i2)

(a / and
      :op1 (h / hoist-01
            :ARG0 (i / i)
            :ARG1 (b / bucket)
            :ARG1-of (s / slow-05)
            :destination (e / edge
                  :part-of (w / well)))
      :op2 (s2 / set-01
            :ARG0 i
            :ARG1 b
            :ARG2 e)
      :ARG0-of (c / cause-01
            :ARG1 (h2 / happy-01
                  :ARG0 (t3 / thing
                        :ARG1-of (a2 / achieve-01
                              :ARG0 i))
                  :ARG1 i
                  :concession (t2 / tire-01
                        :ARG1 i))))

instance(a,and)
instance(h,hoist-01)
instance(i,i)
instance(b,bucket)
instance(s,slow-05)
instance(e,edge)
instance(w,well)
instance(s2,set-01)
instance(c,cause-01)
instance(h2,happy-01)
instance(t3,thing)
instance(a2,achieve-01)
instance(t2,tire-01)
op1(a,h)
ARG0(h,i)
ARG1(h,b)
ARG1-of(h,s)
destination(h,e)
part-of(e,w)
op2(a,s2)
ARG0(s2,i)
ARG1(s2,b)
ARG2(s2,e)
ARG0-of(a,c)
ARG1(c,h2)
ARG0(h2,t3)
ARG1-of(t3,a2)
ARG0(a2,i)
ARG1(h2,i)
concession(h2,t2)
ARG1(t2,i)

(a / and
      :op1 (h / hear-01
            :ARG0 (i / i)
            :ARG1 (s / sing-01
                  :ARG0 (p / pulley))
            :mod (s2 / still))
      :op2 (p2 / possible-01
            :ARG1 (s3 / see-01
                  :ARG0 i
                  :ARG1 (s4 / shimmer-01
                        :ARG1 (s5 / sunlight)
                        :location (w / water
                              :ARG1-of (t / tremble-01
                                    :mod (s6 / still)))))))

instance(a,and)
instance(h,hear-01)
instance(i,i)
instance(s,sing-01)
instance(p,pulley)
instance(s2,still)
instance(p2,possible-01)
instance(s3,see-01)
instance(s4,shimmer-01)
instance(s5,sunlight)
instance(w,water)
instance(t,tremble-01)
instance(s6,still)
op1(a,h)
ARG0(h,i)
ARG1(h,s)
ARG0(s,p)
mod(h,s2)
op2(a,p2)
ARG1(p2,s3)
ARG0(s3,i)
ARG1(s3,s4)
ARG1(s4,s5)
location(s4,w)
ARG1-of(w,t)
mod(t,s6)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / thirst-01
            :ARG0 (i / i)
            :ARG1 (w / water
                  :mod (t2 / this))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(t,thirst-01)
instance(i,i)
instance(w,water)
instance(t2,this)
ARG0(s,p)
mod(p,l)
ARG1(s,t)
ARG0(t,i)
ARG1(t,w)
mod(w,t2)

(g / give-01
  :ARG0 (y / you)
  :ARG1 (t / thing
          :ARG1-of (i3 / include-91
                     :ARG2 (i / it))
          :quant (s / some))
  :ARG2 (i2 / i)
  :mode imperative
  :purpose (d / drink-01
             :ARG0 i2
             :ARG1 t))

instance(g,give-01)
instance(y,you)
instance(t,thing)
instance(i3,include-91)
instance(i,it)
instance(s,some)
instance(i2,i)
instance(d,drink-01)
ARG0(g,y)
ARG1(g,t)
ARG1-of(t,i3)
ARG2(i3,i)
quant(t,s)
ARG2(g,i2)
mode(g,imperative)
purpose(g,d)
ARG0(d,i2)
ARG1(d,t)

(a / and
  :op2 (u / understand-01
         :ARG0 (i / i)
         :ARG1 (t / thing
                 :ARG1-of (l / look-01
                            :ARG0 (h / he)))))

instance(a,and)
instance(u,understand-01)
instance(i,i)
instance(t,thing)
instance(l,look-01)
instance(h,he)
op2(a,u)
ARG0(u,i)
ARG1(u,t)
ARG1-of(t,l)
ARG0(l,h)

(r / raise-01
  :ARG0 (i / i)
  :ARG1 (b / bucket)
  :ARG4 (l / lip
          :part-of (h / he)))

instance(r,raise-01)
instance(i,i)
instance(b,bucket)
instance(l,lip)
instance(h,he)
ARG0(r,i)
ARG1(r,b)
ARG4(r,l)
part-of(l,h)

(a / and
  :op1 (d / drink-01
         :ARG0 (h / he))
  :op2 (c / close-01
         :ARG0 h
         :ARG1 (e / eye
                 :part-of h)))

instance(a,and)
instance(d,drink-01)
instance(h,he)
instance(c,close-01)
instance(e,eye)
op1(a,d)
ARG0(d,h)
op2(a,c)
ARG0(c,h)
ARG1(c,e)
part-of(e,h)

(h / have-degree-91
      :ARG1 (i2 / it)
      :ARG2 (s / sweet-04)
      :ARG3 (e / equal)
      :ARG4 (f2 / food-dish
            :mod (f / festival)
            :mod (s2 / some)
            :ARG1-of (s3 / special-02)
            :ARG1-of (t / treat-02)))

instance(h,have-degree-91)
instance(i2,it)
instance(s,sweet-04)
instance(e,equal)
instance(f2,food-dish)
instance(f,festival)
instance(s2,some)
instance(s3,special-02)
instance(t,treat-02)
ARG1(h,i2)
ARG2(h,s)
ARG3(h,e)
ARG4(h,f2)
mod(f2,f)
mod(f2,s2)
ARG1-of(f2,s3)
ARG1-of(f2,t)

(r2 / resemble-01
  :ARG1 (w / water
          :mod (t / this))
  :ARG2 (t2 / thing
          :ARG2-of (n / nourish-01)
          :mod (o / ordinary))
  :mod (i / indeed)
  :polarity -)

instance(r2,resemble-01)
instance(w,water)
instance(t,this)
instance(t2,thing)
instance(n,nourish-01)
instance(o,ordinary)
instance(i,indeed)
ARG1(r2,w)
mod(w,t)
ARG2(r2,t2)
ARG2-of(t2,n)
mod(t2,o)
mod(r2,i)
polarity(r2,-)

(b2 / bear-02
      :ARG0 (a / and
            :op1 (w2 / walk-01
                  :location (u / under
                        :op1 (s2 / star)))
            :op2 (s3 / sing-01
                  :ARG0 (p / pulley))
            :op3 (e / effort-01
                  :ARG0 (a2 / arm
                        :part-of (i / i))))
      :ARG1 (s / sweet-05
            :ARG1 (i3 / it)))

instance(b2,bear-02)
instance(a,and)
instance(w2,walk-01)
instance(u,under)
instance(s2,star)
instance(s3,sing-01)
instance(p,pulley)
instance(e,effort-01)
instance(a2,arm)
instance(i,i)
instance(s,sweet-05)
instance(i3,it)
ARG0(b2,a)
op1(a,w2)
location(w2,u)
op1(u,s2)
op2(a,s3)
ARG0(s3,p)
op3(a,e)
ARG0(e,a2)
part-of(a2,i)
ARG1(b2,s)
ARG1(s,i3)

(g / good-04
      :ARG1 (i / it
            :ARG1-of (r / resemble-01
                  :ARG2 (p / present)))
      :ARG2 (h / heart))

instance(g,good-04)
instance(i,it)
instance(r,resemble-01)
instance(p,present)
instance(h,heart)
ARG1(g,i)
ARG1-of(i,r)
ARG2(r,p)
ARG2(g,h)

(m / make-up-07
      :ARG0 (a / and
            :op1 (l / light-04
                  :ARG0 (t2 / tree
                        :mod (f2 / festival :wiki "Christmas" :name (n / name :op1 "Christmas"))))
            :op2 (m2 / music
                  :poss (e2 / event :wiki - :name (n2 / name :op1 "Midnight" :op2 "Mass")))
            :op3 (t4 / tender
                  :domain (f / face
                        :ARG0-of (s2 / smile-01))))
      :ARG1 (r3 / radiant
            :domain (g2 / gift
                  :ARG1-of (r4 / receive-01
                        :ARG0 (i / i))))
      :manner (s / so)
      :time (b / boy
            :mod (l2 / little)
            :domain i)
      :time (u / use-03))

instance(m,make-up-07)
instance(a,and)
instance(l,light-04)
instance(t2,tree)
instance(f2,festival)
instance(n,name)
instance(m2,music)
instance(e2,event)
instance(n2,name)
instance(t4,tender)
instance(f,face)
instance(s2,smile-01)
instance(r3,radiant)
instance(g2,gift)
instance(r4,receive-01)
instance(i,i)
instance(s,so)
instance(b,boy)
instance(l2,little)
instance(u,use-03)
ARG0(m,a)
op1(a,l)
ARG0(l,t2)
mod(t2,f2)
wiki(f2,"Christmas")
name(f2,n)
op1(n,"Christmas")
op2(a,m2)
poss(m2,e2)
wiki(e2,-)
name(e2,n2)
op1(n2,"Midnight")
op2(n2,"Mass")
op3(a,t4)
domain(t4,f)
ARG0-of(f,s2)
ARG1(m,r3)
domain(r3,g2)
ARG1-of(g2,r4)
ARG0(r4,i)
manner(m,s)
time(m,b)
mod(b,l2)
domain(b,i)
time(m,u)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (a / and
            :op1 (r / raise-03
                  :ARG0 (m / man
                        :location (l2 / live-01
                              :ARG0 (y / you)))
                  :ARG1 (r2 / rose :quant 5000)
                  :location (g / garden
                        :ARG1-of (s2 / same-01)))
            :op2 (f / find-01 :polarity -
                  :ARG0 m
                  :ARG1 (t / thing
                        :ARG1-of (l3 / look-01
                              :ARG0 m))
                  :location g)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(a,and)
instance(r,raise-03)
instance(m,man)
instance(l2,live-01)
instance(y,you)
instance(r2,rose)
instance(g,garden)
instance(s2,same-01)
instance(f,find-01)
instance(t,thing)
instance(l3,look-01)
ARG0(s,p)
mod(p,l)
ARG1(s,a)
op1(a,r)
ARG0(r,m)
location(m,l2)
ARG0(l2,y)
ARG1(r,r2)
quant(r2,5000)
location(r,g)
ARG1-of(g,s2)
op2(a,f)
polarity(f,-)
ARG0(f,m)
ARG1(f,t)
ARG1-of(t,l3)
ARG0(l3,m)
location(f,g)

(f / find-01
  :ARG0 (t / they)
  :ARG1 (i / it)
  :polarity -)

instance(f,find-01)
instance(t,they)
instance(i,it)
ARG0(f,t)
ARG1(f,i)
polarity(f,-)

(r / reply-01
  :ARG0 (i / i))

instance(r,reply-01)
instance(i,i)
ARG0(r,i)

(c / contrast-01
      :ARG2 (p2 / possible-01
            :ARG1 (f / find-01
                  :ARG1 (t / thing
                        :ARG1-of (l2 / look-01
                              :ARG0 (t2 / they)))
                  :location (o / or
                        :op1 (r / rose
                              :ARG1-of (s / single-02))
                        :op2 (w / water
                              :quant (l3 / little))))))

instance(c,contrast-01)
instance(p2,possible-01)
instance(f,find-01)
instance(t,thing)
instance(l2,look-01)
instance(t2,they)
instance(o,or)
instance(r,rose)
instance(s,single-02)
instance(w,water)
instance(l3,little)
ARG2(c,p2)
ARG1(p2,f)
ARG1(f,t)
ARG1-of(t,l2)
ARG0(l2,t2)
location(f,o)
op1(o,r)
ARG1-of(r,s)
op2(o,w)
quant(w,l3)

(t / true-01
      :ARG1 (t2 / that))

instance(t,true-01)
instance(t2,that)
ARG1(t,t2)

(s / say-01
      :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(a / and
      :op2 (a2 / add-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (c / contrast-01
                  :ARG2 (b / blind-02
                        :ARG1 (e / eye)))))

instance(a,and)
instance(a2,add-01)
instance(p,prince)
instance(l,little)
instance(c,contrast-01)
instance(b,blind-02)
instance(e,eye)
op2(a,a2)
ARG0(a2,p)
mod(p,l)
ARG1(a2,c)
ARG2(c,b)
ARG1(b,e)

(r / recommend-01
  :ARG1 (l / look-01
          :ARG0 (o / one)
          :instrument (h / heart)))

instance(r,recommend-01)
instance(l,look-01)
instance(o,one)
instance(h,heart)
ARG1(r,l)
ARG0(l,o)
instrument(l,h)

(d / drink-01
  :ARG0 (i / i)
  :ARG1 (w / water))

instance(d,drink-01)
instance(i,i)
instance(w,water)
ARG0(d,i)
ARG1(d,w)

(b / breathe-01
      :ARG0 (i / i)
      :ARG1-of (e / easy-05))

instance(b,breathe-01)
instance(i,i)
instance(e,easy-05)
ARG0(b,i)
ARG1-of(b,e)

(r2 / resemble-01
  :ARG1 (c / color
          :poss (s / sand))
  :ARG2 (c2 / color
          :poss (h / honey))
  :time (r / rise-01
          :ARG1 (s2 / sun)))

instance(r2,resemble-01)
instance(c,color)
instance(s,sand)
instance(c2,color)
instance(h,honey)
instance(r,rise-01)
instance(s2,sun)
ARG1(r2,c)
poss(c,s)
ARG2(r2,c2)
poss(c2,h)
time(r2,r)
ARG1(r,s2)

(a / and
      :op2 (m / make-02
            :ARG0 (c / color
                  :mod (h / honey))
            :ARG1 (h2 / happy-01
                  :ARG1 (i / i))
            :mod (t / too)))

instance(a,and)
instance(m,make-02)
instance(c,color)
instance(h,honey)
instance(h2,happy-01)
instance(i,i)
instance(t,too)
op2(a,m)
ARG0(m,c)
mod(c,h)
ARG1(m,h2)
ARG1(h2,i)
mod(m,t)

(b2 / bring-01
      :ARG0 (a / amr-unknown)
      :ARG1 (s / sense-01
            :ARG0 i
            :ARG1 (g / grieve-01
                  :ARG1 i)
            :mod (t / this))
      :ARG2 (i / i)
      :time (t2 / then))

instance(b2,bring-01)
instance(a,amr-unknown)
instance(s,sense-01)
instance(g,grieve-01)
instance(t,this)
instance(i,i)
instance(t2,then)
ARG0(b2,a)
ARG1(b2,s)
ARG0(s,i)
ARG1(s,g)
ARG1(g,i)
mod(s,t)
ARG2(b2,i)
time(b2,t2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (h / honor-02
                  :ARG0 y
                  :ARG1 (t / thing
                        :ARG1-of (p2 / promise-01
                              :ARG0 y))))
      :manner (s2 / soft)
      :time (s3 / sit-down-02
            :ARG1 p
            :location (b / beside
                  :op1 (i / i))
            :mod (a / again
                  :mod (o2 / once))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(o,obligate-01)
instance(y,you)
instance(h,honor-02)
instance(t,thing)
instance(p2,promise-01)
instance(s2,soft)
instance(s3,sit-down-02)
instance(b,beside)
instance(i,i)
instance(a,again)
instance(o2,once)
ARG0(s,p)
mod(p,l)
ARG1(s,o)
ARG1(o,y)
ARG2(o,h)
ARG0(h,y)
ARG1(h,t)
ARG1-of(t,p2)
ARG0(p2,y)
manner(s,s2)
time(s,s3)
ARG1(s3,p)
location(s3,b)
op1(b,i)
mod(s3,a)
mod(a,o2)

(t / thing
      :ARG1-of (p2 / promise-01
            :ARG0 (i / i))
      :domain (a / amr-unknown))

instance(t,thing)
instance(p2,promise-01)
instance(i,i)
instance(a,amr-unknown)
ARG1-of(t,p2)
ARG0(p2,i)
domain(t,a)

(t / thing
      :ARG2-of (m2 / muzzle-01
            :ARG1 (s / sheep
                  :poss (i / i))))

instance(t,thing)
instance(m2,muzzle-01)
instance(s,sheep)
instance(i,i)
ARG2-of(t,m2)
ARG1(m2,s)
poss(s,i)

(r / responsible-03
      :ARG0 (i / i)
      :ARG1 (f / flower
            :mod (t / this)))

instance(r,responsible-03)
instance(i,i)
instance(f,flower)
instance(t,this)
ARG0(r,i)
ARG1(r,f)
mod(f,t)

(t / take-01
      :ARG0 (i / i)
      :ARG1 (p2 / picture
            :ARG1-of (d3 / draft-01)
            :ARG1-of (r / rough-04)
            :ARG1-of (d4 / draw-01))
      :ARG2 (p / pocket
            :poss i))

instance(t,take-01)
instance(i,i)
instance(p2,picture)
instance(d3,draft-01)
instance(r,rough-04)
instance(d4,draw-01)
instance(p,pocket)
ARG0(t,i)
ARG1(t,p2)
ARG1-of(p2,d3)
ARG1-of(p2,r)
ARG1-of(p2,d4)
ARG2(t,p)
poss(p,i)

(a / and
      :op1 (l / look-01
            :ARG0 (p / prince
                  :mod (l2 / little))
            :ARG1 (t / they))
      :op2 (l3 / laugh-01
            :ARG0 p
            :time (s / say-01
                  :ARG0 p
                  :ARG1 (l4 / look-02
                        :ARG0 (b / baobab
                              :poss (y / you))
                        :ARG1 (c / cabbage)
                        :degree (l5 / little)))))

instance(a,and)
instance(l,look-01)
instance(p,prince)
instance(l2,little)
instance(t,they)
instance(l3,laugh-01)
instance(s,say-01)
instance(l4,look-02)
instance(b,baobab)
instance(y,you)
instance(c,cabbage)
instance(l5,little)
op1(a,l)
ARG0(l,p)
mod(p,l2)
ARG1(l,t)
op2(a,l3)
ARG0(l3,p)
time(l3,s)
ARG0(s,p)
ARG1(s,l4)
ARG0(l4,b)
poss(b,y)
ARG1(l4,c)
degree(l4,l5)

(o / oh :mode expressive)

instance(o,oh)
mode(o,expressive)

(p / pride-01
      :ARG0 (i / i)
      :ARG1 (b / baobab
            :poss i)
      :degree (s / so))

instance(p,pride-01)
instance(i,i)
instance(b,baobab)
instance(s,so)
ARG0(p,i)
ARG1(p,b)
poss(b,i)
degree(p,s)

(a2 / and
      :op1 (l4 / look-02
            :ARG0 (e / ear
                  :part-of (f / fox
                        :poss (y / you)))
            :ARG1 (h / horn)
            :degree (l / little))
      :op2 (h2 / have-degree-91
            :ARG1 e
            :ARG2 (l2 / long-03
                  :ARG1 e)
            :ARG3 (t2 / too)))

instance(a2,and)
instance(l4,look-02)
instance(e,ear)
instance(f,fox)
instance(y,you)
instance(h,horn)
instance(l,little)
instance(h2,have-degree-91)
instance(l2,long-03)
instance(t2,too)
op1(a2,l4)
ARG0(l4,e)
part-of(e,f)
poss(f,y)
ARG1(l4,h)
degree(l4,l)
op2(a2,h2)
ARG1(h2,e)
ARG2(h2,l2)
ARG1(l2,e)
ARG3(h2,t2)

(a / and
  :op2 (l / laugh-01
         :ARG0 (h / he)
         :mod (a2 / again)))

instance(a,and)
instance(l,laugh-01)
instance(h,he)
instance(a2,again)
op2(a,l)
ARG0(l,h)
mod(l,a2)

(f / fair-01 :polarity -
      :ARG0 (p / prince
            :mod (l / little)))

instance(f,fair-01)
instance(p,prince)
instance(l,little)
polarity(f,-)
ARG0(f,p)
mod(p,l)

(s / say-01
  :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(k / know-01
      :ARG0 (i / i)
      :ARG1 (d / draw-01
            :ARG0 i
            :ARG1 (a2 / and
                  :op1 (o / outside
                        :part-of (b / boa
                              :mod (c / constrictor)))
                  :op2 (i2 / inside
                        :part-of b))))

instance(k,know-01)
instance(i,i)
instance(d,draw-01)
instance(a2,and)
instance(o,outside)
instance(b,boa)
instance(c,constrictor)
instance(i2,inside)
ARG0(k,i)
ARG1(k,d)
ARG0(d,i)
ARG1(d,a2)
op1(a2,o)
part-of(o,b)
mod(b,c)
op2(a2,i2)
part-of(i2,b)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (a / all-right
            :domain (t / that)
            :ARG1-of (c / cause-01
                  :ARG0 (u / understand-01
                        :ARG0 (c2 / child)))))

instance(s,say-01)
instance(h,he)
instance(a,all-right)
instance(t,that)
instance(c,cause-01)
instance(u,understand-01)
instance(c2,child)
ARG0(s,h)
ARG1(s,a)
domain(a,t)
ARG1-of(a,c)
ARG0(c,u)
ARG0(u,c2)

(s2 / sketch-01
  :ARG0 (i / i)
  :ARG1 (m / muzzle)
  :instrument (p / pencil)
  :time (t / then))

instance(s2,sketch-01)
instance(i,i)
instance(m,muzzle)
instance(p,pencil)
instance(t,then)
ARG0(s2,i)
ARG1(s2,m)
instrument(s2,p)
time(s2,t)

(a / and
  :op2 (t / tear-01
         :ARG1 (h / heart
                 :part-of (i / i))
         :time (g / give-01
                 :ARG0 i
                 :ARG1 (i2 / it)
                 :ARG2 (h2 / he))))

instance(a,and)
instance(t,tear-01)
instance(h,heart)
instance(i,i)
instance(g,give-01)
instance(i2,it)
instance(h2,he)
op2(a,t)
ARG1(t,h)
part-of(h,i)
time(t,g)
ARG0(g,i)
ARG1(g,i2)
ARG2(g,h2)

(p2 / plan-01
  :ARG0 (y / you)
  :ARG1 (t / thing
          :ARG1-of (k / know-01
                     :ARG0 (i / i)
                     :polarity -)))

instance(p2,plan-01)
instance(y,you)
instance(t,thing)
instance(k,know-01)
instance(i,i)
ARG0(p2,y)
ARG1(p2,t)
ARG1-of(t,k)
ARG0(k,i)
polarity(k,-)

(s / say-01
  :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(h2 / have-concession-91
  :ARG1 (a / answer-01
          :ARG0 (h / he)
          :ARG1 (i / i)
          :polarity -))

instance(h2,have-concession-91)
instance(a,answer-01)
instance(h,he)
instance(i,i)
ARG1(h2,a)
ARG0(a,h)
ARG1(a,i)
polarity(a,-)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (d / descend-01
            :ARG0 h
            :ARG1 (e / earth))
      :ARG2 (i / i)
      :ARG1-of (i2 / instead-of-91))

instance(s,say-01)
instance(h,he)
instance(d,descend-01)
instance(e,earth)
instance(i,i)
instance(i2,instead-of-91)
ARG0(s,h)
ARG1(s,d)
ARG0(d,h)
ARG1(d,e)
ARG2(s,i)
ARG1-of(s,i2)

(a / anniversary
  :time (t / tomorrow)
  :poss (i / it))

instance(a,anniversary)
instance(t,tomorrow)
instance(i,it)
time(a,t)
poss(a,i)

(g / go-23
      :ARG0 (h / he)
      :ARG1 (c / come-01
            :ARG1 h
            :ARG4 (n / near-02
                  :ARG1 h
                  :ARG2 (h2 / here)
                  :degree (v / very))
            :direction (d / down))
      :time (t / then)
      :time (a / after
            :op1 (s / silent)))

instance(g,go-23)
instance(h,he)
instance(c,come-01)
instance(n,near-02)
instance(h2,here)
instance(v,very)
instance(d,down)
instance(t,then)
instance(a,after)
instance(s,silent)
ARG0(g,h)
ARG1(g,c)
ARG1(c,h)
ARG4(c,n)
ARG1(n,h)
ARG2(n,h2)
degree(n,v)
direction(c,d)
time(g,t)
time(g,a)
op1(a,s)

(a / and
  :op2 (f / flush-03
         :ARG1 (h / he)))

instance(a,and)
instance(f,flush-03)
instance(h,he)
op2(a,f)
ARG1(f,h)

(a2 / and
      :op2 (s / sense-01
            :ARG0 (i / i)
            :ARG1 (s2 / sorrow-01
                  :ARG0 i)
            :mod (q / queer)
            :mod (a / again
                  :mod (o / once))
            :ARG1-of (c2 / cause-01
                  :ARG0 (a3 / amr-unknown
                        :ARG1-of (u2 / understand-01 :polarity -
                              :ARG0 i)))))

instance(a2,and)
instance(s,sense-01)
instance(i,i)
instance(s2,sorrow-01)
instance(q,queer)
instance(a,again)
instance(o,once)
instance(c2,cause-01)
instance(a3,amr-unknown)
instance(u2,understand-01)
op2(a2,s)
ARG0(s,i)
ARG1(s,s2)
ARG0(s2,i)
mod(s,q)
mod(s,a)
mod(a,o)
ARG1-of(s,c2)
ARG0(c2,a3)
ARG1-of(a3,u2)
polarity(u2,-)
ARG0(u2,i)

(c / contrast-01
      :ARG2 (q / question-01
            :ARG0 (i / i)
            :ARG1 (t3 / truth-value
                  :polarity-of (s / stroll-01
                        :ARG0 y
                        :manner (a3 / alone
                              :degree (a4 / all)
                              :ARG1-of (r / resemble-01
                                    :ARG2 (t2 / that)))
                        :direction (a6 / along)
                        :location (r3 / relative-position
                              :op1 (r2 / region
                                    :ARG1-of (i3 / inhabit-01)
                                    :mod (a5 / any))
                              :quant (d2 / distance-quantity :quant 1000
                                    :unit (m3 / mile)))
                        :time (m / meet-03
                              :ARG0 i
                              :ARG1 (y / you)
                              :ord (o2 / ordinal-entity :value 1)
                              :time (b / before
                                    :op1 (n / now)
                                    :quant (t / temporal-quantity :quant 1
                                          :unit (w / week)))
                              :time (d / date-entity
                                    :dayperiod (m2 / morning)))
                        :ARG1-of (c2 / cause-01 :polarity -
                              :ARG0 (c3 / chance-02))))))

instance(c,contrast-01)
instance(q,question-01)
instance(i,i)
instance(t3,truth-value)
instance(s,stroll-01)
instance(a3,alone)
instance(a4,all)
instance(r,resemble-01)
instance(t2,that)
instance(a6,along)
instance(r3,relative-position)
instance(r2,region)
instance(i3,inhabit-01)
instance(a5,any)
instance(d2,distance-quantity)
instance(m3,mile)
instance(m,meet-03)
instance(y,you)
instance(o2,ordinal-entity)
instance(b,before)
instance(n,now)
instance(t,temporal-quantity)
instance(w,week)
instance(d,date-entity)
instance(m2,morning)
instance(c2,cause-01)
instance(c3,chance-02)
ARG2(c,q)
ARG0(q,i)
ARG1(q,t3)
polarity-of(t3,s)
ARG0(s,y)
manner(s,a3)
degree(a3,a4)
ARG1-of(a3,r)
ARG2(r,t2)
direction(s,a6)
location(s,r3)
op1(r3,r2)
ARG1-of(r2,i3)
mod(r2,a5)
quant(r3,d2)
quant(d2,1000)
unit(d2,m3)
time(s,m)
ARG0(m,i)
ARG1(m,y)
ord(m,o2)
value(o2,1)
time(m,b)
op1(b,n)
quant(b,t)
quant(t,1)
unit(t,w)
time(m,d)
dayperiod(d,m2)
ARG1-of(s,c2)
polarity(c2,-)
ARG0(c2,c3)

(g / go-02
      :ARG1 (y / you)
      :ARG4 (p2 / place
            :location-of (l / land-01
                  :ARG0 y))
      :polarity (a / amr-unknown)
      :direction (b / back))

instance(g,go-02)
instance(y,you)
instance(p2,place)
instance(l,land-01)
instance(a,amr-unknown)
instance(b,back)
ARG1(g,y)
ARG4(g,p2)
location-of(p2,l)
ARG0(l,y)
polarity(g,a)
direction(g,b)

(f / flush-03
  :ARG1 (p / prince
          :mod (l / little))
  :mod (a / again))

instance(f,flush-03)
instance(p,prince)
instance(l,little)
instance(a,again)
ARG1(f,p)
mod(p,l)
mod(f,a)

(a4 / and
      :op2 (a / add-01
            :ARG0 (i / i)
            :ARG1 (t / truth-value
                  :polarity-of (p2 / possible-01
                        :ARG1 (c / cause-01
                              :ARG0 (a3 / anniversary)
                              :ARG1 (i2 / it))))
            :manner (h / hesitate-01
                  :ARG0 i
                  :degree (s / some))))

instance(a4,and)
instance(a,add-01)
instance(i,i)
instance(t,truth-value)
instance(p2,possible-01)
instance(c,cause-01)
instance(a3,anniversary)
instance(i2,it)
instance(h,hesitate-01)
instance(s,some)
op2(a4,a)
ARG0(a,i)
ARG1(a,t)
polarity-of(t,p2)
ARG1(p2,c)
ARG0(c,a3)
ARG1(c,i2)
manner(a,h)
ARG0(h,i)
degree(h,s)

(f / flush-03
      :ARG1 (p / prince
            :mod (l / little))
      :mod (a / again
            :mod (o / once)))

instance(f,flush-03)
instance(p,prince)
instance(l,little)
instance(a,again)
instance(o,once)
ARG1(f,p)
mod(p,l)
mod(f,a)
mod(a,o)

(c / contrast-01
      :ARG1 (a / answer-01 :polarity -
            :ARG0 (h / he)
            :ARG1 (q / question-01
                  :ARG2 h)
            :time (e / ever))
      :ARG2 (m / mean-01
            :ARG1 (f / flush-03
                  :ARG1 (o / one))
            :ARG2 (y / yes)
            :ARG1-of (r / request-confirmation-91)))

instance(c,contrast-01)
instance(a,answer-01)
instance(h,he)
instance(q,question-01)
instance(e,ever)
instance(m,mean-01)
instance(f,flush-03)
instance(o,one)
instance(y,yes)
instance(r,request-confirmation-91)
ARG1(c,a)
polarity(a,-)
ARG0(a,h)
ARG1(a,q)
ARG2(q,h)
time(a,e)
ARG2(c,m)
ARG1(m,f)
ARG1(f,o)
ARG2(m,y)
ARG1-of(m,r)

(a / ah
  :mode expressive)

instance(a,ah)
mode(a,expressive)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (f / frighten-01
          :ARG1 i
          :degree (l / little))
  :ARG2 (h / he))

instance(s,say-01)
instance(i,i)
instance(f,frighten-01)
instance(l,little)
instance(h,he)
ARG0(s,i)
ARG1(s,f)
ARG1(f,i)
degree(f,l)
ARG2(s,h)

(c / contrast-01
  :ARG2 (i / interrupt-01
          :ARG0 (h / he)
          :ARG1 (i2 / i)))

instance(c,contrast-01)
instance(i,interrupt-01)
instance(h,he)
instance(i2,i)
ARG2(c,i)
ARG0(i,h)
ARG1(i,i2)

(o / obligate-01
  :ARG1 (y / you)
  :ARG2 (w / work-01
          :ARG0 y)
  :time (n / now))

instance(o,obligate-01)
instance(y,you)
instance(w,work-01)
instance(n,now)
ARG1(o,y)
ARG2(o,w)
ARG0(w,y)
time(o,n)

(o2 / obligate-01
  :ARG1 (y / you)
  :ARG2 (r / return-01
          :ARG1 y
          :ARG4 (e / engine
                  :poss y)))

instance(o2,obligate-01)
instance(y,you)
instance(r,return-01)
instance(e,engine)
ARG1(o2,y)
ARG2(o2,r)
ARG1(r,y)
ARG4(r,e)
poss(e,y)

(w / wait-01
      :ARG1 (i / i)
      :ARG2 (y / you)
      :location (h / here))

instance(w,wait-01)
instance(i,i)
instance(y,you)
instance(h,here)
ARG1(w,i)
ARG2(w,y)
location(w,h)

(c / come-01 :mode imperative
      :ARG1 (y / you)
      :direction (b / back)
      :time (d / date-entity
            :dayperiod (e2 / evening)
            :mod (t / tomorrow)))

instance(c,come-01)
instance(y,you)
instance(b,back)
instance(d,date-entity)
instance(e2,evening)
instance(t,tomorrow)
mode(c,imperative)
ARG1(c,y)
direction(c,b)
time(c,d)
dayperiod(d,e2)
mod(d,t)

(h / have-concession-91
  :ARG1 (r / reassure-01
          :ARG1 (i / i)
          :polarity -))

instance(h,have-concession-91)
instance(r,reassure-01)
instance(i,i)
ARG1(h,r)
ARG1(r,i)
polarity(r,-)

(r / remember-01
      :ARG0 (i / i)
      :ARG1 (f / fox))

instance(r,remember-01)
instance(i,i)
instance(f,fox)
ARG0(r,i)
ARG1(r,f)

(r2 / risk-01
      :ARG0 (o / one)
      :ARG2 (w / weep-01
            :ARG0 o
            :degree (l / little))
      :condition (l2 / let-01
            :ARG0 o
            :ARG1 (t / tame-01
                  :ARG1 o)))

instance(r2,risk-01)
instance(o,one)
instance(w,weep-01)
instance(l,little)
instance(l2,let-01)
instance(t,tame-01)
ARG0(r2,o)
ARG2(r2,w)
ARG0(w,o)
degree(w,l)
condition(r2,l2)
ARG0(l2,o)
ARG1(l2,t)
ARG1(t,o)

(c / chapter :mod 26)

instance(c,chapter)
mod(c,26)

(w / wall
      :mod (o / old)
      :consist-of (s / stone)
      :ARG1-of (r / ruin-01)
      :location (b / beside
            :op1 (w2 / well)))

instance(w,wall)
instance(o,old)
instance(s,stone)
instance(r,ruin-01)
instance(b,beside)
instance(w2,well)
mod(w,o)
consist-of(w,s)
ARG1-of(w,r)
location(w,b)
op1(b,w2)

(s / see-01
      :ARG0 (i / i
            :location (r2 / relative-position
                  :quant (d2 / distant-02)))
      :ARG1 (s2 / sit-01
            :ARG1 (p2 / prince
                  :mod (l / little)
                  :poss i
                  :ARG0-of (d / dangle-01
                        :ARG1 (f / foot
                              :part-of p2)))
            :ARG2 (t / top
                  :op1 (w / wall)))
      :time (r / return-01
            :ARG1 i
            :ARG3 (w2 / work-01
                  :ARG0 i)
            :time (d3 / date-entity
                  :dayperiod (e / evening)
                  :mod (n / next))))

instance(s,see-01)
instance(i,i)
instance(r2,relative-position)
instance(d2,distant-02)
instance(s2,sit-01)
instance(p2,prince)
instance(l,little)
instance(d,dangle-01)
instance(f,foot)
instance(t,top)
instance(w,wall)
instance(r,return-01)
instance(w2,work-01)
instance(d3,date-entity)
instance(e,evening)
instance(n,next)
ARG0(s,i)
location(i,r2)
quant(r2,d2)
ARG1(s,s2)
ARG1(s2,p2)
mod(p2,l)
poss(p2,i)
ARG0-of(p2,d)
ARG1(d,f)
part-of(f,p2)
ARG2(s2,t)
op1(t,w)
time(s,r)
ARG1(r,i)
ARG3(r,w2)
ARG0(w2,i)
time(r,d3)
dayperiod(d3,e)
mod(d3,n)

(a / and
      :op2 (h / hear-01
            :ARG0 (i / i)
            :ARG1 (s / say-01
                  :ARG0 (h2 / he)
                  :ARG1 (r / remember-01 :polarity -
                        :ARG0 (y / you)
                        :mod (t / then)))))

instance(a,and)
instance(h,hear-01)
instance(i,i)
instance(s,say-01)
instance(h2,he)
instance(r,remember-01)
instance(y,you)
instance(t,then)
op2(a,h)
ARG0(h,i)
ARG1(h,s)
ARG0(s,h2)
ARG1(s,r)
polarity(r,-)
ARG0(r,y)
mod(r,t)

(s2 / spot
      :domain (t / this)
      :mod (e2 / exact :polarity -))

instance(s2,spot)
instance(t,this)
instance(e2,exact)
domain(s2,t)
mod(s2,e2)
polarity(e2,-)

(o / obligate-01
      :ARG0 (v / voice
            :mod (a / another))
      :ARG1 h2
      :ARG2 (a2 / answer-01)
      :ARG0-of (c / cause-01
            :ARG1 (r / reply-01
                  :ARG0 (h2 / he)
                  :ARG2 (y / yes))))

instance(o,obligate-01)
instance(v,voice)
instance(a,another)
instance(a2,answer-01)
instance(c,cause-01)
instance(r,reply-01)
instance(h2,he)
instance(y,yes)
ARG0(o,v)
mod(v,a)
ARG1(o,h2)
ARG2(o,a2)
ARG0-of(o,c)
ARG1(c,r)
ARG0(r,h2)
ARG2(r,y)

(c / contrast-01
      :ARG1 (d / day
            :ARG2-of (r / right-06))
      :ARG2 (p / place :polarity -
            :domain (t / this)))

instance(c,contrast-01)
instance(d,day)
instance(r,right-06)
instance(p,place)
instance(t,this)
ARG1(c,d)
ARG2-of(d,r)
ARG2(c,p)
polarity(p,-)
domain(p,t)

(c / continue-01
      :ARG0 (i / i)
      :ARG1 (w / walk-01
            :ARG0 i
            :direction (t / toward
                  :op1 (w2 / wall))))

instance(c,continue-01)
instance(i,i)
instance(w,walk-01)
instance(t,toward)
instance(w2,wall)
ARG0(c,i)
ARG1(c,w)
ARG0(w,i)
direction(w,t)
op1(t,w2)

(o / or
      :op1 (s / see-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (a / anyone))
      :op2 (h / hear-01 :polarity -
            :ARG0 i
            :ARG1 a)
      :time (e / ever))

instance(o,or)
instance(s,see-01)
instance(i,i)
instance(a,anyone)
instance(h,hear-01)
instance(e,ever)
op1(o,s)
polarity(s,-)
ARG0(s,i)
ARG1(s,a)
op2(o,h)
polarity(h,-)
ARG0(h,i)
ARG1(h,a)
time(o,e)

(c / contrast-01
      :ARG2 (r / reply-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG2 (e / exact)
            :mod (a / again
                  :mod (o / once))))

instance(c,contrast-01)
instance(r,reply-01)
instance(p,prince)
instance(l,little)
instance(e,exact)
instance(a,again)
instance(o,once)
ARG2(c,r)
ARG0(r,p)
mod(p,l)
ARG2(r,e)
mod(r,a)
mod(a,o)

(s / see-01
      :ARG0 (y2 / you)
      :ARG1 (b2 / begin-01
            :ARG1 (t2 / track
                  :poss (i / i))
            :location (s3 / sand)))

instance(s,see-01)
instance(y2,you)
instance(b2,begin-01)
instance(t2,track)
instance(i,i)
instance(s3,sand)
ARG0(s,y2)
ARG1(s,b2)
ARG1(b2,t2)
poss(t2,i)
location(b2,s3)

(h2 / have-03
      :ARG0 (y / you)
      :ARG1 (n / nothing
            :ARG1-of (d / do-02
                  :ARG0 y)
            :ARG1-of (c / contrast-01
                  :ARG2 (w2 / wait-01
                        :ARG1 y
                        :ARG2 (i / i)
                        :location (t2 / there)))))

instance(h2,have-03)
instance(y,you)
instance(n,nothing)
instance(d,do-02)
instance(c,contrast-01)
instance(w2,wait-01)
instance(i,i)
instance(t2,there)
ARG0(h2,y)
ARG1(h2,n)
ARG1-of(n,d)
ARG0(d,y)
ARG1-of(n,c)
ARG2(c,w2)
ARG1(w2,y)
ARG2(w2,i)
location(w2,t2)

(t / there
      :location-of (i / i)
      :time (d / date-entity
            :dayperiod (n / night)
            :mod (t2 / today)))

instance(t,there)
instance(i,i)
instance(d,date-entity)
instance(n,night)
instance(t2,today)
location-of(t,i)
time(t,d)
dayperiod(d,n)
mod(d,t2)

(a / and
      :op1 (b / be-located-at-91
            :ARG1 (i / i)
            :ARG2 (r / relative-position
                  :op1 (w / wall)
                  :quant (d / distance-quantity :quant 20
                        :unit (m / meter)
                        :mod (o / only))))
      :op2 (s / see-01
            :ARG0 i
            :ARG1 (n / nothing)
            :mod (s2 / still)))

instance(a,and)
instance(b,be-located-at-91)
instance(i,i)
instance(r,relative-position)
instance(w,wall)
instance(d,distance-quantity)
instance(m,meter)
instance(o,only)
instance(s,see-01)
instance(n,nothing)
instance(s2,still)
op1(a,b)
ARG1(b,i)
ARG2(b,r)
op1(r,w)
quant(r,d)
quant(d,20)
unit(d,m)
mod(d,o)
op2(a,s)
ARG0(s,i)
ARG1(s,n)
mod(s,s2)

(s / speak-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (t / truth-value
            :polarity-of (h / have-03
                  :ARG0 (i / i)
                  :ARG1 (t2 / thing
                        :ARG0-of (p2 / poison-01
                              :ARG1-of (g / good-02)))))
      :mod (a / again)
      :time (a2 / after
            :op1 (s2 / silent)))

instance(s,speak-01)
instance(p,prince)
instance(l,little)
instance(t,truth-value)
instance(h,have-03)
instance(i,i)
instance(t2,thing)
instance(p2,poison-01)
instance(g,good-02)
instance(a,again)
instance(a2,after)
instance(s2,silent)
ARG0(s,p)
mod(p,l)
ARG1(s,t)
polarity-of(t,h)
ARG0(h,i)
ARG1(h,t2)
ARG0-of(t2,p2)
ARG1-of(p2,g)
mod(s,a)
time(s,a2)
op1(a2,s2)

(s2 / sure-02
      :ARG0 (y / you)
      :ARG1 (h / have-degree-91 :polarity -
            :ARG1 (s / suffer-01
                  :ARG0 (i / i)
                  :ARG1 (i2 / it))
            :ARG2 (l / long-03
                  :ARG1 s)
            :ARG3 (t / too))
      :polarity (a / amr-unknown))

instance(s2,sure-02)
instance(y,you)
instance(h,have-degree-91)
instance(s,suffer-01)
instance(i,i)
instance(i2,it)
instance(l,long-03)
instance(t,too)
instance(a,amr-unknown)
ARG0(s2,y)
ARG1(s2,h)
polarity(h,-)
ARG1(h,s)
ARG0(s,i)
ARG1(s,i2)
ARG2(h,l)
ARG1(l,s)
ARG3(h,t)
polarity(s2,a)

(c / contrast-01
      :ARG1 (a / and
            :op1 (s / stop-01
                  :ARG1 (i / i))
            :op2 (t / tear-01
                  :ARG1 (h / heart
                        :part-of i)
                  :mod (a2 / asunder)))
      :ARG2 (u / understand-01 :polarity -
            :ARG0 i
            :mod (s2 / still)))

instance(c,contrast-01)
instance(a,and)
instance(s,stop-01)
instance(i,i)
instance(t,tear-01)
instance(h,heart)
instance(a2,asunder)
instance(u,understand-01)
instance(s2,still)
ARG1(c,a)
op1(a,s)
ARG1(s,i)
op2(a,t)
ARG1(t,h)
part-of(h,i)
mod(t,a2)
ARG2(c,u)
polarity(u,-)
ARG0(u,i)
mod(u,s2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (g / go-02 :mode imperative
            :ARG0 (y / you)
            :ARG1 (a / away)
            :time (n / now)))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(g,go-02)
instance(y,you)
instance(a,away)
instance(n,now)
ARG0(s,p)
mod(p,l)
ARG1(s,g)
mode(g,imperative)
ARG0(g,y)
ARG1(g,a)
time(g,n)

(w / want-01
      :ARG0 (i / i)
      :ARG1 (g / get-05
            :ARG0 i
            :ARG2 (r / relative-position
                  :op1 (w2 / wall)
                  :direction (d / down))))

instance(w,want-01)
instance(i,i)
instance(g,get-05)
instance(r,relative-position)
instance(w2,wall)
instance(d,down)
ARG0(w,i)
ARG1(w,g)
ARG0(g,i)
ARG2(g,r)
op1(r,w2)
direction(r,d)

(a / and
      :op1 (d / drop-01
            :ARG0 (i / i)
            :ARG1 (e / eye
                  :part-of i)
            :ARG4 (f / foot
                  :part-of (w / wall))
            :time (t / then))
      :op2 (l / leap-03
            :ARG0 i
            :destination (a2 / air)))

instance(a,and)
instance(d,drop-01)
instance(i,i)
instance(e,eye)
instance(f,foot)
instance(w,wall)
instance(t,then)
instance(l,leap-03)
instance(a2,air)
op1(a,d)
ARG0(d,i)
ARG1(d,e)
part-of(e,i)
ARG4(d,f)
part-of(f,w)
time(d,t)
op2(a,l)
ARG0(l,i)
destination(l,a2)

(s3 / snake
      :ARG1-of (y / yellow-02)
      :ARG2-of (t / take-10
            :ARG0 (e / end-01
                  :ARG1 (l2 / life
                        :poss (y2 / you)))
            :ARG1 (t2 / temporal-quantity :quant 30
                  :unit (s2 / second)
                  :mod (j / just)))
      :location (b / before
            :op1 (i / i))
      :ARG0-of (f / face-01
            :ARG1 (p / prince
                  :mod (l / little))))

instance(s3,snake)
instance(y,yellow-02)
instance(t,take-10)
instance(e,end-01)
instance(l2,life)
instance(y2,you)
instance(t2,temporal-quantity)
instance(s2,second)
instance(j,just)
instance(b,before)
instance(i,i)
instance(f,face-01)
instance(p,prince)
instance(l,little)
ARG1-of(s3,y)
ARG2-of(s3,t)
ARG0(t,e)
ARG1(e,l2)
poss(l2,y2)
ARG1(t,t2)
quant(t2,30)
unit(t2,s2)
mod(t2,j)
location(s3,b)
op1(b,i)
ARG0-of(s3,f)
ARG1(f,p)
mod(p,l)

(s / step-01
      :ARG1 i
      :ARG2 (b / back)
      :manner (r / run-02)
      :concession (e / even-as
            :op1 (d / dig-01
                  :ARG0 (i / i)
                  :ARG2 (p / pocket
                        :poss i)
                  :ARG3 r2
                  :purpose (g / get-01
                        :ARG0 i
                        :ARG1 (r2 / revolver
                              :poss i)))))

instance(s,step-01)
instance(b,back)
instance(r,run-02)
instance(e,even-as)
instance(d,dig-01)
instance(i,i)
instance(p,pocket)
instance(g,get-01)
instance(r2,revolver)
ARG1(s,i)
ARG2(s,b)
manner(s,r)
concession(s,e)
op1(e,d)
ARG0(d,i)
ARG2(d,p)
poss(p,i)
ARG3(d,r2)
purpose(d,g)
ARG0(g,i)
ARG1(g,r2)
poss(r2,i)

(c / contrast-01
      :ARG2 (a / and
            :op1 (l2 / let-01
                  :ARG0 (s3 / snake)
                  :ARG1 (f / flow-01
                        :ARG1 s3
                        :ARG1-of (e / easy-05)
                        :ARG1-of (r / resemble-01
                              :ARG2 (s5 / spray
                                    :ARG1-of (d2 / die-down-02)
                                    :poss (f2 / fountain)))
                        :path (a3 / across
                              :op1 (s4 / sand)))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (n / noise
                              :ARG1-of (m2 / make-01
                                    :ARG0 (i / i)))))
            :op2 (d / disappear-01
                  :ARG1 s3
                  :ARG1-of (h / hurry-01 :polarity -
                        :mod (a2 / apparent))
                  :location (a4 / among
                        :op1 (s2 / stone))
                  :ARG0-of (s / sound-02
                        :ARG3 (m / metallic)
                        :ARG1-of (l / light-06)))))

instance(c,contrast-01)
instance(a,and)
instance(l2,let-01)
instance(s3,snake)
instance(f,flow-01)
instance(e,easy-05)
instance(r,resemble-01)
instance(s5,spray)
instance(d2,die-down-02)
instance(f2,fountain)
instance(a3,across)
instance(s4,sand)
instance(c2,cause-01)
instance(n,noise)
instance(m2,make-01)
instance(i,i)
instance(d,disappear-01)
instance(h,hurry-01)
instance(a2,apparent)
instance(a4,among)
instance(s2,stone)
instance(s,sound-02)
instance(m,metallic)
instance(l,light-06)
ARG2(c,a)
op1(a,l2)
ARG0(l2,s3)
ARG1(l2,f)
ARG1(f,s3)
ARG1-of(f,e)
ARG1-of(f,r)
ARG2(r,s5)
ARG1-of(s5,d2)
poss(s5,f2)
path(f,a3)
op1(a3,s4)
ARG1-of(l2,c2)
ARG0(c2,n)
ARG1-of(n,m2)
ARG0(m2,i)
op2(a,d)
ARG1(d,s3)
ARG1-of(d,h)
polarity(h,-)
mod(h,a2)
location(d,a4)
op1(a4,s2)
ARG0-of(d,s)
ARG3(s,m)
ARG1-of(s,l)

(m / multi-sentence
      :snt1 (r / reach-01
            :ARG0 (i / i)
            :ARG1 (w2 / wall)
            :time (i2 / in-time
                  :op1 (c / catch-01
                        :ARG0 i
                        :ARG1 (m2 / man
                              :mod (l / little)
                              :poss i)
                        :mod (j / just)
                        :location (a / arm
                              :part-of i))))
      :snt2 (h / have-degree-91
            :ARG1 (f / face
                  :part-of m2)
            :ARG2 (w / white-03
                  :ARG1 f)
            :ARG3 (e / equal)
            :ARG4 (s / snow)))

instance(m,multi-sentence)
instance(r,reach-01)
instance(i,i)
instance(w2,wall)
instance(i2,in-time)
instance(c,catch-01)
instance(m2,man)
instance(l,little)
instance(j,just)
instance(a,arm)
instance(h,have-degree-91)
instance(f,face)
instance(w,white-03)
instance(e,equal)
instance(s,snow)
snt1(m,r)
ARG0(r,i)
ARG1(r,w2)
time(r,i2)
op1(i2,c)
ARG0(c,i)
ARG1(c,m2)
mod(m2,l)
poss(m2,i)
mod(c,j)
location(c,a)
part-of(a,i)
snt2(m,h)
ARG1(h,f)
part-of(f,m2)
ARG2(h,w)
ARG1(w,f)
ARG3(h,e)
ARG4(h,s)

(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / amr-unknown))

instance(m,mean-01)
instance(t,this)
instance(a,amr-unknown)
ARG1(m,t)
ARG2(m,a)

(d / demand-01
  :ARG0 (i / i))

instance(d,demand-01)
instance(i,i)
ARG0(d,i)

(t / talk-01
      :ARG0 (y / you)
      :ARG2 (s / snake)
      :purpose (a / amr-unknown))

instance(t,talk-01)
instance(y,you)
instance(s,snake)
instance(a,amr-unknown)
ARG0(t,y)
ARG2(t,s)
purpose(t,a)

(l / loosen-01
      :ARG0 (i / i)
      :ARG1 (m / muffler
            :consist-of (g / gold)
            :ARG1-of (w / wear-01
                  :ARG0 (h / he)
                  :time (a / always))))

instance(l,loosen-01)
instance(i,i)
instance(m,muffler)
instance(g,gold)
instance(w,wear-01)
instance(h,he)
instance(a,always)
ARG0(l,i)
ARG1(l,m)
consist-of(m,g)
ARG1-of(m,w)
ARG0(w,h)
time(w,a)

(a / and
  :op1 (m / moisten-01
         :ARG0 (i / i)
         :ARG1 (t / temple
                 :poss (h / he)))
  :op2 (g / give-01
         :ARG0 i
         :ARG1 (w / water
                 :quant (s / some)
                 :purpose (d / drink-01))
         :ARG2 h))

instance(a,and)
instance(m,moisten-01)
instance(i,i)
instance(t,temple)
instance(h,he)
instance(g,give-01)
instance(w,water)
instance(s,some)
instance(d,drink-01)
op1(a,m)
ARG0(m,i)
ARG1(m,t)
poss(t,h)
op2(a,g)
ARG0(g,i)
ARG1(g,w)
quant(w,s)
purpose(w,d)
ARG2(g,h)

(a / and
      :op2 (d / dare-01 :polarity -
            :ARG1 (i / i)
            :ARG2 (q2 / question-01
                  :ARG0 i
                  :ARG2 (h / he)
                  :mod (m / more
                        :mod (a3 / any))))
      :time (n / now))

instance(a,and)
instance(d,dare-01)
instance(i,i)
instance(q2,question-01)
instance(h,he)
instance(m,more)
instance(a3,any)
instance(n,now)
op2(a,d)
polarity(d,-)
ARG1(d,i)
ARG2(d,q2)
ARG0(q2,i)
ARG2(q2,h)
mod(q2,m)
mod(m,a3)
time(a,n)

(a / and
      :op1 (l / look-01
            :ARG0 (h / he)
            :ARG1 (i / i)
            :manner (g / grave
                  :degree (v / very)))
      :op2 (p / put-01
            :ARG0 h
            :ARG1 (a2 / arm
                  :part-of h)
            :ARG2 (a3 / around
                  :op1 (n / neck
                        :part-of i))))

instance(a,and)
instance(l,look-01)
instance(h,he)
instance(i,i)
instance(g,grave)
instance(v,very)
instance(p,put-01)
instance(a2,arm)
instance(a3,around)
instance(n,neck)
op1(a,l)
ARG0(l,h)
ARG1(l,i)
manner(l,g)
degree(g,v)
op2(a,p)
ARG0(p,h)
ARG1(p,a2)
part-of(a2,h)
ARG2(p,a3)
op1(a3,n)
part-of(n,i)

(f / feel-01
      :ARG0 (i / i)
      :ARG1 (h4 / heart
            :part-of (h2 / he)
            :ARG1-of (b / beat-01
                  :ARG1-of (r / resemble-01
                        :ARG2 (h3 / heart
                              :part-of (b2 / bird
                                    :ARG1-of (d / die-01)
                                    :ARG1-of (s / shoot-02
                                          :ARG2 (r2 / rifle
                                                :poss (s2 / someone)))))))))

instance(f,feel-01)
instance(i,i)
instance(h4,heart)
instance(h2,he)
instance(b,beat-01)
instance(r,resemble-01)
instance(h3,heart)
instance(b2,bird)
instance(d,die-01)
instance(s,shoot-02)
instance(r2,rifle)
instance(s2,someone)
ARG0(f,i)
ARG1(f,h4)
part-of(h4,h2)
ARG1-of(h4,b)
ARG1-of(b,r)
ARG2(r,h3)
part-of(h3,b2)
ARG1-of(b2,d)
ARG1-of(b2,s)
ARG2(s,r2)
poss(r2,s2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (g / glad-02
            :ARG0 (f / find-01
                  :ARG0 (y / you)
                  :ARG1 (p / problem
                        :topic (e / engine
                              :poss y)))
            :ARG1 (i / i)))

instance(s,say-01)
instance(h,he)
instance(g,glad-02)
instance(f,find-01)
instance(y,you)
instance(p,problem)
instance(e,engine)
instance(i,i)
ARG0(s,h)
ARG1(s,g)
ARG0(g,f)
ARG0(f,y)
ARG1(f,p)
topic(p,e)
poss(e,y)
ARG1(g,i)

(p / possible-01
      :ARG1 (g / go-02
            :ARG0 (y / you)
            :ARG4 (h / home)
            :direction (b / back))
      :time (n / now))

instance(p,possible-01)
instance(g,go-02)
instance(y,you)
instance(h,home)
instance(b,back)
instance(n,now)
ARG1(p,g)
ARG0(g,y)
ARG4(g,h)
direction(g,b)
time(p,n)

(k / know-01
  :ARG0 (y / you)
  :ARG1 (t / that)
  :manner (a / amr-unknown))

instance(k,know-01)
instance(y,you)
instance(t,that)
instance(a,amr-unknown)
ARG0(k,y)
ARG1(k,t)
manner(k,a)

(c / come-01
      :ARG1 (i / i)
      :purpose (t / tell-01
            :ARG0 i
            :ARG1 (s2 / succeed-01
                  :ARG1 (w / work-01
                        :ARG0 i)
                  :degree (b / beyond
                        :op1 (a / anything
                              :ARG1-of (h2 / hope-01
                                    :ARG0 i
                                    :ARG2-of (d / dare-01
                                          :ARG1 i)))))
            :ARG2 (h / he))
      :mod (j / just))

instance(c,come-01)
instance(i,i)
instance(t,tell-01)
instance(s2,succeed-01)
instance(w,work-01)
instance(b,beyond)
instance(a,anything)
instance(h2,hope-01)
instance(d,dare-01)
instance(h,he)
instance(j,just)
ARG1(c,i)
purpose(c,t)
ARG0(t,i)
ARG1(t,s2)
ARG1(s2,w)
ARG0(w,i)
degree(s2,b)
op1(b,a)
ARG1-of(a,h2)
ARG0(h2,i)
ARG2-of(h2,d)
ARG1(d,i)
ARG2(t,h)
mod(c,j)

(c / contrast-01
      :ARG1 (m / make-01
            :ARG0 h
            :ARG1 (a / answer-01 :polarity -
                  :ARG0 (h / he)
                  :ARG1 (q / question-01
                        :ARG0 (i / i))))
      :ARG2 (a2 / add-01
            :ARG0 h
            :ARG1 (r / return-01
                  :ARG1 h
                  :ARG4 (h2 / home)
                  :time (t / today)
                  :mod (t2 / too))))

instance(c,contrast-01)
instance(m,make-01)
instance(a,answer-01)
instance(h,he)
instance(q,question-01)
instance(i,i)
instance(a2,add-01)
instance(r,return-01)
instance(h2,home)
instance(t,today)
instance(t2,too)
ARG1(c,m)
ARG0(m,h)
ARG1(m,a)
polarity(a,-)
ARG0(a,h)
ARG1(a,q)
ARG0(q,i)
ARG2(c,a2)
ARG0(a2,h)
ARG1(a2,r)
ARG1(r,h)
ARG4(r,h2)
time(r,t)
mod(r,t2)

(s / say-01
      :ARG1 (a / and
            :op1 (h / have-degree-91
                  :ARG1 (i2 / it)
                  :ARG2 (f / far)
                  :ARG3 (m4 / more
                        :quant (m3 / much)))
            :op2 (h2 / have-degree-91
                  :ARG1 i2
                  :ARG2 (d / difficult)
                  :ARG3 (m / more
                        :quant (m2 / much))))
      :time (t / then)
      :manner (s2 / sad-02))

instance(s,say-01)
instance(a,and)
instance(h,have-degree-91)
instance(i2,it)
instance(f,far)
instance(m4,more)
instance(m3,much)
instance(h2,have-degree-91)
instance(d,difficult)
instance(m,more)
instance(m2,much)
instance(t,then)
instance(s2,sad-02)
ARG1(s,a)
op1(a,h)
ARG1(h,i2)
ARG2(h,f)
ARG3(h,m4)
quant(m4,m3)
op2(a,h2)
ARG1(h2,i2)
ARG2(h2,d)
ARG3(h2,m)
quant(m,m2)
time(s,t)
manner(s,s2)

(r / realize-01
      :ARG0 (i / i)
      :ARG1 (e2 / event
            :mod (e / extraordinary))
      :ARG1-of (c / clear-06))

instance(r,realize-01)
instance(i,i)
instance(e2,event)
instance(e,extraordinary)
instance(c,clear-06)
ARG0(r,i)
ARG1(r,e2)
mod(e2,e)
ARG1-of(r,c)

(a / and
      :op1 (h / hold-01
            :ARG0 (i / i)
            :ARG1 (h2 / he)
            :ARG1-of (c / close-10)
            :location (a2 / arm
                  :part-of i)
            :ARG1-of (r / resemble-01
                  :ARG2 (c2 / child
                        :mod (l / little)
                        :domain h2)))
      :op2 (s / seem-01
            :ARG1 (r2 / rush-01
                  :ARG1 h2
                  :ARG2 (t / toward
                        :op1 (a3 / abyss
                              :ARG2-of (r3 / restrain-01 :polarity -
                                    :ARG0 i
                                    :ARG1 h2))
                        :mod (h3 / headlong)))
            :ARG2 i
            :mod (y / yet)))

instance(a,and)
instance(h,hold-01)
instance(i,i)
instance(h2,he)
instance(c,close-10)
instance(a2,arm)
instance(r,resemble-01)
instance(c2,child)
instance(l,little)
instance(s,seem-01)
instance(r2,rush-01)
instance(t,toward)
instance(a3,abyss)
instance(r3,restrain-01)
instance(h3,headlong)
instance(y,yet)
op1(a,h)
ARG0(h,i)
ARG1(h,h2)
ARG1-of(h,c)
location(h,a2)
part-of(a2,i)
ARG1-of(h,r)
ARG2(r,c2)
mod(c2,l)
domain(c2,h2)
op2(a,s)
ARG1(s,r2)
ARG1(r2,h2)
ARG2(r2,t)
op1(t,a3)
ARG2-of(a3,r3)
polarity(r3,-)
ARG0(r3,i)
ARG1(r3,h2)
mod(t,h3)
ARG2(s,i)
mod(s,y)

(l / look-01
      :ARG0 (h / he)
      :ARG2-of (s / serious-01
            :degree (v / very))
      :ARG1-of (r / resemble-01
            :ARG2 (s2 / someone
                  :ARG1-of (l2 / lose-02
                        :direction (a / away
                              :extent (f / far))))))

instance(l,look-01)
instance(h,he)
instance(s,serious-01)
instance(v,very)
instance(r,resemble-01)
instance(s2,someone)
instance(l2,lose-02)
instance(a,away)
instance(f,far)
ARG0(l,h)
ARG2-of(l,s)
degree(s,v)
ARG1-of(l,r)
ARG2(r,s2)
ARG1-of(s2,l2)
direction(l2,a)
extent(a,f)

(h / have-03
      :ARG0 (i / i)
      :ARG1 (s / sheep
            :poss (y / you)))

instance(h,have-03)
instance(i,i)
instance(s,sheep)
instance(y,you)
ARG0(h,i)
ARG1(h,s)
poss(s,y)

(a / and
      :op2 (h / have-03
            :ARG0 (i / i)
            :ARG1 (b / box
                  :poss (s / sheep))))

instance(a,and)
instance(h,have-03)
instance(i,i)
instance(b,box)
instance(s,sheep)
op2(a,h)
ARG0(h,i)
ARG1(h,b)
poss(b,s)

(a / and
      :op2 (h / have-03
            :ARG0 (i / i)
            :ARG1 (m / muzzle)))

instance(a,and)
instance(h,have-03)
instance(i,i)
instance(m,muzzle)
op2(a,h)
ARG0(h,i)
ARG1(h,m)

(a / and
      :op2 (g / give-01
            :ARG0 (h / he)
            :ARG1 (s / smile
                  :ARG1-of (s2 / sad-02))
            :ARG2 (i / i)))

instance(a,and)
instance(g,give-01)
instance(h,he)
instance(s,smile)
instance(s2,sad-02)
instance(i,i)
op2(a,g)
ARG0(g,h)
ARG1(g,s)
ARG1-of(s,s2)
ARG2(g,i)

(w / wait-01
      :ARG1 (i / i)
      :ARG1-of (l / long-03))

instance(w,wait-01)
instance(i,i)
instance(l,long-03)
ARG1(w,i)
ARG1-of(w,l)

(p / possible-01
      :ARG1 (s / see-01
            :ARG0 (i / i)
            :ARG1 (r / revive-01
                  :ARG1 (h / he)
                  :manner (l / little-by-little))))

instance(p,possible-01)
instance(s,see-01)
instance(i,i)
instance(r,revive-01)
instance(h,he)
instance(l,little-by-little)
ARG1(p,s)
ARG0(s,i)
ARG1(s,r)
ARG1(r,h)
manner(r,l)

(m2 / man
      :mod (l2 / little)
      :mod (d / dear))

instance(m2,man)
instance(l2,little)
instance(d,dear)
mod(m2,l2)
mod(m2,d)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (f / fear-01
          :ARG0 h)
  :ARG2 (h / he))

instance(s,say-01)
instance(i,i)
instance(f,fear-01)
instance(h,he)
ARG0(s,i)
ARG1(s,f)
ARG0(f,h)
ARG2(s,h)

(f / fear-01
  :ARG0 (h / he)
  :mod (c / certain))

instance(f,fear-01)
instance(h,he)
instance(c,certain)
ARG0(f,h)
mod(f,c)

(c / contrast-01
      :ARG2 (l / laugh-01
            :ARG0 (h / he)
            :manner (l2 / light-06)))

instance(c,contrast-01)
instance(l,laugh-01)
instance(h,he)
instance(l2,light-06)
ARG2(c,l)
ARG0(l,h)
manner(l,l2)

(h / have-degree-91
      :ARG1 (i / i)
      :ARG2 (f / fear-01
            :ARG0 i)
      :ARG3 (m / more
            :quant (m2 / much))
      :time (d / date-entity
            :dayperiod (e / evening)
            :mod (t / today)))

instance(h,have-degree-91)
instance(i,i)
instance(f,fear-01)
instance(m,more)
instance(m2,much)
instance(d,date-entity)
instance(e,evening)
instance(t,today)
ARG1(h,i)
ARG2(h,f)
ARG0(f,i)
ARG3(h,m)
quant(m,m2)
time(h,d)
dayperiod(d,e)
mod(d,t)

(f / feel-01
      :ARG0 (i / i)
      :ARG1 (f2 / freeze-01
            :ARG0 (s / sense-01
                  :ARG0 i
                  :ARG1 (s2 / something
                        :ARG1-of (r / repair-01
                              :ARG1-of (p / possible-01 :polarity -))))
            :ARG1 i)
      :mod (a / again
            :mod (o / once)))

instance(f,feel-01)
instance(i,i)
instance(f2,freeze-01)
instance(s,sense-01)
instance(s2,something)
instance(r,repair-01)
instance(p,possible-01)
instance(a,again)
instance(o,once)
ARG0(f,i)
ARG1(f,f2)
ARG0(f2,s)
ARG0(s,i)
ARG1(s,s2)
ARG1-of(s2,r)
ARG1-of(r,p)
polarity(p,-)
ARG1(f2,i)
mod(f,a)
mod(a,o)

(a / and
      :op2 (k / know-01
            :ARG0 (i / i)
            :ARG1 (p / possible-01 :polarity -
                  :ARG1 (b / bear-01
                        :ARG1 (t / think-01
                              :ARG1 (h / hear-01 :polarity -
                                    :ARG1 (l / laugh-01)
                                    :time (e / ever)
                                    :mod (m / more
                                          :mod (a2 / any))))))))

instance(a,and)
instance(k,know-01)
instance(i,i)
instance(p,possible-01)
instance(b,bear-01)
instance(t,think-01)
instance(h,hear-01)
instance(l,laugh-01)
instance(e,ever)
instance(m,more)
instance(a2,any)
op2(a,k)
ARG0(k,i)
ARG1(k,p)
polarity(p,-)
ARG1(p,b)
ARG1(b,t)
ARG1(t,h)
polarity(h,-)
ARG1(h,l)
time(h,e)
mod(h,m)
mod(m,a2)

(r / resemble-01
      :ARG1 (i / it)
      :ARG2 (s / spring
            :source-of (w / water
                  :ARG1-of (f / fresh-04))
            :location (d / desert))
      :beneficiary (i2 / i))

instance(r,resemble-01)
instance(i,it)
instance(s,spring)
instance(w,water)
instance(f,fresh-04)
instance(d,desert)
instance(i2,i)
ARG1(r,i)
ARG2(r,s)
source-of(s,w)
ARG1-of(w,f)
location(s,d)
beneficiary(r,i2)

(m / man
  :mod (l / little))

instance(m,man)
instance(l,little)
mod(m,l)

(s / say-01
  :ARG0 i
  :ARG1 (w / want-01
          :ARG0 (i / i)
          :ARG1 (h / hear-01
                  :ARG0 i
                  :ARG1 (l / laugh-01
                          :ARG0 (y / you)
                          :mod (a / again)))))

instance(s,say-01)
instance(w,want-01)
instance(i,i)
instance(h,hear-01)
instance(l,laugh-01)
instance(y,you)
instance(a,again)
ARG0(s,i)
ARG1(s,w)
ARG0(w,i)
ARG1(w,h)
ARG0(h,i)
ARG1(h,l)
ARG0(l,y)
mod(l,a)

(c / contrast-01
      :ARG2 (s / say-01
            :ARG0 (h / he)
            :ARG1 (p / possible-01
                  :ARG1 (f / find-01
                        :ARG1 (s2 / star
                              :poss h)
                        :location (a / above
                              :op1 (p2 / place
                                    :location (e / earth)
                                    :ARG4-of (c2 / come-01
                                          :time (b / before
                                                :op1 (n / now)
                                                :quant (t3 / temporal-quantity :quant 1
                                                      :unit (y2 / year)))))
                              :mod (r / right)))
                  :time (d / date-entity :dayperiod (n2 / night) :mod (t / today))
                  :duration (y / year)
                  :mod (t2 / then))
            :ARG2 (i / i)))

instance(c,contrast-01)
instance(s,say-01)
instance(h,he)
instance(p,possible-01)
instance(f,find-01)
instance(s2,star)
instance(a,above)
instance(p2,place)
instance(e,earth)
instance(c2,come-01)
instance(b,before)
instance(n,now)
instance(t3,temporal-quantity)
instance(y2,year)
instance(r,right)
instance(d,date-entity)
instance(n2,night)
instance(t,today)
instance(y,year)
instance(t2,then)
instance(i,i)
ARG2(c,s)
ARG0(s,h)
ARG1(s,p)
ARG1(p,f)
ARG1(f,s2)
poss(s2,h)
location(f,a)
op1(a,p2)
location(p2,e)
ARG4-of(p2,c2)
time(c2,b)
op1(b,n)
quant(b,t3)
quant(t3,1)
unit(t3,y2)
mod(a,r)
time(p,d)
dayperiod(d,n2)
mod(d,t)
duration(p,y)
mod(p,t2)
ARG2(s,i)

(m / man
  :mod (l / little))

instance(m,man)
instance(l,little)
mod(m,l)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (t / tell-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (d / dream-01
                  :ARG0 i
                  :ARG1 (a / and
                        :op1 (a2 / affair-02
                              :ARG1 (s2 / snake)
                              :ARG2 (t2 / this))
                        :op2 (m / meet-01
                              :location (p / place))
                        :op3 (s3 / star))
                  :ARG1-of (b / bad-07)
                  :mod (o / only))
            :ARG2 i))

instance(s,say-01)
instance(i,i)
instance(t,tell-01)
instance(y,you)
instance(d,dream-01)
instance(a,and)
instance(a2,affair-02)
instance(s2,snake)
instance(t2,this)
instance(m,meet-01)
instance(p,place)
instance(s3,star)
instance(b,bad-07)
instance(o,only)
ARG0(s,i)
ARG1(s,t)
mode(t,imperative)
ARG0(t,y)
ARG1(t,d)
ARG0(d,i)
ARG1(d,a)
op1(a,a2)
ARG1(a2,s2)
ARG2(a2,t2)
op2(a,m)
location(m,p)
op3(a,s3)
ARG1-of(d,b)
mod(d,o)
ARG2(t,i)

(c / contrast-01
  :ARG2 (a / answer-01
          :ARG0 (h / he)
          :ARG1 (p / plea
                  :poss (i / i))
          :polarity -))

instance(c,contrast-01)
instance(a,answer-01)
instance(h,he)
instance(p,plea)
instance(i,i)
ARG2(c,a)
ARG0(a,h)
ARG1(a,p)
poss(p,i)
polarity(a,-)

(s3 / say-01
      :ARG0 (h / he)
      :ARG1 (i2 / important-01
            :ARG1 (t / thing
                  :ARG1-of (s2 / see-01 :polarity -)))
      :ARG2 (i3 / i)
      :ARG1-of (i / instead-of-91))

instance(s3,say-01)
instance(h,he)
instance(i2,important-01)
instance(t,thing)
instance(s2,see-01)
instance(i3,i)
instance(i,instead-of-91)
ARG0(s3,h)
ARG1(s3,i2)
ARG1(i2,t)
ARG1-of(t,s2)
polarity(s2,-)
ARG2(s3,i3)
ARG1-of(s3,i)

(k / know-01
  :ARG0 (i / i))

instance(k,know-01)
instance(i,i)
ARG0(k,i)

(r / resemble-01
  :ARG1 (i / it)
  :ARG2 (f / flower)
  :mod (j / just))

instance(r,resemble-01)
instance(i,it)
instance(f,flower)
instance(j,just)
ARG1(r,i)
ARG2(r,f)
mod(r,j)

(l / look-01
      :ARG1 (s2 / sky
            :time (d / date-entity :dayperiod (n / night)))
      :ARG1-of (s / sweet-04)
      :condition (l2 / love-01
            :ARG0 (y / you)
            :ARG1 (f / flower
                  :ARG0-of (l3 / live-01
                        :location (s3 / star)))))

instance(l,look-01)
instance(s2,sky)
instance(d,date-entity)
instance(n,night)
instance(s,sweet-04)
instance(l2,love-01)
instance(y,you)
instance(f,flower)
instance(l3,live-01)
instance(s3,star)
ARG1(l,s2)
time(s2,d)
dayperiod(d,n)
ARG1-of(l,s)
condition(l,l2)
ARG0(l2,y)
ARG1(l2,f)
ARG0-of(f,l3)
location(l3,s3)

(b / bloom-01
      :ARG0 (f / flower)
      :location (s / star
            :mod (a / all)))

instance(b,bloom-01)
instance(f,flower)
instance(s,star)
instance(a,all)
ARG0(b,f)
location(b,s)
mod(s,a)

(k / know-01
  :ARG0 (i / i))

instance(k,know-01)
instance(i,i)
ARG0(k,i)

(r / resemble-01
  :ARG1 (i / it)
  :ARG2 (w / water)
  :mod (j / just))

instance(r,resemble-01)
instance(i,it)
instance(w,water)
instance(j,just)
ARG1(r,i)
ARG2(r,w)
mod(r,j)

(c / cause-01
      :ARG0 (a / and
            :op1 (p / pulley)
            :op2 (r / rope))
      :ARG1 (r2 / resemble-01
            :ARG1 (t / thing
                  :ARG1-of (g / give-01
                        :ARG0 (y / you)
                        :ARG2 (i / i)
                        :purpose (d / drink-01
                              :ARG0 i)))
            :ARG2 (m / music)))

instance(c,cause-01)
instance(a,and)
instance(p,pulley)
instance(r,rope)
instance(r2,resemble-01)
instance(t,thing)
instance(g,give-01)
instance(y,you)
instance(i,i)
instance(d,drink-01)
instance(m,music)
ARG0(c,a)
op1(a,p)
op2(a,r)
ARG1(c,r2)
ARG1(r2,t)
ARG1-of(t,g)
ARG0(g,y)
ARG2(g,i)
purpose(g,d)
ARG0(d,i)
ARG2(r2,m)

(r / remember-01
      :ARG0 (y / you)
      :ARG1 (g / good-02
            :ARG1 (i / it)
            :degree (s / so)))

instance(r,remember-01)
instance(y,you)
instance(g,good-02)
instance(i,it)
instance(s,so)
ARG0(r,y)
ARG1(r,g)
ARG1(g,i)
degree(g,s)

(k / know-01
  :ARG0 (i / i))

instance(k,know-01)
instance(i,i)
ARG0(k,i)

(a / and
      :op2 (l / look-01
            :ARG0 (y / you)
            :ARG1 (s / star)
            :direction (u / up)
            :time (d / date-entity :dayperiod (n / night))))

instance(a,and)
instance(l,look-01)
instance(y,you)
instance(s,star)
instance(u,up)
instance(d,date-entity)
instance(n,night)
op2(a,l)
ARG0(l,y)
ARG1(l,s)
direction(l,u)
time(l,d)
dayperiod(d,n)

(h / have-degree-91
      :ARG1 (e / everything
            :location (l2 / live-01
                  :ARG0 i))
      :ARG2 (s3 / small)
      :ARG3 (s4 / so)
      :ARG6 (p / possible-01 :polarity -
            :ARG1 (s / show-01
                  :ARG0 (i / i)
                  :ARG1 (l / location
                        :location-of (f / find-01
                              :ARG1 (s2 / star
                                    :poss i)))
                  :ARG2 (y2 / you))))

instance(h,have-degree-91)
instance(e,everything)
instance(l2,live-01)
instance(s3,small)
instance(s4,so)
instance(p,possible-01)
instance(s,show-01)
instance(i,i)
instance(l,location)
instance(f,find-01)
instance(s2,star)
instance(y2,you)
ARG1(h,e)
location(e,l2)
ARG0(l2,i)
ARG2(h,s3)
ARG3(h,s4)
ARG6(h,p)
polarity(p,-)
ARG1(p,s)
ARG0(s,i)
ARG1(s,l)
location-of(l,f)
ARG1(f,s2)
poss(s2,i)
ARG2(s,y2)

(h / have-degree-91
      :ARG1 (i2 / it)
      :ARG2 (g / good-02
            :ARG1 i2)
      :ARG3 (m / more)
      :condition (r / resemble-01
            :ARG1 i2
            :ARG2 (t / that)))

instance(h,have-degree-91)
instance(i2,it)
instance(g,good-02)
instance(m,more)
instance(r,resemble-01)
instance(t,that)
ARG1(h,i2)
ARG2(h,g)
ARG1(g,i2)
ARG3(h,m)
condition(h,r)
ARG1(r,i2)
ARG2(r,t)

(s / star :quant 1
      :beneficiary (y / you)
      :poss (i / i)
      :ARG1-of (i2 / include-91
            :ARG2 (s2 / star)
            :mod (j / just)))

instance(s,star)
instance(y,you)
instance(i,i)
instance(i2,include-91)
instance(s2,star)
instance(j,just)
quant(s,1)
beneficiary(s,y)
poss(s,i)
ARG1-of(s,i2)
ARG2(i2,s2)
mod(i2,j)

(a / and
      :op2 (l / love-01
            :ARG0 (y / you)
            :ARG1 (w / watch-01
                  :ARG0 y
                  :ARG1 (s / star
                        :location (h / heaven)
                        :mod (a2 / all)
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 y
                              :ARG2 (f / friend))))))

instance(a,and)
instance(l,love-01)
instance(y,you)
instance(w,watch-01)
instance(s,star)
instance(h,heaven)
instance(a2,all)
instance(h2,have-rel-role-91)
instance(f,friend)
op2(a,l)
ARG0(l,y)
ARG1(l,w)
ARG0(w,y)
ARG1(w,s)
location(s,h)
mod(s,a2)
ARG0-of(s,h2)
ARG1(h2,y)
ARG2(h2,f)

(a / and
  :op1 (m / make-01
         :ARG0 (i / i)
         :ARG1 (p / present)
         :ARG3 (y / you)))

instance(a,and)
instance(m,make-01)
instance(i,i)
instance(p,present)
instance(y,you)
op1(a,m)
ARG0(m,i)
ARG1(m,p)
ARG3(m,y)

(l / laugh-01
  :ARG0 (h / he)
  :mod (a / again))

instance(l,laugh-01)
instance(h,he)
instance(a,again)
ARG0(l,h)
mod(l,a)

(a / and :mode expressive
      :op2 (p2 / prince
            :mod (l2 / little)
            :mod (d / dear)))

instance(a,and)
instance(p2,prince)
instance(l2,little)
instance(d,dear)
mode(a,expressive)
op2(a,p2)
mod(p2,l2)
mod(p2,d)

(l / love-01
      :ARG0 (i / i)
      :ARG1 (h / hear-01
            :ARG0 i
            :ARG1 (l2 / laugh-01
                  :mod (t / that))))

instance(l,love-01)
instance(i,i)
instance(h,hear-01)
instance(l2,laugh-01)
instance(t,that)
ARG0(l,i)
ARG1(l,h)
ARG0(h,i)
ARG1(h,l2)
mod(l2,t)

(p / present-01
      :ARG0 (i / i)
      :ARG1 (t / that))

instance(p,present-01)
instance(i,i)
instance(t,that)
ARG0(p,i)
ARG1(p,t)

(t / that
  :mod (j / just))

instance(t,that)
instance(j,just)
mod(t,j)

(r / resemble-01
      :ARG1 (i / it)
      :ARG2 (t / time
            :time-of (d / drink-01
                  :ARG0 (w / we)
                  :ARG1 (w2 / water))))

instance(r,resemble-01)
instance(i,it)
instance(t,time)
instance(d,drink-01)
instance(w,we)
instance(w2,water)
ARG1(r,i)
ARG2(r,t)
time-of(t,d)
ARG0(d,w)
ARG1(d,w2)

(t / try-01
  :ARG0 (y / you)
  :ARG1 (s / say-01
          :ARG0 y
          :ARG1 (a / amr-unknown)))

instance(t,try-01)
instance(y,you)
instance(s,say-01)
instance(a,amr-unknown)
ARG0(t,y)
ARG1(t,s)
ARG0(s,y)
ARG1(s,a)

(a / answer-01
      :ARG0 (h / he)
      :ARG2 (c / contrast-01
            :ARG1 (h2 / have-03
                  :ARG0 (m / man
                        :mod (a2 / all))
                  :ARG1 (s / star))
            :ARG2 (t / thing
                  :ARG1-of (s2 / same-01 :polarity -
                        :ARG2 s
                        :ARG3 (p / person
                              :ARG1-of (d2 / differ-02))))))

instance(a,answer-01)
instance(h,he)
instance(c,contrast-01)
instance(h2,have-03)
instance(m,man)
instance(a2,all)
instance(s,star)
instance(t,thing)
instance(s2,same-01)
instance(p,person)
instance(d2,differ-02)
ARG0(a,h)
ARG2(a,c)
ARG1(c,h2)
ARG0(h2,m)
mod(m,a2)
ARG1(h2,s)
ARG2(c,t)
ARG1-of(t,s2)
polarity(s2,-)
ARG2(s2,s)
ARG3(s2,p)
ARG1-of(p,d2)

(g / guide-01
  :ARG0 (s / star)
  :ARG1 (s2 / some
          :ARG0-of (t / travel-01)))

instance(g,guide-01)
instance(s,star)
instance(s2,some)
instance(t,travel-01)
ARG0(g,s)
ARG1(g,s2)
ARG0-of(s2,t)

(o2 / opine-01
      :ARG0 (p / person
            :mod (o / other))
      :ARG1 (l / light
            :mod (l2 / little)
            :location (s / sky)
            :mod (o3 / only)
            :domain (t / they)))

instance(o2,opine-01)
instance(p,person)
instance(o,other)
instance(l,light)
instance(l2,little)
instance(s,sky)
instance(o3,only)
instance(t,they)
ARG0(o2,p)
mod(p,o)
ARG1(o2,l)
mod(l,l2)
location(l,s)
mod(l,o3)
domain(l,t)

(o / opine-01
      :ARG0 (s / scholar)
      :ARG1 (p / problem
            :domain (t / they)))

instance(o,opine-01)
instance(s,scholar)
instance(p,problem)
instance(t,they)
ARG0(o,s)
ARG1(o,p)
domain(p,t)

(o / opine-01
      :ARG0 (b / businessman
            :poss (i / i))
      :ARG1 (w / wealth
            :domain (t / they)))

instance(o,opine-01)
instance(b,businessman)
instance(i,i)
instance(w,wealth)
instance(t,they)
ARG0(o,b)
poss(b,i)
ARG1(o,w)
domain(w,t)

(c / contrast-01
      :ARG2 (s2 / silent
            :domain (s / star
                  :mod (t / this
                        :mod (a / all)))))

instance(c,contrast-01)
instance(s2,silent)
instance(s,star)
instance(t,this)
instance(a,all)
ARG2(c,s2)
domain(s2,s)
mod(s,t)
mod(t,a)

(h / have-03
      :ARG0 (y / you
            :mod (a / alone))
      :ARG1 (s / star)
      :ARG1-of (r / resemble-01 :polarity -
            :ARG2 (h2 / have-03
                  :ARG0 (a2 / anyone
                        :mod (e / else))
                  :ARG1 s)))

instance(h,have-03)
instance(y,you)
instance(a,alone)
instance(s,star)
instance(r,resemble-01)
instance(h2,have-03)
instance(a2,anyone)
instance(e,else)
ARG0(h,y)
mod(y,a)
ARG1(h,s)
ARG1-of(h,r)
polarity(r,-)
ARG2(r,h2)
ARG0(h2,a2)
mod(a2,e)
ARG1(h2,s)

(t / try-01
      :ARG0 (y / you)
      :ARG1 (s / say-01
            :ARG0 y
            :ARG1 (a / amr-unknown)))

instance(t,try-01)
instance(y,you)
instance(s,say-01)
instance(a,amr-unknown)
ARG0(t,y)
ARG1(t,s)
ARG0(s,y)
ARG1(s,a)

(l / live-01
      :ARG0 (i / i)
      :location (s / star :quant 1
            :ARG1-of (i2 / include-91
                  :ARG2 (s2 / star))))

instance(l,live-01)
instance(i,i)
instance(s,star)
instance(i2,include-91)
instance(s2,star)
ARG0(l,i)
location(l,s)
quant(s,1)
ARG1-of(s,i2)
ARG2(i2,s2)

(l / laugh-01
      :ARG0 (i / i)
      :location (s / star :quant 1
            :ARG1-of (i2 / include-91
                  :ARG2 (t / they))))

instance(l,laugh-01)
instance(i,i)
instance(s,star)
instance(i2,include-91)
instance(t,they)
ARG0(l,i)
location(l,s)
quant(s,1)
ARG1-of(s,i2)
ARG2(i2,t)

(a / and
      :op2 (r / resemble-01
            :ARG1 (i2 / it)
            :ARG2 (l2 / laugh-01
                  :ARG0 (s / star
                        :mod (a3 / all)))
            :time (l3 / look-01
                  :ARG0 (y / you
                        :mod (o2 / only))
                  :ARG1 (s2 / sky)
                  :time (d / date-entity
                        :dayperiod (n / night)
                        :time-of (h / have-03
                              :ARG0 y
                              :ARG1 (s3 / star
                                    :ARG0-of (l / laugh-01
                                          :ARG1-of (p / possible-01))))))))

instance(a,and)
instance(r,resemble-01)
instance(i2,it)
instance(l2,laugh-01)
instance(s,star)
instance(a3,all)
instance(l3,look-01)
instance(y,you)
instance(o2,only)
instance(s2,sky)
instance(d,date-entity)
instance(n,night)
instance(h,have-03)
instance(s3,star)
instance(l,laugh-01)
instance(p,possible-01)
op2(a,r)
ARG1(r,i2)
ARG2(r,l2)
ARG0(l2,s)
mod(s,a3)
time(r,l3)
ARG0(l3,y)
mod(y,o2)
ARG1(l3,s2)
time(l3,d)
dayperiod(d,n)
time-of(d,h)
ARG0(h,y)
ARG1(h,s3)
ARG0-of(s3,l)
ARG1-of(l,p)

(a / and
      :op2 (l / laugh-01
            :ARG0 (h / he)
            :mod (a2 / again)))

instance(a,and)
instance(l,laugh-01)
instance(h,he)
instance(a2,again)
op2(a,l)
ARG0(l,h)
mod(l,a2)

(a / and
      :op2 (c / content-01
            :ARG1 (y / you)
            :ARG2 (k / know-02
                  :ARG0 y
                  :ARG1 (i / i))
            :time (c2 / comfort-01
                  :ARG1 (s / sorrow-01
                        :ARG0 y
                        :ARG1-of (s2 / soothe-01
                              :ARG0 (t / time))
                        :mod (a2 / all)))))

instance(a,and)
instance(c,content-01)
instance(y,you)
instance(k,know-02)
instance(i,i)
instance(c2,comfort-01)
instance(s,sorrow-01)
instance(s2,soothe-01)
instance(t,time)
instance(a2,all)
op2(a,c)
ARG1(c,y)
ARG2(c,k)
ARG0(k,y)
ARG1(k,i)
time(c,c2)
ARG1(c2,s)
ARG0(s,y)
ARG1-of(s,s2)
ARG0(s2,t)
mod(s,a2)

(h / have-rel-role-91
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (f / friend)
      :time (a / always))

instance(h,have-rel-role-91)
instance(y,you)
instance(i,i)
instance(f,friend)
instance(a,always)
ARG0(h,y)
ARG1(h,i)
ARG2(h,f)
time(h,a)

(w / want-01
      :ARG0 (y / you)
      :ARG1 (l / laugh-01
            :ARG0 y
            :accompanier (i / i)))

instance(w,want-01)
instance(y,you)
instance(l,laugh-01)
instance(i,i)
ARG0(w,y)
ARG1(w,l)
ARG0(l,y)
accompanier(l,i)

(a / and
      :op1 (o / open-01
            :ARG0 (y / you)
            :ARG1 (w / window
                  :poss y)
            :time (s / sometimes)
            :purpose (p / pleasure
                  :mod (t / that)))
      :op2 (a2 / astonish-01
            :ARG0 (s2 / see-01
                  :ARG0 p3
                  :ARG1 (l / laugh-01
                        :ARG0 y
                        :time (l2 / look-01
                              :ARG1 (s3 / sky)
                              :direction (u / up))))
            :ARG1 (p3 / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 y
                        :ARG2 (f / friend)))
            :manner (p2 / proper)))

instance(a,and)
instance(o,open-01)
instance(y,you)
instance(w,window)
instance(s,sometimes)
instance(p,pleasure)
instance(t,that)
instance(a2,astonish-01)
instance(s2,see-01)
instance(l,laugh-01)
instance(l2,look-01)
instance(s3,sky)
instance(u,up)
instance(p3,person)
instance(h,have-rel-role-91)
instance(f,friend)
instance(p2,proper)
op1(a,o)
ARG0(o,y)
ARG1(o,w)
poss(w,y)
time(o,s)
purpose(o,p)
mod(p,t)
op2(a,a2)
ARG0(a2,s2)
ARG0(s2,p3)
ARG1(s2,l)
ARG0(l,y)
time(l,l2)
ARG1(l2,s3)
direction(l2,u)
ARG1(a2,p3)
ARG0-of(p3,h)
ARG1(h,y)
ARG2(h,f)
manner(a2,p2)

(a / and
      :op1 (s / say-01
            :ARG0 (y / you)
            :ARG1 (a3 / and
                  :op1 (y2 / yes)
                  :op2 (m / make-02
                        :ARG0 (s3 / star)
                        :ARG1 (l2 / laugh-01
                              :ARG0 (i / i))
                        :time (a2 / always)))
            :ARG2 (t2 / they)
            :time (t / then))
      :op2 (t3 / think-01
            :ARG0 t2
            :ARG1 (c / crazy-03
                  :ARG1 y)))

instance(a,and)
instance(s,say-01)
instance(y,you)
instance(a3,and)
instance(y2,yes)
instance(m,make-02)
instance(s3,star)
instance(l2,laugh-01)
instance(i,i)
instance(a2,always)
instance(t2,they)
instance(t,then)
instance(t3,think-01)
instance(c,crazy-03)
op1(a,s)
ARG0(s,y)
ARG1(s,a3)
op1(a3,y2)
op2(a3,m)
ARG0(m,s3)
ARG1(m,l2)
ARG0(l2,i)
time(m,a2)
ARG2(s,t2)
time(s,t)
op2(a,t3)
ARG0(t3,t2)
ARG1(t3,c)
ARG1(c,y)

(t3 / trick-01
      :ARG0 (i / i)
      :ARG1 (y / you)
      :mod (s2 / shabby
            :degree (v2 / very)))

instance(t3,trick-01)
instance(i,i)
instance(y,you)
instance(s2,shabby)
instance(v2,very)
ARG0(t3,i)
ARG1(t3,y)
mod(t3,s2)
degree(s2,v2)

(a / and
      :op2 (l / laugh-01
            :ARG0 (h / he)
            :mod (a2 / again)))

instance(a,and)
instance(l,laugh-01)
instance(h,he)
instance(a2,again)
op2(a,l)
ARG0(l,h)
mod(l,a2)

(r / resemble-01
      :ARG1 (g / give-01
            :ARG0 (i / i)
            :ARG1 (b2 / bell
                  :mod (l3 / little)
                  :quant (g2 / great)
                  :ARG0-of (k / know-01
                        :ARG1 (l2 / laugh-01)))
            :ARG2 (y / you)
            :ARG1-of (i2 / instead-of-91
                  :ARG2 (g3 / give-01
                        :ARG0 i
                        :ARG1 (s2 / star)
                        :ARG2 y))))

instance(r,resemble-01)
instance(g,give-01)
instance(i,i)
instance(b2,bell)
instance(l3,little)
instance(g2,great)
instance(k,know-01)
instance(l2,laugh-01)
instance(y,you)
instance(i2,instead-of-91)
instance(g3,give-01)
instance(s2,star)
ARG1(r,g)
ARG0(g,i)
ARG1(g,b2)
mod(b2,l3)
quant(b2,g2)
ARG0-of(b2,k)
ARG1(k,l2)
ARG2(g,y)
ARG1-of(g,i2)
ARG2(i2,g3)
ARG0(g3,i)
ARG1(g3,s2)
ARG2(g3,y)

(a / and
      :op2 (l / laugh-01
            :ARG0 (h / he)
            :mod (a2 / again)))

instance(a,and)
instance(l,laugh-01)
instance(h,he)
instance(a2,again)
op2(a,l)
ARG0(l,h)
mod(l,a2)

(s / say-01
      :ARG0 (p / prince
            :mod (l / little)
            :ARG1-of (b / become-01
                  :ARG2 (s2 / serious-01
                        :ARG1 p)
                  :ARG1-of (q / quick-02)
                  :time (t / then)))
      :ARG1 (c / come-01 :mode imperative :polarity -
            :ARG1 (y / you)
            :time (d / date-entity :dayperiod (n / night) :mod (t2 / today))))

instance(s,say-01)
instance(p,prince)
instance(l,little)
instance(b,become-01)
instance(s2,serious-01)
instance(q,quick-02)
instance(t,then)
instance(c,come-01)
instance(y,you)
instance(d,date-entity)
instance(n,night)
instance(t2,today)
ARG0(s,p)
mod(p,l)
ARG1-of(p,b)
ARG2(b,s2)
ARG1(s2,p)
ARG1-of(b,q)
time(b,t)
ARG1(s,c)
mode(c,imperative)
polarity(c,-)
ARG1(c,y)
time(c,d)
dayperiod(d,n)
mod(d,t2)

(l / leave-15 :polarity -
      :ARG0 (i / i)
      :ARG1 (y / you))

instance(l,leave-15)
instance(i,i)
instance(y,you)
polarity(l,-)
ARG0(l,i)
ARG1(l,y)

(s / say-01
  :ARG0 (i / i))

instance(s,say-01)
instance(i,i)
ARG0(s,i)

(l / look-02
      :ARG0 (i / i)
      :ARG1 (h / have-manner-91
            :ARG2 (s2 / suffer-01)))

instance(l,look-02)
instance(i,i)
instance(h,have-manner-91)
instance(s2,suffer-01)
ARG0(l,i)
ARG1(l,h)
ARG2(h,s2)

(l / look-02
      :ARG0 (i / i)
      :ARG1 (h / have-manner-91
            :ARG2 (d2 / die-01))
      :degree (l3 / little))

instance(l,look-02)
instance(i,i)
instance(h,have-manner-91)
instance(d2,die-01)
instance(l3,little)
ARG0(l,i)
ARG1(l,h)
ARG2(h,d2)
degree(l,l3)

(r / resemble-01
  :ARG1 (i / it)
  :ARG2 (t / that))

instance(r,resemble-01)
instance(i,it)
instance(t,that)
ARG1(r,i)
ARG2(r,t)

(c / come-01 :polarity - :mode imperative
      :ARG1 (y / you)
      :purpose (s / see-01
            :ARG0 y
            :ARG1 (t / that)))

instance(c,come-01)
instance(y,you)
instance(s,see-01)
instance(t,that)
polarity(c,-)
mode(c,imperative)
ARG1(c,y)
purpose(c,s)
ARG0(s,y)
ARG1(s,t)

(w / worth-02 :polarity -
      :ARG1 (i / it)
      :ARG2 (t / trouble-05
            :ARG2 i))

instance(w,worth-02)
instance(i,it)
instance(t,trouble-05)
polarity(w,-)
ARG1(w,i)
ARG2(w,t)
ARG2(t,i)

(l / leave-15 :polarity -
      :ARG0 (i / i)
      :ARG1 (y / you))

instance(l,leave-15)
instance(i,i)
instance(y,you)
polarity(l,-)
ARG0(l,i)
ARG1(l,y)

(c / contrast-01
      :ARG2 (w2 / worry-01
            :ARG1 (h / he)))

instance(c,contrast-01)
instance(w2,worry-01)
instance(h,he)
ARG2(c,w2)
ARG1(w2,h)

(t / tell-01
      :ARG0 (i / i)
      :ARG1 (c / cause-01
            :ARG0 (s / snake)
            :mod (a / also))
      :ARG2 (y / you))

instance(t,tell-01)
instance(i,i)
instance(c,cause-01)
instance(s,snake)
instance(a,also)
instance(y,you)
ARG0(t,i)
ARG1(t,c)
ARG0(c,s)
mod(c,a)
ARG2(t,y)

(o2 / obligate-01
      :ARG1 (b2 / bite-01 :polarity -
            :ARG0 (h2 / he)
            :ARG1 (y2 / you)))

instance(o2,obligate-01)
instance(b2,bite-01)
instance(h2,he)
instance(y2,you)
ARG1(o2,b2)
polarity(b2,-)
ARG0(b2,h2)
ARG1(b2,y2)

(s / snake
      :mod (c / creature
            :mod (m / malicious)))

instance(s,snake)
instance(c,creature)
instance(m,malicious)
mod(s,c)
mod(c,m)

(p / possible-01
      :ARG1 (b / bite-01
            :ARG0 (o / one
                  :mod (t / this))
            :ARG1 (y / you)
            :purpose (f / fun-01
                  :mod (j / just))))

instance(p,possible-01)
instance(b,bite-01)
instance(o,one)
instance(t,this)
instance(y,you)
instance(f,fun-01)
instance(j,just)
ARG1(p,b)
ARG0(b,o)
mod(o,t)
ARG1(b,y)
purpose(b,f)
mod(f,j)

(l / leave-15 :polarity -
      :ARG0 (i / i)
      :ARG1 (y / you))

instance(l,leave-15)
instance(i,i)
instance(y,you)
polarity(l,-)
ARG0(l,i)
ARG1(l,y)

(c / contrast-01
      :ARG2 (c2 / come-01
            :ARG1 (t / think-01
                  :ARG1 (t3 / true-01
                        :ARG1 (h2 / have-03 :polarity -
                              :ARG0 (t2 / they)
                              :ARG1 (p / poison
                                    :purpose (b / bite-01
                                          :ord (o / ordinal-entity :value 2))
                                    :quant (m / more)))
                        :purpose (r / reassure-01
                              :ARG1 (h / he))))))

instance(c,contrast-01)
instance(c2,come-01)
instance(t,think-01)
instance(t3,true-01)
instance(h2,have-03)
instance(t2,they)
instance(p,poison)
instance(b,bite-01)
instance(o,ordinal-entity)
instance(m,more)
instance(r,reassure-01)
instance(h,he)
ARG2(c,c2)
ARG1(c2,t)
ARG1(t,t3)
ARG1(t3,h2)
polarity(h2,-)
ARG0(h2,t2)
ARG1(h2,p)
purpose(p,b)
ord(b,o)
value(o,2)
quant(p,m)
purpose(t3,r)
ARG1(r,h)

(s / see-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (s2 / set-out-07
            :ARG0 (h / he)
            :ARG1 (w / way
                  :poss h))
      :time (d / date-entity
            :dayperiod (n / night)
            :mod (t / that)))

instance(s,see-01)
instance(i,i)
instance(s2,set-out-07)
instance(h,he)
instance(w,way)
instance(d,date-entity)
instance(n,night)
instance(t,that)
polarity(s,-)
ARG0(s,i)
ARG1(s,s2)
ARG0(s2,h)
ARG1(s2,w)
poss(w,h)
time(s,d)
dayperiod(d,n)
mod(d,t)

(g / get-away-08
      :ARG0 (h / he)
      :source (i / i)
      :manner (s2 / sound-02 :polarity -
            :ARG1 h))

instance(g,get-away-08)
instance(h,he)
instance(i,i)
instance(s2,sound-02)
ARG0(g,h)
source(g,i)
manner(g,s2)
polarity(s2,-)
ARG1(s2,h)

(s / succeed-01
      :ARG0 (i / i)
      :ARG1 (c / catch-up-04
            :ARG1 i
            :ARG2 (h / he))
      :time (w / walk-01
            :ARG0 h
            :ARG1-of (q / quick-02)
            :manner (r2 / resolute)))

instance(s,succeed-01)
instance(i,i)
instance(c,catch-up-04)
instance(h,he)
instance(w,walk-01)
instance(q,quick-02)
instance(r2,resolute)
ARG0(s,i)
ARG1(s,c)
ARG1(c,i)
ARG2(c,h)
time(s,w)
ARG0(w,h)
ARG1-of(w,q)
manner(w,r2)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (a / ah :mode expressive)
      :ARG2 (i / i)
      :manner (m / mere))

instance(s,say-01)
instance(h,he)
instance(a,ah)
instance(i,i)
instance(m,mere)
ARG0(s,h)
ARG1(s,a)
mode(a,expressive)
ARG2(s,i)
manner(s,m)

(y / you
  :location (t / there))

instance(y,you)
instance(t,there)
location(y,t)

(a / and
      :op2 (t / take-01
            :ARG0 (h / he)
            :ARG1 (i / i)
            :manner (h2 / hand)))

instance(a,and)
instance(t,take-01)
instance(h,he)
instance(i,i)
instance(h2,hand)
op2(a,t)
ARG0(t,h)
ARG1(t,i)
manner(t,h2)

(c / contrast-01
      :ARG2 (w / worry-01
            :ARG1 (h / he)
            :time (s2 / still)))

instance(c,contrast-01)
instance(w,worry-01)
instance(h,he)
instance(s2,still)
ARG2(c,w)
ARG1(w,h)
time(w,s2)

(c / come-01
      :ARG1 (y / you)
      :ARG1-of (w / wrong-02))

instance(c,come-01)
instance(y,you)
instance(w,wrong-02)
ARG1(c,y)
ARG1-of(c,w)

(s / suffer-01
  :ARG0 (y / you))

instance(s,suffer-01)
instance(y,you)
ARG0(s,y)

(a / and
      :op1 (r / resemble-01
            :ARG1 (i / i)
            :ARG2 (i2 / i
                  :ARG1-of (d2 / die-01)))
      :op2 (t / true-01 :polarity -
            :ARG1 r))

instance(a,and)
instance(r,resemble-01)
instance(i,i)
instance(i2,i)
instance(d2,die-01)
instance(t,true-01)
op1(a,r)
ARG1(r,i)
ARG2(r,i2)
ARG1-of(i2,d2)
op2(a,t)
polarity(t,-)
ARG1(t,r)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (n / nothing))

instance(s,say-01)
instance(i,i)
instance(n,nothing)
ARG0(s,i)
ARG1(s,n)

(u / understand-01
      :ARG0 (y / you)
      :ARG1 (h / have-degree-91
            :ARG1 (i2 / it)
            :ARG2 (f / far)
            :ARG3 (t / too)))

instance(u,understand-01)
instance(y,you)
instance(h,have-degree-91)
instance(i2,it)
instance(f,far)
instance(t,too)
ARG0(u,y)
ARG1(u,h)
ARG1(h,i2)
ARG2(h,f)
ARG3(h,t)

(p / possible-01 :polarity -
      :ARG1 (c / carry-01
            :ARG0 (i / i)
            :ARG1 (b / body
                  :mod (t / this))
            :ARG3 i))

instance(p,possible-01)
instance(c,carry-01)
instance(i,i)
instance(b,body)
instance(t,this)
polarity(p,-)
ARG1(p,c)
ARG0(c,i)
ARG1(c,b)
mod(b,t)
ARG3(c,i)

(h / have-degree-91
      :ARG1 (i2 / it)
      :ARG2 (h2 / heavy)
      :ARG3 (t / too))

instance(h,have-degree-91)
instance(i2,it)
instance(h2,heavy)
instance(t,too)
ARG1(h,i2)
ARG2(h,h2)
ARG3(h,t)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (n / nothing))

instance(s,say-01)
instance(i,i)
instance(n,nothing)
ARG0(s,i)
ARG1(s,n)

(c / contrast-01
      :ARG2 (r / resemble-01
            :ARG1 (i / it)
            :ARG2 (s / shell
                  :ARG1-of (a / abandon-01)
                  :mod (o / old))))

instance(c,contrast-01)
instance(r,resemble-01)
instance(i,it)
instance(s,shell)
instance(a,abandon-01)
instance(o,old)
ARG2(c,r)
ARG1(r,i)
ARG2(r,s)
ARG1-of(s,a)
mod(s,o)

(s / sad-02 :polarity -
      :ARG0 (s2 / shell
            :mod (o / old)))

instance(s,sad-02)
instance(s2,shell)
instance(o,old)
polarity(s,-)
ARG0(s,s2)
mod(s2,o)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (n / nothing))

instance(s,say-01)
instance(i,i)
instance(n,nothing)
ARG0(s,i)
ARG1(s,n)

(d / discourage-01
  :ARG1 (h / he)
  :degree (l / little))

instance(d,discourage-01)
instance(h,he)
instance(l,little)
ARG1(d,h)
degree(d,l)

(c / contrast-01
      :ARG2 (e / effort-01
            :ARG0 (h / he)
            :ARG1 (n / nice-01
                  :ARG1 (i / it)
                  :degree (v / very))
            :mod (m2 / more :quant 1)))

instance(c,contrast-01)
instance(e,effort-01)
instance(h,he)
instance(n,nice-01)
instance(i,it)
instance(v,very)
instance(m2,more)
ARG2(c,e)
ARG0(e,h)
ARG1(e,n)
ARG1(n,i)
degree(n,v)
mod(e,m2)
quant(m2,1)

(l / look-01
  :ARG0 (i / i
          :mod (t / too))
  :ARG1 (s / star))

instance(l,look-01)
instance(i,i)
instance(t,too)
instance(s,star)
ARG0(l,i)
mod(i,t)
ARG1(l,s)

(s / star
      :domain (w / well
            :ARG0-of (h / have-03
                  :ARG1 (p / pulley
                        :mod (r / rust))))
      :mod (a / all))

instance(s,star)
instance(w,well)
instance(h,have-03)
instance(p,pulley)
instance(r,rust)
instance(a,all)
domain(s,w)
ARG0-of(w,h)
ARG1(h,p)
mod(p,r)
mod(s,a)

(p / pour-01
      :ARG0 (s / star
            :mod (a / all))
      :ARG1 (w / water
            :ARG1-of (f / fresh-04))
      :purpose (d / drink-01
            :ARG0 (i / i)
            :ARG1 w)
      :direction (o / out))

instance(p,pour-01)
instance(s,star)
instance(a,all)
instance(w,water)
instance(f,fresh-04)
instance(d,drink-01)
instance(i,i)
instance(o,out)
ARG0(p,s)
mod(s,a)
ARG1(p,w)
ARG1-of(w,f)
purpose(p,d)
ARG0(d,i)
ARG1(d,w)
direction(p,o)

(s / say-01
  :ARG0 (i / i)
  :ARG1 (n / nothing))

instance(s,say-01)
instance(i,i)
instance(n,nothing)
ARG0(s,i)
ARG1(s,n)

(a / amuse-01
      :ARG0 (t / that)
      :degree (s / so))

instance(a,amuse-01)
instance(t,that)
instance(s,so)
ARG0(a,t)
degree(a,s)

(a / and
      :op1 (h / have-03
            :ARG0 (y / you)
            :ARG1 (b / bell :quant 500000000
                  :mod (l / little)))
      :op2 (h2 / have-03
            :ARG0 (i / i)
            :ARG1 (s / spring :quant 500000000
                  :source-of (w / water
                        :ARG1-of (f / fresh-04)))))

instance(a,and)
instance(h,have-03)
instance(y,you)
instance(b,bell)
instance(l,little)
instance(h2,have-03)
instance(i,i)
instance(s,spring)
instance(w,water)
instance(f,fresh-04)
op1(a,h)
ARG0(h,y)
ARG1(h,b)
quant(b,500000000)
mod(b,l)
op2(a,h2)
ARG0(h2,i)
ARG1(h2,s)
quant(s,500000000)
source-of(s,w)
ARG1-of(w,f)

(a / and
      :op2 (s / say-01
            :ARG0 (h / he
                  :mod (t / too))
            :ARG1 (n / nothing
                  :mod (m / more))
            :ARG1-of (c / cause-01
                  :ARG0 (c2 / cry-02
                        :ARG0 h))))

instance(a,and)
instance(s,say-01)
instance(h,he)
instance(t,too)
instance(n,nothing)
instance(m,more)
instance(c,cause-01)
instance(c2,cry-02)
op2(a,s)
ARG0(s,h)
mod(h,t)
ARG1(s,n)
mod(n,m)
ARG1-of(s,c)
ARG0(c,c2)
ARG0(c2,h)

(i / it
  :location (h / here))

instance(i,it)
instance(h,here)
location(i,h)

(a / allow-01
      :ARG0 (y / you)
      :ARG1 (g / go-on-15
            :ARG1 (i / i)
            :mod (b / by-oneself)))

instance(a,allow-01)
instance(y,you)
instance(g,go-on-15)
instance(i,i)
instance(b,by-oneself)
ARG0(a,y)
ARG1(a,g)
ARG1(g,i)
mod(g,b)

(a / and
      :op2 (s / sit-down-02
            :ARG1 (h / he)
            :ARG1-of (c / cause-01
                  :ARG0 (f / fear-01
                        :ARG0 h))))

instance(a,and)
instance(s,sit-down-02)
instance(h,he)
instance(c,cause-01)
instance(f,fear-01)
op2(a,s)
ARG1(s,h)
ARG1-of(s,c)
ARG0(c,f)
ARG0(f,h)

(s / say-01
      :ARG0 (h / he)
      :ARG1 (f / flower
            :poss h)
      :time (t / then)
      :mod (a / again))

instance(s,say-01)
instance(h,he)
instance(f,flower)
instance(t,then)
instance(a,again)
ARG0(s,h)
ARG1(s,f)
poss(f,h)
time(s,t)
mod(s,a)

(r / responsible-03
      :ARG0 (i / i)
      :ARG2 (s / she))

instance(r,responsible-03)
instance(i,i)
instance(s,she)
ARG0(r,i)
ARG2(r,s)

(a / and
      :op2 (w / weak-02
            :ARG1 (s / she)
            :degree (s2 / so)))

instance(a,and)
instance(w,weak-02)
instance(s,she)
instance(s2,so)
op2(a,w)
ARG1(w,s)
degree(w,s2)

(n / naive
      :degree (s2 / so)
      :domain (s / she))

instance(n,naive)
instance(s2,so)
instance(s,she)
degree(n,s2)
domain(n,s)

(h / have-03
      :ARG0 (s / she)
      :ARG1 (t / thorn :quant 4
            :ARG1-of (u / use-01 :polarity -
                  :degree (a2 / at-all)))
      :purpose (p / protect-01
            :ARG0 t
            :ARG1 s
            :ARG2 (w / world
                  :mod (a / all))))

instance(h,have-03)
instance(s,she)
instance(t,thorn)
instance(u,use-01)
instance(a2,at-all)
instance(p,protect-01)
instance(w,world)
instance(a,all)
ARG0(h,s)
ARG1(h,t)
quant(t,4)
ARG1-of(t,u)
polarity(u,-)
degree(u,a2)
purpose(h,p)
ARG0(p,t)
ARG1(p,s)
ARG2(p,w)
mod(w,a)

(s / sit-down-02
      :ARG1 (i / i
            :mod (t / too))
      :ARG1-of (c / cause-01
            :ARG0 (p / possible-01 :polarity -
                  :ARG1 (s2 / stand-up-07
                        :ARG1 i
                        :ARG1-of (l / long-03
                              :mod (a / any))))))

instance(s,sit-down-02)
instance(i,i)
instance(t,too)
instance(c,cause-01)
instance(p,possible-01)
instance(s2,stand-up-07)
instance(l,long-03)
instance(a,any)
ARG1(s,i)
mod(i,t)
ARG1-of(s,c)
ARG0(c,p)
polarity(p,-)
ARG1(p,s2)
ARG1(s2,i)
ARG1-of(s2,l)
mod(l,a)

(t / that
  :mod (a / all)
  :time (n / now))

instance(t,that)
instance(a,all)
instance(n,now)
mod(t,a)
time(t,n)

(m / multi-sentence
      :snt1 (h / hesitate-01
            :ARG0 (h2 / he)
            :mod (s / still)
            :degree (l / little))
      :snt2 (g / get-05
            :ARG1 h2
            :ARG2 (u / up)
            :time (t / then)))

instance(m,multi-sentence)
instance(h,hesitate-01)
instance(h2,he)
instance(s,still)
instance(l,little)
instance(g,get-05)
instance(u,up)
instance(t,then)
snt1(m,h)
ARG0(h,h2)
mod(h,s)
degree(h,l)
snt2(m,g)
ARG1(g,h2)
ARG2(g,u)
time(g,t)

(s / step-01
      :ARG1 (h / he))

instance(s,step-01)
instance(h,he)
ARG1(s,h)

(p / possible-01
  :ARG1 (m / move-01
            :ARG1 (i / i))
  :polarity -)

instance(p,possible-01)
instance(m,move-01)
instance(i,i)
ARG1(p,m)
ARG1(m,i)
polarity(p,-)

(f / flash
      :ARG1-of (y / yellow-02)
      :ARG1-of (c2 / close-10
            :ARG2 (a / ankle
                  :part-of (h / he)))
      :mod (n2 / nothing-but))

instance(f,flash)
instance(y,yellow-02)
instance(c2,close-10)
instance(a,ankle)
instance(h,he)
instance(n2,nothing-but)
ARG1-of(f,y)
ARG1-of(f,c2)
ARG2(c2,a)
part-of(a,h)
mod(f,n2)

(r / remain-01
      :ARG1 (h / he)
      :duration (i / instant)
      :manner (m / move-01 :polarity -))

instance(r,remain-01)
instance(h,he)
instance(i,instant)
instance(m,move-01)
ARG1(r,h)
duration(r,i)
manner(r,m)
polarity(m,-)

(c / cry-out-03
  :ARG0 (h / he)
  :polarity -)

instance(c,cry-out-03)
instance(h,he)
ARG0(c,h)
polarity(c,-)

(h2 / have-degree-91
      :ARG1 (f / fall-01
            :ARG1 (h / he))
      :ARG2 (g / gentle)
      :ARG3 (e / equal)
      :ARG4 (f2 / fall-01
            :ARG1 (t / tree)))

instance(h2,have-degree-91)
instance(f,fall-01)
instance(h,he)
instance(g,gentle)
instance(e,equal)
instance(f2,fall-01)
instance(t,tree)
ARG1(h2,f)
ARG1(f,h)
ARG2(h2,g)
ARG3(h2,e)
ARG4(h2,f2)
ARG1(f2,t)

(s / sound-02 :polarity -
      :mod (a / any
            :mod (e / even))
      :ARG1-of (c / cause-01
            :ARG0 (s2 / sand)))

instance(s,sound-02)
instance(a,any)
instance(e,even)
instance(c,cause-01)
instance(s2,sand)
polarity(s,-)
mod(s,a)
mod(a,e)
ARG1-of(s,c)
ARG0(c,s2)

(c / chapter :mod 27)

instance(c,chapter)
mod(c,27)

(a / and
      :op2 (g / go-on-15
            :ARG1 (t / temporal-quantity :quant 6
                  :unit (y / year))
            :time (a2 / already))
      :time (n / now))

instance(a,and)
instance(g,go-on-15)
instance(t,temporal-quantity)
instance(y,year)
instance(a2,already)
instance(n,now)
op2(a,g)
ARG1(g,t)
quant(t,6)
unit(t,y)
time(g,a2)
time(a,n)

(t / tell-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (s / story
            :mod (t2 / this))
      :time (e / ever)
      :time (y / yet))

instance(t,tell-01)
instance(i,i)
instance(s,story)
instance(t2,this)
instance(e,ever)
instance(y,yet)
polarity(t,-)
ARG0(t,i)
ARG1(t,s)
mod(s,t2)
time(t,e)
time(t,y)

(c / content-01
      :ARG0 (s / see-01
            :ARG0 c2
            :ARG1 (l / live-01
                  :ARG0 (i / i)))
      :ARG1 (c2 / companion
            :ARG0-of (m / meet-03
                  :ARG1 i
                  :time (r / return-01
                        :ARG1 i)))
      :mod (w / well))

instance(c,content-01)
instance(s,see-01)
instance(l,live-01)
instance(i,i)
instance(c2,companion)
instance(m,meet-03)
instance(r,return-01)
instance(w,well)
ARG0(c,s)
ARG0(s,c2)
ARG1(s,l)
ARG0(l,i)
ARG1(c,c2)
ARG0-of(c2,m)
ARG1(m,i)
time(m,r)
ARG1(r,i)
mod(c,w)

(c / contrast-01
      :ARG1 (s / sad-02
            :ARG1 i)
      :ARG2 (t / tell-01
            :ARG0 (i / i)
            :ARG1 (t3 / tire-01
                  :ARG1 i)
            :ARG2 (t2 / they)))

instance(c,contrast-01)
instance(s,sad-02)
instance(t,tell-01)
instance(i,i)
instance(t3,tire-01)
instance(t2,they)
ARG1(c,s)
ARG1(s,i)
ARG2(c,t)
ARG0(t,i)
ARG1(t,t3)
ARG1(t3,i)
ARG2(t,t2)

(c / comfort-01
      :ARG1 (s / sorrow-01
            :ARG0 (i / i))
      :time (n / now)
      :degree (l / little))

instance(c,comfort-01)
instance(s,sorrow-01)
instance(i,i)
instance(n,now)
instance(l,little)
ARG1(c,s)
ARG0(s,i)
time(c,n)
degree(c,l)

(s / say-01
  :ARG1 (e / entire
          :polarity -))

instance(s,say-01)
instance(e,entire)
ARG1(s,e)
polarity(e,-)

(c / contrast-01
  :ARG2 (k / know-01
          :ARG0 (i / i)
          :ARG1 (g / go-back-19
                  :ARG1 (h / he)
                  :ARG2 (p / planet
                          :poss h))
          :ARG1-of (c2 / cause-01
                     :ARG0 (f / find-01
                             :ARG0 i
                             :ARG1 (b / body
                                     :poss h)
                             :polarity -
                             :time (d / daybreak)))))

instance(c,contrast-01)
instance(k,know-01)
instance(i,i)
instance(g,go-back-19)
instance(h,he)
instance(p,planet)
instance(c2,cause-01)
instance(f,find-01)
instance(b,body)
instance(d,daybreak)
ARG2(c,k)
ARG0(k,i)
ARG1(k,g)
ARG1(g,h)
ARG2(g,p)
poss(p,h)
ARG1-of(k,c2)
ARG0(c2,f)
ARG0(f,i)
ARG1(f,b)
poss(b,h)
polarity(f,-)
time(f,d)

(a / and
      :op1 (b / body
            :mod (h / heavy :polarity -
                  :mod (s / such)))
      :op2 (l / love-01
            :ARG0 (i / i)
            :ARG1 (l2 / listen-01
                  :ARG0 i
                  :ARG1 (s2 / star)
                  :time (d / date-entity :dayperiod (n / night)))))

instance(a,and)
instance(b,body)
instance(h,heavy)
instance(s,such)
instance(l,love-01)
instance(i,i)
instance(l2,listen-01)
instance(s2,star)
instance(d,date-entity)
instance(n,night)
op1(a,b)
mod(b,h)
polarity(h,-)
mod(h,s)
op2(a,l)
ARG0(l,i)
ARG1(l,l2)
ARG0(l2,i)
ARG1(l2,s2)
time(l2,d)
dayperiod(d,n)

(r / resemble-01
      :ARG1 (i / it)
      :ARG2 (b / bell :quant 500000000
            :mod (l / little)))

instance(r,resemble-01)
instance(i,it)
instance(b,bell)
instance(l,little)
ARG1(r,i)
ARG2(r,b)
quant(b,500000000)
mod(b,l)

(c / contrast-01
      :ARG2 (t / thing :quant 1
            :mod (e / extraordinary)
            :time (d / draw-01
                  :ARG0 (i / i
                        :ARG0-of (f / forget-01
                              :ARG1 (a / add-on-05
                                    :ARG0 i
                                    :ARG1 (s / strap
                                          :consist-of (l2 / leather))
                                    :ARG2 m)))
                  :ARG1 (m / muzzle)
                  :ARG2 (p / prince
                        :mod (l / little)))))

instance(c,contrast-01)
instance(t,thing)
instance(e,extraordinary)
instance(d,draw-01)
instance(i,i)
instance(f,forget-01)
instance(a,add-on-05)
instance(s,strap)
instance(l2,leather)
instance(m,muzzle)
instance(p,prince)
instance(l,little)
ARG2(c,t)
quant(t,1)
mod(t,e)
time(t,d)
ARG0(d,i)
ARG0-of(i,f)
ARG1(f,a)
ARG0(a,i)
ARG1(a,s)
consist-of(s,l2)
ARG2(a,m)
ARG1(d,m)
ARG2(d,p)
mod(p,l)

(p / possible-01 :polarity -
      :time (e / ever)
      :ARG1 (f / fasten-01
            :ARG0 (h / he)
            :ARG1 (i / it)
            :ARG2 (s / sheep
                  :poss h)))

instance(p,possible-01)
instance(e,ever)
instance(f,fasten-01)
instance(h,he)
instance(i,it)
instance(s,sheep)
polarity(p,-)
time(p,e)
ARG1(p,f)
ARG0(f,h)
ARG1(f,i)
ARG2(f,s)
poss(s,h)

(k / keep-02
      :ARG1 (w / wonder-01
            :ARG0 (i / i)
            :ARG1 (e / event
                  :mod (a / amr-unknown)
                  :location (p / planet
                        :poss (h / he))))
      :time (n / now))

instance(k,keep-02)
instance(w,wonder-01)
instance(i,i)
instance(e,event)
instance(a,amr-unknown)
instance(p,planet)
instance(h,he)
instance(n,now)
ARG1(k,w)
ARG0(w,i)
ARG1(w,e)
mod(e,a)
location(e,p)
poss(p,h)
time(k,n)

(p2 / possible-01
      :ARG1 (e / eat-01
            :ARG0 (s / sheep)
            :ARG1 (f / flower)))

instance(p2,possible-01)
instance(e,eat-01)
instance(s,sheep)
instance(f,flower)
ARG1(p2,e)
ARG0(e,s)
ARG1(e,f)

(s / say-01
      :ARG0 (i / i)
      :ARG1 (h / have-polarity-91
            :ARG2 -
            :ARG1-of (s2 / sure-02))
      :ARG2 i
      :time (o / one))

instance(s,say-01)
instance(i,i)
instance(h,have-polarity-91)
instance(s2,sure-02)
instance(o,one)
ARG0(s,i)
ARG1(s,h)
ARG2(h,-)
ARG1-of(h,s2)
ARG2(s,i)
time(s,o)

(a / and
      :op1 (s / shut-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (g / globe
                  :consist-of (g2 / glass)
                  :poss (s2 / she)
                  :op1-of (u / under
                        :location-of (f2 / flower
                              :mod (l2 / little)
                              :poss p)))
            :time (r / rate-entity-91
                  :ARG4 (n / night)))
      :op2 (w / watch-01
            :ARG0 p
            :ARG1 (s3 / sheep)
            :manner (c / careful
                  :degree (v / very))))

instance(a,and)
instance(s,shut-01)
instance(p,prince)
instance(l,little)
instance(g,globe)
instance(g2,glass)
instance(s2,she)
instance(u,under)
instance(f2,flower)
instance(l2,little)
instance(r,rate-entity-91)
instance(n,night)
instance(w,watch-01)
instance(s3,sheep)
instance(c,careful)
instance(v,very)
op1(a,s)
ARG0(s,p)
mod(p,l)
ARG1(s,g)
consist-of(g,g2)
poss(g,s2)
op1-of(g,u)
location-of(u,f2)
mod(f2,l2)
poss(f2,p)
time(s,r)
ARG4(r,n)
op2(a,w)
ARG0(w,p)
ARG1(w,s3)
manner(w,c)
degree(c,v)

(h / happy-01
      :ARG1 (i / i)
      :time (t / then))

instance(h,happy-01)
instance(i,i)
instance(t,then)
ARG1(h,i)
time(h,t)

(a / and
      :op2 (s / sweet-05
            :ARG1 (l / laugh-01
                  :ARG0 (s2 / star
                        :mod (a2 / all)))))

instance(a,and)
instance(s,sweet-05)
instance(l,laugh-01)
instance(s2,star)
instance(a2,all)
op2(a,s)
ARG1(s,l)
ARG0(l,s2)
mod(s2,a2)

(c / contrast-01
      :ARG2 (s / say-01
            :ARG0 (i / i)
            :ARG1 (a2 / and
                  :op1 (o / one
                        :mod (a3 / absent-minded)
                        :time (o2 / or
                              :op1 (m / moment
                                    :mod (s2 / some))
                              :op2 (o3 / other)))
                  :op2 (e / enough
                        :domain (t2 / that)))
            :ARG2 i
            :time (t / time
                  :mod (a / another))))

instance(c,contrast-01)
instance(s,say-01)
instance(i,i)
instance(a2,and)
instance(o,one)
instance(a3,absent-minded)
instance(o2,or)
instance(m,moment)
instance(s2,some)
instance(o3,other)
instance(e,enough)
instance(t2,that)
instance(t,time)
instance(a,another)
ARG2(c,s)
ARG0(s,i)
ARG1(s,a2)
op1(a2,o)
mod(o,a3)
time(o,o2)
op1(o2,m)
mod(m,s2)
op2(o2,o3)
op2(a2,e)
domain(e,t2)
ARG2(s,i)
time(s,t)
mod(t,a)

(o / or
      :op1 (f / forget-01
            :ARG0 (h / he)
            :ARG1 (g / globe
                  :consist-of (g2 / glass)))
      :op2 (e / escape-01
            :ARG0 (s / sheep)
            :time (d / date-entity
                  :dayperiod (n / night))
            :manner (s3 / sound-02 :polarity -
                  :ARG1 s
                  :mod (a2 / any)))
      :time (d2 / date-entity
            :dayperiod (e2 / evening)
            :mod (s2 / some)))

instance(o,or)
instance(f,forget-01)
instance(h,he)
instance(g,globe)
instance(g2,glass)
instance(e,escape-01)
instance(s,sheep)
instance(d,date-entity)
instance(n,night)
instance(s3,sound-02)
instance(a2,any)
instance(d2,date-entity)
instance(e2,evening)
instance(s2,some)
op1(o,f)
ARG0(f,h)
ARG1(f,g)
consist-of(g,g2)
op2(o,e)
ARG0(e,s)
time(e,d)
dayperiod(d,n)
manner(e,s3)
polarity(s3,-)
ARG1(s3,s)
mod(s3,a2)
time(o,d2)
dayperiod(d2,e2)
mod(d2,s2)

(a / and
      :op2 (c / change-01
            :ARG1 (b / bell
                  :mod (l / little))
            :ARG2 (t2 / tear-03)
            :time (t / then)))

instance(a,and)
instance(c,change-01)
instance(b,bell)
instance(l,little)
instance(t2,tear-03)
instance(t,then)
op2(a,c)
ARG1(c,b)
mod(b,l)
ARG2(c,t2)
time(c,t)

(m / mystery
      :mod (g / great)
      :time (t / then)
      :location (h / here))

instance(m,mystery)
instance(g,great)
instance(t,then)
instance(h,here)
mod(m,g)
time(m,t)
location(m,h)

(d / determine-01
      :ARG0 (t / truth-value
            :polarity-of (e / eat-01
                  :ARG0 (s2 / sheep
                        :ARG1-of (s3 / see-01 :polarity -
                              :ARG0 (w2 / we)
                              :time (e2 / ever)))
                  :ARG1 (r / rose)
                  :location (s4 / somewhere
                        :ARG1-of (k / know-01 :polarity -
                              :ARG0 w2))))
      :ARG1 (t2 / truth-value
            :polarity-of (p / possible-01
                  :ARG1 (s / same-01
                        :ARG1 (n / nothing
                              :location (u / universe))
                        :ARG3 (a / and
                              :op1 (y / you
                                    :ARG0-of (l / love-01
                                          :ARG1 (p2 / prince
                                                :mod (l2 / little)))
                                    :mod (a2 / also))
                              :op2 (i / i))))))

instance(d,determine-01)
instance(t,truth-value)
instance(e,eat-01)
instance(s2,sheep)
instance(s3,see-01)
instance(w2,we)
instance(e2,ever)
instance(r,rose)
instance(s4,somewhere)
instance(k,know-01)
instance(t2,truth-value)
instance(p,possible-01)
instance(s,same-01)
instance(n,nothing)
instance(u,universe)
instance(a,and)
instance(y,you)
instance(l,love-01)
instance(p2,prince)
instance(l2,little)
instance(a2,also)
instance(i,i)
ARG0(d,t)
polarity-of(t,e)
ARG0(e,s2)
ARG1-of(s2,s3)
polarity(s3,-)
ARG0(s3,w2)
time(s3,e2)
ARG1(e,r)
location(e,s4)
ARG1-of(s4,k)
polarity(k,-)
ARG0(k,w2)
ARG1(d,t2)
polarity-of(t2,p)
ARG1(p,s)
ARG1(s,n)
location(n,u)
ARG3(s,a)
op1(a,y)
ARG0-of(y,l)
ARG1(l,p2)
mod(p2,l2)
mod(y,a2)
op2(a,i)

(l / look-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / sky)
      :direction (u / up))

instance(l,look-01)
instance(y,you)
instance(s,sky)
instance(u,up)
mode(l,imperative)
ARG0(l,y)
ARG1(l,s)
direction(l,u)

(a / ask-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / truth-value)
      :ARG2 y)

instance(a,ask-01)
instance(y,you)
instance(t,truth-value)
mode(a,imperative)
ARG0(a,y)
ARG1(a,t)
ARG2(a,y)

(e / eat-01
      :ARG0 (s / sheep)
      :ARG1 (f / flower)
      :polarity (a / amr-unknown))

instance(e,eat-01)
instance(s,sheep)
instance(f,flower)
instance(a,amr-unknown)
ARG0(e,s)
ARG1(e,f)
polarity(e,a)

(a / and
      :op2 (s / see-01
            :ARG0 (y / you)
            :ARG1 (h / have-manner-91
                  :ARG2 (c / change-01
                        :ARG1 (e / everything)))))

instance(a,and)
instance(s,see-01)
instance(y,you)
instance(h,have-manner-91)
instance(c,change-01)
instance(e,everything)
op2(a,s)
ARG0(s,y)
ARG1(s,h)
ARG2(h,c)
ARG1(c,e)

(a / and
      :op2 (u / understand-01 :polarity -
            :ARG0 (g / grown-up)
            :ARG1 (t / this
                  :ARG1-of (m / matter-01
                        :ARG1-of (i / important-01
                              :mod (m2 / much
                                    :degree (s / so)))))
            :time (e2 / ever)))

instance(a,and)
instance(u,understand-01)
instance(g,grown-up)
instance(t,this)
instance(m,matter-01)
instance(i,important-01)
instance(m2,much)
instance(s,so)
instance(e2,ever)
op2(a,u)
polarity(u,-)
ARG0(u,g)
ARG1(u,t)
ARG1-of(t,m)
ARG1-of(m,i)
mod(i,m2)
degree(m2,s)
time(u,e2)

(o / opine-01
      :ARG0 (i / i)
      :ARG1 (l / landscape
            :domain (t / this)
            :ARG1-of (h / have-degree-91
                  :ARG2 (l2 / lovely)
                  :ARG3 (m / most)
                  :ARG5 (w / world))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (s / sad-02
                        :ARG1 l)
                  :ARG3 (m2 / most)
                  :ARG5 w)))

instance(o,opine-01)
instance(i,i)
instance(l,landscape)
instance(t,this)
instance(h,have-degree-91)
instance(l2,lovely)
instance(m,most)
instance(w,world)
instance(h2,have-degree-91)
instance(s,sad-02)
instance(m2,most)
ARG0(o,i)
ARG1(o,l)
domain(l,t)
ARG1-of(l,h)
ARG2(h,l2)
ARG3(h,m)
ARG5(h,w)
ARG1-of(l,h2)
ARG2(h2,s)
ARG1(s,l)
ARG3(h2,m2)
ARG5(h2,w)

(c / contrast-01
      :ARG1 (s / same-01
            :ARG1 (i / it)
            :ARG2 (t / that
                  :location (p / page
                        :ARG1-of (p2 / precede-01))))
      :ARG2 (d / draw-01
            :ARG0 i
            :ARG1 i
            :mod (a / again)
            :purpose (i2 / impress-01
                  :ARG0 i
                  :ARG1 (m / memory
                        :poss (y / you)))))

instance(c,contrast-01)
instance(s,same-01)
instance(i,it)
instance(t,that)
instance(p,page)
instance(p2,precede-01)
instance(d,draw-01)
instance(a,again)
instance(i2,impress-01)
instance(m,memory)
instance(y,you)
ARG1(c,s)
ARG1(s,i)
ARG2(s,t)
location(t,p)
ARG1-of(p,p2)
ARG2(c,d)
ARG0(d,i)
ARG1(d,i)
mod(d,a)
purpose(d,i2)
ARG0(i2,i)
ARG1(i2,m)
poss(m,y)

(a / and
      :op1 (a2 / appear-01
            :ARG1 (p / prince
                  :mod (l / little))
            :location (e / earth))
      :op2 (d / disappear-01
            :ARG1 p)
      :location (h / here))

instance(a,and)
instance(a2,appear-01)
instance(p,prince)
instance(l,little)
instance(e,earth)
instance(d,disappear-01)
instance(h,here)
op1(a,a2)
ARG1(a2,p)
mod(p,l)
location(a2,e)
op2(a,d)
ARG1(d,p)
location(a,h)

(l / look-01 :mode imperative
      :ARG0 y
      :ARG1 (i / it)
      :manner (c / careful)
      :purpose (r / recognize-02
            :ARG0 (y / you)
            :ARG1 i
            :ARG1-of (e / ensure-01)
            :condition (t / travel-01
                  :ARG0 y
                  :ARG4 (d / desert
                        :location (c2 / continent :wiki "Africa" :name (n / name :op1 "Africa")))
                  :time (d2 / day
                        :mod (s2 / some)))))

instance(l,look-01)
instance(i,it)
instance(c,careful)
instance(r,recognize-02)
instance(y,you)
instance(e,ensure-01)
instance(t,travel-01)
instance(d,desert)
instance(c2,continent)
instance(n,name)
instance(d2,day)
instance(s2,some)
mode(l,imperative)
ARG0(l,y)
ARG1(l,i)
manner(l,c)
purpose(l,r)
ARG0(r,y)
ARG1(r,i)
ARG1-of(r,e)
condition(r,t)
ARG0(t,y)
ARG4(t,d)
location(d,c2)
wiki(c2,"Africa")
name(c2,n)
op1(n,"Africa")
time(t,d2)
mod(d2,s2)

(a / and
      :op2 (h / hurry-01 :polarity - :mode imperative :polite +
            :ARG0 y
            :ARG1 y
            :condition (c / come-upon-26
                  :ARG0 (y / you)
                  :ARG1 (s / spot
                        :mod (t / this)))))

instance(a,and)
instance(h,hurry-01)
instance(c,come-upon-26)
instance(y,you)
instance(s,spot)
instance(t,this)
op2(a,h)
polarity(h,-)
mode(h,imperative)
polite(h,+)
ARG0(h,y)
ARG1(h,y)
condition(h,c)
ARG0(c,y)
ARG1(c,s)
mod(s,t)

(w / wait-01 :mode imperative
      :ARG1 (y / you)
      :duration (t / time)
      :location (u / under
            :op1 (s / star)
            :manner (e / exact)))

instance(w,wait-01)
instance(y,you)
instance(t,time)
instance(u,under)
instance(s,star)
instance(e,exact)
mode(w,imperative)
ARG1(w,y)
duration(w,t)
location(w,u)
op1(u,s)
manner(u,e)

(k / know-01
      :ARG0 (y / you)
      :ARG1 m
      :condition (a / appear-01
            :ARG1 (m / man
                  :mod (l / little)
                  :ARG0-of (l2 / laugh-01)
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :mod (g / golden)))
                  :ARG0-of (r / refuse-01
                        :ARG1 (a2 / answer-01
                              :ARG1 (q / question-01))))
            :time (t / then)))

instance(k,know-01)
instance(y,you)
instance(a,appear-01)
instance(m,man)
instance(l,little)
instance(l2,laugh-01)
instance(h,have-03)
instance(h2,hair)
instance(g,golden)
instance(r,refuse-01)
instance(a2,answer-01)
instance(q,question-01)
instance(t,then)
ARG0(k,y)
ARG1(k,m)
condition(k,a)
ARG1(a,m)
mod(m,l)
ARG0-of(m,l2)
ARG0-of(m,h)
ARG1(h,h2)
mod(h2,g)
ARG0-of(m,r)
ARG1(r,a2)
ARG1(a2,q)
time(a,t)

(c / comfort-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :condition (t / this))

instance(c,comfort-01)
instance(y,you)
instance(i,i)
instance(t,this)
polite(c,+)
mode(c,imperative)
ARG0(c,y)
ARG1(c,i)
condition(c,t)

(s / send-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / word-01
            :ARG1 (c / come-01
                  :ARG1 (h / he)
                  :ARG4 (b / back)))
      :ARG2 (i / i))

instance(s,send-01)
instance(y,you)
instance(w,word-01)
instance(c,come-01)
instance(h,he)
instance(b,back)
instance(i,i)
mode(s,imperative)
ARG0(s,y)
ARG1(s,w)
ARG1(w,c)
ARG1(c,h)
ARG4(c,b)
ARG2(s,i)


